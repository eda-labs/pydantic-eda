# generated by datamodel-codegen:
#   filename:  config.json

from __future__ import annotations
from typing import Annotated, Any, Dict, List, Literal, Optional
from pydantic import BaseModel, Field, RootModel


class AppGroupVersion(BaseModel):
    groupVersion: Optional[str] = None
    version: Optional[str] = None


class ErrorIndex(BaseModel):
    index: Optional[int] = None


class ErrorItem(BaseModel):
    error: Optional[Dict[str, Any]] = None
    type: Optional[str] = None


class ErrorResponse(BaseModel):
    """
    Generic error response for REST APIs
    """

    code: Annotated[
        int, Field(description="the numeric HTTP error code for the response.")
    ]
    details: Annotated[
        Optional[str], Field(description="The optional details of the error response.")
    ] = None
    dictionary: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Dictionary/map of associated data/information relevant to the error.\nThe error "message" may contain {{name}} escapes that should be substituted\nwith information from this dictionary.'
        ),
    ] = None
    errors: Annotated[
        Optional[List[ErrorItem]],
        Field(
            description="Collection of errors in cases where more than one exists. This needs to be\nflexible so we can support multiple formats"
        ),
    ] = None
    index: Optional[ErrorIndex] = None
    internal: Annotated[
        Optional[int],
        Field(
            description="Internal error code in cases where we don't have an array of errors"
        ),
    ] = None
    message: Annotated[
        str, Field(description="The basic text error message for the error response.")
    ]
    ref: Annotated[
        Optional[str],
        Field(
            description="Reference to the error source. Should typically be the URI of the request"
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description="URI pointing at a document that describes the error and mitigation steps\nIf there is no document, point to the RFC for the HTTP error code"
        ),
    ] = None


class K8SPatchOp(BaseModel):
    from_: Annotated[Optional[str], Field(alias="from")] = None
    op: str
    path: str
    value: Optional[Dict[str, Any]] = None
    x_permissive: Annotated[Optional[bool], Field(alias="x-permissive")] = None


class Patch(RootModel[List[K8SPatchOp]]):
    root: List[K8SPatchOp]


class Resource(BaseModel):
    kind: Optional[str] = None
    name: Optional[str] = None
    namespaced: Optional[bool] = None
    readOnly: Optional[bool] = None
    singularName: Optional[str] = None
    uiCategory: Optional[str] = None


class ResourceHistoryEntry(BaseModel):
    author: Optional[str] = None
    changeType: Optional[str] = None
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    message: Optional[str] = None
    transactionId: Optional[int] = None


class ResourceList(BaseModel):
    apiVersion: Optional[str] = None
    groupVersion: Optional[str] = None
    kind: Optional[str] = None
    resources: Optional[List[Resource]] = None


class StatusDetails(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None


class UIResult(RootModel[str]):
    root: str


class ConfigletSpecConfig(BaseModel):
    config: Annotated[
        str,
        Field(
            description="JSON-formatted string representing the configuration to apply.",
            title="Configuration",
        ),
    ]
    operation: Annotated[
        Literal["Create", "Update", "Delete"],
        Field(
            description="Indicates the operation in which to apply the configuration.",
            title="Operation",
        ),
    ]
    path: Annotated[
        str,
        Field(
            description="Path to apply the configuration in jspath notation, including any keys if relevant, e.g. .system.information.",
            title="Path",
        ),
    ]


class ConfigletSpec(BaseModel):
    """
    Configlet is a configuration snippet that can be applied to a set of targets.
    The path on the target is provided in jspath notation, and the configuration is provided as a JSON string.
    Configlets can be applied to a set of targets based on a label selector, a list of targets, or a combination of both.
    """

    configs: Annotated[
        List[ConfigletSpecConfig],
        Field(
            description="Configurations to apply, being sets of paths, operations and JSON configurations.",
            title="Configurations",
        ),
    ]
    endpointSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Label selector to use to match targets to deploy Configlet to.",
            title="Target Selector",
        ),
    ] = None
    endpoints: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to targets to deploy Configlet to.", title="Targets"
        ),
    ] = None
    operatingSystem: Annotated[
        Optional[Literal["srl", "sros"]],
        Field(
            description="Operating system to match against when selecting targets.",
            title="Operating System",
        ),
    ] = None
    priority: Annotated[
        Optional[int],
        Field(
            description="Priority of this Configlet, between -100 and 100. Higher priorities overwrite lower priorities in the event of conflicts.",
            ge=-100,
            le=100,
            title="Priority",
        ),
    ] = 0
    version: Annotated[
        Optional[str],
        Field(
            description="Version to match against when selecting targets.",
            title="Version",
        ),
    ] = None


class ConfigletStatus(BaseModel):
    """
    Deployment status of this Configlet.
    """

    endpoints: Annotated[
        Optional[List[str]],
        Field(
            description="List of targets this configlet has been applied to.",
            title="Targets",
        ),
    ] = None


class ConfigletDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class ConfigletDeletedResources(RootModel[List[ConfigletDeletedResourceEntry]]):
    root: List[ConfigletDeletedResourceEntry]


class ConfigletMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]
    namespace: str


class AppGroup(BaseModel):
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None
    preferredVersion: Optional[AppGroupVersion] = None
    versions: Optional[List[AppGroupVersion]] = None


class ResourceHistory(RootModel[List[ResourceHistoryEntry]]):
    root: List[ResourceHistoryEntry]


class Status(BaseModel):
    apiVersion: Optional[str] = None
    details: Optional[StatusDetails] = None
    kind: Optional[str] = None
    string: Optional[str] = None


class Configlet(BaseModel):
    """
    Configlet is the Schema for the configlets API
    """

    apiVersion: str
    kind: str
    metadata: ConfigletMetadata
    spec: Annotated[
        ConfigletSpec,
        Field(
            description="Configlet is a configuration snippet that can be applied to a set of targets.\nThe path on the target is provided in jspath notation, and the configuration is provided as a JSON string.\nConfiglets can be applied to a set of targets based on a label selector, a list of targets, or a combination of both.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[ConfigletStatus],
        Field(description="Deployment status of this Configlet.", title="Status"),
    ] = None


class ConfigletList(BaseModel):
    """
    ConfigletList is a list of configlets
    """

    apiVersion: str
    items: Optional[List[Configlet]] = None
    kind: str
