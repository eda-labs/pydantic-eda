# generated by datamodel-codegen:
#   filename:  security.json

from __future__ import annotations
from typing import Annotated, Any, Dict, List, Literal, Optional
from pydantic import BaseModel, Field, RootModel


class AppGroup(BaseModel):
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None
    preferredVersion: Optional[AppGroupVersion] = None
    versions: Optional[List[AppGroupVersion]] = None


class AppGroupVersion(BaseModel):
    groupVersion: Optional[str] = None
    version: Optional[str] = None


class ErrorIndex(BaseModel):
    index: Optional[int] = None


class ErrorItem(BaseModel):
    error: Optional[Dict[str, Any]] = None
    type: Optional[str] = None


class ErrorResponse(BaseModel):
    """
    Generic error response for REST APIs
    """

    code: Annotated[
        int, Field(description="the numeric HTTP error code for the response.")
    ]
    details: Annotated[
        Optional[str], Field(description="The optional details of the error response.")
    ] = None
    dictionary: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Dictionary/map of associated data/information relevant to the error.\nThe error "message" may contain {{name}} escapes that should be substituted\nwith information from this dictionary.'
        ),
    ] = None
    errors: Annotated[
        Optional[List[ErrorItem]],
        Field(
            description="Collection of errors in cases where more than one exists. This needs to be\nflexible so we can support multiple formats"
        ),
    ] = None
    index: Optional[ErrorIndex] = None
    internal: Annotated[
        Optional[int],
        Field(
            description="Internal error code in cases where we don't have an array of errors"
        ),
    ] = None
    message: Annotated[
        str, Field(description="The basic text error message for the error response.")
    ]
    ref: Annotated[
        Optional[str],
        Field(
            description="Reference to the error source. Should typically be the URI of the request"
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description="URI pointing at a document that describes the error and mitigation steps\nIf there is no document, point to the RFC for the HTTP error code"
        ),
    ] = None


class K8SPatchOp(BaseModel):
    from_: Annotated[Optional[str], Field(alias="from")] = None
    op: str
    path: str
    value: Optional[Dict[str, Any]] = None
    x_permissive: Annotated[Optional[bool], Field(alias="x-permissive")] = None


class Keychain(BaseModel):
    """
    Keychain is the Schema for the keychains API
    """

    apiVersion: str
    kind: str
    metadata: KeychainMetadata
    spec: Annotated[
        KeychainSpec,
        Field(
            description="KeychainSpec defines the desired state of Keychain",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="KeychainStatus defines the observed state of Keychain",
            title="Status",
        ),
    ] = None


class KeychainDeletedResources(RootModel[List[KeychainDeletedResourceEntry]]):
    root: List[KeychainDeletedResourceEntry]


class KeychainDeployment(BaseModel):
    """
    KeychainDeployment is the Schema for the keychaindeployments API
    """

    apiVersion: str
    kind: str
    metadata: KeychainDeploymentMetadata
    spec: Annotated[
        KeychainDeploymentSpec,
        Field(
            description="KeychainDeploymentSpec defines the desired state of KeychainDeployment",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="KeychainDeploymentStatus defines the observed state of KeychainDeployment",
            title="Status",
        ),
    ] = None


class KeychainDeploymentDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class KeychainDeploymentDeletedResources(
    RootModel[List[KeychainDeploymentDeletedResourceEntry]]
):
    root: List[KeychainDeploymentDeletedResourceEntry]


class KeychainDeploymentList(BaseModel):
    """
    KeychainDeploymentList is a list of keychaindeployments
    """

    apiVersion: str
    items: Optional[List[KeychainDeployment]] = None
    kind: str


class KeychainDeploymentMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]
    namespace: str


class KeychainDeploymentSpec(BaseModel):
    """
    KeychainDeploymentSpec defines the desired state of KeychainDeployment
    """

    keychain: Annotated[
        str, Field(description="Reference to a Keychain", title="Keychain")
    ]
    node: Annotated[
        str,
        Field(
            description="Reference to a Node on which to push the BgpGroup",
            title="Node",
        ),
    ]


class KeychainList(BaseModel):
    """
    KeychainList is a list of keychains
    """

    apiVersion: str
    items: Optional[List[Keychain]] = None
    kind: str


KeychainMetadata = KeychainDeploymentMetadata


class KeychainSpec(BaseModel):
    """
    KeychainSpec defines the desired state of Keychain
    """

    key: Annotated[KeychainSpecKey, Field(title="Key")]


class KeychainSpecKey(BaseModel):
    algorithm: Annotated[Literal["MD5"], Field(title="Algorithm")]
    authenticationKey: Annotated[str, Field(title="Authentication Key")]


class Patch(RootModel[List[K8SPatchOp]]):
    root: List[K8SPatchOp]


class Resource(BaseModel):
    kind: Optional[str] = None
    name: Optional[str] = None
    namespaced: Optional[bool] = None
    readOnly: Optional[bool] = None
    singularName: Optional[str] = None
    uiCategory: Optional[str] = None


class ResourceHistory(RootModel[List[ResourceHistoryEntry]]):
    root: List[ResourceHistoryEntry]


class ResourceHistoryEntry(BaseModel):
    author: Optional[str] = None
    changeType: Optional[str] = None
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    message: Optional[str] = None
    transactionId: Optional[int] = None


class ResourceList(BaseModel):
    apiVersion: Optional[str] = None
    groupVersion: Optional[str] = None
    kind: Optional[str] = None
    resources: Optional[List[Resource]] = None


class Status(BaseModel):
    apiVersion: Optional[str] = None
    details: Optional[StatusDetails] = None
    kind: Optional[str] = None
    string: Optional[str] = None


class StatusDetails(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None


class UIResult(RootModel[str]):
    root: str


KeychainDeletedResourceEntry = KeychainDeploymentDeletedResourceEntry
