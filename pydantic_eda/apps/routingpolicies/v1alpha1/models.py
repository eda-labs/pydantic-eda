# generated by datamodel-codegen:
#   filename:  routingpolicies.json

from __future__ import annotations
from typing import Annotated, Any, Dict, List, Literal, Optional
from pydantic import BaseModel, Field, RootModel


class AppGroupVersion(BaseModel):
    groupVersion: Optional[str] = None
    version: Optional[str] = None


class ErrorIndex(BaseModel):
    index: Optional[int] = None


class ErrorItem(BaseModel):
    error: Optional[Dict[str, Any]] = None
    type: Optional[str] = None


class ErrorResponse(BaseModel):
    """
    Generic error response for REST APIs
    """

    code: Annotated[
        int, Field(description="the numeric HTTP error code for the response.")
    ]
    details: Annotated[
        Optional[str], Field(description="The optional details of the error response.")
    ] = None
    dictionary: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Dictionary/map of associated data/information relevant to the error.\nThe error "message" may contain {{name}} escapes that should be substituted\nwith information from this dictionary.'
        ),
    ] = None
    errors: Annotated[
        Optional[List[ErrorItem]],
        Field(
            description="Collection of errors in cases where more than one exists. This needs to be\nflexible so we can support multiple formats"
        ),
    ] = None
    index: Optional[ErrorIndex] = None
    internal: Annotated[
        Optional[int],
        Field(
            description="Internal error code in cases where we don't have an array of errors"
        ),
    ] = None
    message: Annotated[
        str, Field(description="The basic text error message for the error response.")
    ]
    ref: Annotated[
        Optional[str],
        Field(
            description="Reference to the error source. Should typically be the URI of the request"
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description="URI pointing at a document that describes the error and mitigation steps\nIf there is no document, point to the RFC for the HTTP error code"
        ),
    ] = None


class K8SPatchOp(BaseModel):
    from_: Annotated[Optional[str], Field(alias="from")] = None
    op: str
    path: str
    value: Optional[Dict[str, Any]] = None
    x_permissive: Annotated[Optional[bool], Field(alias="x-permissive")] = None


class Patch(RootModel[List[K8SPatchOp]]):
    root: List[K8SPatchOp]


class Resource(BaseModel):
    kind: Optional[str] = None
    name: Optional[str] = None
    namespaced: Optional[bool] = None
    readOnly: Optional[bool] = None
    singularName: Optional[str] = None
    uiCategory: Optional[str] = None


class ResourceHistoryEntry(BaseModel):
    author: Optional[str] = None
    changeType: Optional[str] = None
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    message: Optional[str] = None
    transactionId: Optional[int] = None


class ResourceList(BaseModel):
    apiVersion: Optional[str] = None
    groupVersion: Optional[str] = None
    kind: Optional[str] = None
    resources: Optional[List[Resource]] = None


class StatusDetails(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None


class UIResult(RootModel[str]):
    root: str


class CommunitySetSpec(BaseModel):
    """
    CommunitySetSpec defines the desired state of CommunitySet
    """

    expressionMatch: Annotated[
        Optional[str],
        Field(
            description="Options that determine the matching criteria that applies to the list of community members.",
            title="Expression Match",
        ),
    ] = None
    members: Annotated[
        Optional[List[str]],
        Field(
            description="A standard BGP community value, regular expression or well-known name or else a large BGP community value or regular expression.",
            title="Community Set Members",
        ),
    ] = None


class CommunitySetDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class CommunitySetDeletedResources(RootModel[List[CommunitySetDeletedResourceEntry]]):
    root: List[CommunitySetDeletedResourceEntry]


class CommunitySetMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]
    namespace: str


class PolicySpecDefaultActionBgp(BaseModel):
    """
    Actions related to the BGP protocol.
    """

    asPathPrepend: Annotated[
        Optional[int],
        Field(
            description="AS number to prepend to the AS Path attributes.",
            ge=1,
            le=4294967295,
            title="AS Path Prepend",
        ),
    ] = None
    asPathRemove: Annotated[
        Optional[bool],
        Field(
            description="Clear the AS path to make it empty.", title="AS Path Remove"
        ),
    ] = None
    asPathReplace: Annotated[
        Optional[List[int]],
        Field(
            description="Replace the existing AS path with a new AS_SEQUENCE containing the listed AS numbers.",
            title="AS Path Replace",
        ),
    ] = None
    localPreference: Annotated[
        Optional[int],
        Field(
            description="Set a new LOCAL_PREF value for matching BGP routes.",
            ge=0,
            le=4294967295,
            title="Set Local Preference",
        ),
    ] = None
    setOrigin: Annotated[
        Optional[Literal["egp", "igp", "incomplete"]],
        Field(
            description="Set a new ORIGIN attribute for matching BGP routes.",
            title="Set Origin",
        ),
    ] = None


class PolicySpecDefaultAction(BaseModel):
    """
    The default action to apply if no other actions are defined.
    """

    bgp: Annotated[
        Optional[PolicySpecDefaultActionBgp],
        Field(description="Actions related to the BGP protocol.", title="BGP"),
    ] = None
    policyResult: Annotated[
        Optional[Literal["accept", "reject"]],
        Field(description="Final disposition for the route.", title="Policy Result"),
    ] = None


PolicySpecStatementItemActionBgp = PolicySpecDefaultActionBgp


class PolicySpecStatementItemAction(BaseModel):
    """
    Actions for routes that match the policy statement.
    """

    bgp: Annotated[
        Optional[PolicySpecStatementItemActionBgp],
        Field(description="Actions related to the BGP protocol.", title="BGP"),
    ] = None
    policyResult: Annotated[
        Optional[Literal["accept", "reject"]],
        Field(description="Final disposition for the route.", title="Policy Result"),
    ] = None


class PolicySpecStatementItemMatchBgp(BaseModel):
    """
    Configuration for BGP-specific policy match criteria.
    """

    communitySet: Annotated[
        Optional[str],
        Field(
            description="Match conditions for BGP communities.", title="BGP Community"
        ),
    ] = None
    evpnRouteType: Annotated[
        Optional[List[int]],
        Field(
            description="Match conditions for EVPN route types.",
            title="EVPN Route Type",
        ),
    ] = None


class PolicySpecStatementItemMatch(BaseModel):
    """
    Match conditions of the policy statement.
    """

    bgp: Annotated[
        Optional[PolicySpecStatementItemMatchBgp],
        Field(
            description="Configuration for BGP-specific policy match criteria.",
            title="BGP",
        ),
    ] = None
    family: Annotated[
        Optional[List[str]],
        Field(
            description="Address families that the route belongs to.", title="Family"
        ),
    ] = None
    prefixSet: Annotated[
        Optional[str],
        Field(description="Reference to a PrefixSet resource.", title="Prefix Set"),
    ] = None
    protocol: Annotated[
        Optional[
            Literal[
                "AGGREGATE",
                "ARP_ND",
                "BGP",
                "BGP_EVPN",
                "DHCP",
                "GRIBI",
                "HOST",
                "ISIS",
                "LOCAL",
                "LINUX",
                "NDK1",
                "NDK2",
                "OSPFV2",
                "OSPFV3",
                "STATIC",
            ]
        ],
        Field(description="The route protocol type to match.", title="Protocol"),
    ] = None


class PolicySpecStatementItem(BaseModel):
    action: Annotated[
        Optional[PolicySpecStatementItemAction],
        Field(
            description="Actions for routes that match the policy statement.",
            title="Action",
        ),
    ] = None
    match: Annotated[
        Optional[PolicySpecStatementItemMatch],
        Field(description="Match conditions of the policy statement.", title="Match"),
    ] = None
    name: Annotated[
        str, Field(description="Name of the policy statement.", title="Name")
    ]


class PolicySpec(BaseModel):
    """
    Policy defines a set of rules and actions to manage network traffic or routing behavior, with statements that include matching conditions and actions, such as accepting or rejecting routes, or modifying route attributes like BGP parameters.
    """

    defaultAction: Annotated[
        Optional[PolicySpecDefaultAction],
        Field(
            description="The default action to apply if no other actions are defined.",
            title="Default Action",
        ),
    ] = None
    statement: Annotated[
        Optional[List[PolicySpecStatementItem]],
        Field(description="List of policy statements.", title="Statements"),
    ] = None


PolicyDeletedResourceEntry = CommunitySetDeletedResourceEntry


class PolicyDeletedResources(RootModel[List[PolicyDeletedResourceEntry]]):
    root: List[PolicyDeletedResourceEntry]


PolicyMetadata = CommunitySetMetadata


class PrefixSetSpecPrefixItem(BaseModel):
    endRange: Annotated[
        Optional[int],
        Field(
            description="The end range when using a range to match prefixes.",
            ge=0,
            le=128,
            title="End Range",
        ),
    ] = None
    exact: Annotated[
        Optional[bool],
        Field(
            description="Indicates if it is an exact match. Ignores the StartRange and EndRange if this param is set.",
            title="Exact",
        ),
    ] = None
    prefix: Annotated[
        str,
        Field(
            description="The IPv4 or IPv6 prefix in CIDR notation with mask.",
            title="Prefix",
        ),
    ]
    startRange: Annotated[
        Optional[int],
        Field(
            description="If specifying a range, this is the start of the range.",
            ge=0,
            le=128,
            title="Start Range",
        ),
    ] = None


class PrefixSetSpec(BaseModel):
    """
    PrefixSet defines a collection of IP prefixes, which may include specific CIDR blocks or a range of prefixes. This set is typically used for matching routes or implementing routing policies.
    """

    prefix: Annotated[
        List[PrefixSetSpecPrefixItem],
        Field(
            description="List of IPv4 or IPv6 prefixes in CIDR notation.",
            title="Prefixes",
        ),
    ]


PrefixSetDeletedResourceEntry = CommunitySetDeletedResourceEntry


class PrefixSetDeletedResources(RootModel[List[PrefixSetDeletedResourceEntry]]):
    root: List[PrefixSetDeletedResourceEntry]


PrefixSetMetadata = CommunitySetMetadata


class AppGroup(BaseModel):
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None
    preferredVersion: Optional[AppGroupVersion] = None
    versions: Optional[List[AppGroupVersion]] = None


class ResourceHistory(RootModel[List[ResourceHistoryEntry]]):
    root: List[ResourceHistoryEntry]


class Status(BaseModel):
    apiVersion: Optional[str] = None
    details: Optional[StatusDetails] = None
    kind: Optional[str] = None
    string: Optional[str] = None


class CommunitySet(BaseModel):
    """
    CommunitySet is the Schema for the communitysets API
    """

    apiVersion: str
    kind: str
    metadata: CommunitySetMetadata
    spec: Annotated[
        CommunitySetSpec,
        Field(
            description="CommunitySetSpec defines the desired state of CommunitySet",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="CommunitySetStatus defines the observed state of CommunitySet",
            title="Status",
        ),
    ] = None


class CommunitySetList(BaseModel):
    """
    CommunitySetList is a list of communitysets
    """

    apiVersion: str
    items: Optional[List[CommunitySet]] = None
    kind: str


class Policy(BaseModel):
    """
    Policy is the Schema for the policys API
    """

    apiVersion: str
    kind: str
    metadata: PolicyMetadata
    spec: Annotated[
        PolicySpec,
        Field(
            description="Policy defines a set of rules and actions to manage network traffic or routing behavior, with statements that include matching conditions and actions, such as accepting or rejecting routes, or modifying route attributes like BGP parameters.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="PolicyStatus defines the observed state of Policy.",
            title="Status",
        ),
    ] = None


class PolicyList(BaseModel):
    """
    PolicyList is a list of policys
    """

    apiVersion: str
    items: Optional[List[Policy]] = None
    kind: str


class PrefixSet(BaseModel):
    """
    PrefixSet is the Schema for the prefixsets API
    """

    apiVersion: str
    kind: str
    metadata: PrefixSetMetadata
    spec: Annotated[
        PrefixSetSpec,
        Field(
            description="PrefixSet defines a collection of IP prefixes, which may include specific CIDR blocks or a range of prefixes. This set is typically used for matching routes or implementing routing policies.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="PrefixSetStatus defines the observed state of PrefixSet.",
            title="Status",
        ),
    ] = None


class PrefixSetList(BaseModel):
    """
    PrefixSetList is a list of prefixsets
    """

    apiVersion: str
    items: Optional[List[PrefixSet]] = None
    kind: str
