# generated by datamodel-codegen:
#   filename:  environment.json

from __future__ import annotations

from typing import Annotated, Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class ErrorIndex(BaseModel):
    index: Optional[int] = None


class ErrorItem(BaseModel):
    error: Optional[Dict[str, Any]] = None
    type: Optional[str] = None


class ErrorResponse(BaseModel):
    """
    Generic error response for REST APIs
    """

    code: Annotated[
        int, Field(description="the numeric HTTP error code for the response.")
    ]
    details: Annotated[
        Optional[str], Field(description="The optional details of the error response.")
    ] = None
    dictionary: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Dictionary/map of associated data/information relevant to the error.\nThe error "message" may contain {{name}} escapes that should be substituted\nwith information from this dictionary.'
        ),
    ] = None
    domain: Annotated[
        Optional[str],
        Field(
            description='The "domain" for the error.  If empty, it is an EDA\ncore error.  Alternatively it can be an EDA application\n"apiVersion" value (e.g. interfaces.eda.nokia.com/v1alpha1)\nindicating that the error is specific to that application.\nThe domain gives the receiver information that they can use\nto help them interpret the "internal" error code value, or\nto find an internationalization translation for the message.'
        ),
    ] = None
    errors: Annotated[
        Optional[List[ErrorItem]],
        Field(
            description="Collection of errors in cases where more than one exists. This needs to be\nflexible so we can support multiple formats"
        ),
    ] = None
    index: Optional[ErrorIndex] = None
    internal: Annotated[
        Optional[int],
        Field(
            description="Internal error code in cases where we don't have an array of errors"
        ),
    ] = None
    message: Annotated[
        str, Field(description="The basic text error message for the error response.")
    ]
    ref: Annotated[
        Optional[str],
        Field(
            description="Reference to the error source. Should typically be the URI of the request"
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description="URI pointing at a document that describes the error and mitigation steps\nIf there is no document, point to the RFC for the HTTP error code"
        ),
    ] = None


class WorkflowGetInputsRespElem(BaseModel):
    ackPrompt: Optional[str] = None
    group: str
    kind: str
    name: str
    namespace: Optional[str] = None
    schemaPrompt: Optional[Dict[str, Any]] = None
    version: str


class WorkflowId(BaseModel):
    id: Annotated[
        Optional[int],
        Field(
            description="A workflow identifier; these are assigned by the system to a posted workflow."
        ),
    ] = None


class WorkflowIdentifier(BaseModel):
    group: str
    kind: str
    name: str
    namespace: Optional[str] = None
    version: str


class WorkflowInputDataElem(BaseModel):
    ack: Annotated[
        Optional[bool], Field(description="acknowledge or reject the input request")
    ] = None
    input: Annotated[
        Optional[Dict[str, Any]],
        Field(description="provide a json blob to the workflow"),
    ] = None
    subflow: Optional[WorkflowIdentifier] = None


class CliPluginSpec(BaseModel):
    """
    This workflow is used to push a CLI plugin to a node.
    """

    content: Annotated[
        Optional[str],
        Field(description="Content of the plugin to push.", title="Plugin Content"),
    ] = None
    fileName: Annotated[
        Optional[str],
        Field(
            description='Name of the plugin to push. For SR Linux this should include the .py extension, without leading slashes.\ne.g. "myplugin.py".',
            title="Plugin Name",
        ),
    ] = None


class CliPluginStatus(BaseModel):
    """
    CliPluginStatus defines the observed state of CliPlugin
    """

    id: Annotated[Optional[int], Field(description="Id", title="ID")] = None
    result: Annotated[
        Optional[str], Field(description="Aggregate result of the Flow", title="Result")
    ] = None


class CliPluginMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]
    namespace: str


class SetupEnvSpec(BaseModel):
    """
    This workflow is used to set up the global environment on a node.
    For SR Linux this results in an overwrite of the /etc/opt/srlinux/env file.
    """

    env: Annotated[
        Optional[str],
        Field(description="Content of the environment file to push.", title="env"),
    ] = None


class SetupEnvStatus(BaseModel):
    """
    SetupEnvStatus defines the observed state of SetupEnv
    """

    id: Annotated[Optional[int], Field(description="Id", title="ID")] = None
    result: Annotated[
        Optional[str], Field(description="Aggregate result of the Flow", title="Result")
    ] = None


SetupEnvMetadata = CliPluginMetadata


class WorkflowInputData(RootModel[List[WorkflowInputDataElem]]):
    root: List[WorkflowInputDataElem]


class CliPlugin(BaseModel):
    """
    CliPlugin is the Schema for the cliplugins API
    """

    apiVersion: str
    kind: str
    metadata: CliPluginMetadata
    spec: Annotated[
        CliPluginSpec,
        Field(
            description="This workflow is used to push a CLI plugin to a node.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[CliPluginStatus],
        Field(
            description="CliPluginStatus defines the observed state of CliPlugin",
            title="Status",
        ),
    ] = None


class CliPluginList(BaseModel):
    """
    CliPluginList is a list of cliplugins
    """

    apiVersion: str
    items: Optional[List[CliPlugin]] = None
    kind: str


class SetupEnv(BaseModel):
    """
    SetupEnv is the Schema for the setupenvs API
    """

    apiVersion: str
    kind: str
    metadata: SetupEnvMetadata
    spec: Annotated[
        SetupEnvSpec,
        Field(
            description="This workflow is used to set up the global environment on a node.\nFor SR Linux this results in an overwrite of the /etc/opt/srlinux/env file.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[SetupEnvStatus],
        Field(
            description="SetupEnvStatus defines the observed state of SetupEnv",
            title="Status",
        ),
    ] = None


class SetupEnvList(BaseModel):
    """
    SetupEnvList is a list of setupenvs
    """

    apiVersion: str
    items: Optional[List[SetupEnv]] = None
    kind: str
