# generated by datamodel-codegen:
#   filename:  protocols.json

from __future__ import annotations
from typing import Annotated, Any, Dict, List, Literal, Optional
from pydantic import BaseModel, Field, RootModel
from datetime import date


class AggregateRoute(BaseModel):
    """
    AggregateRoute is the Schema for the aggregateroutes API
    """

    apiVersion: str
    kind: str
    metadata: AggregateRouteMetadata
    spec: Annotated[
        AggregateRouteSpec,
        Field(
            description="The AggregateRoute enables the configuration of aggregated routes on a specified Router. This resource allows for the definition of destination prefixes, the selection of a router, and optionally, specific nodes where the aggregate routes should be configured. Advanced options include the ability to generate ICMP unreachable messages for packets matching the aggregate route, and the ability to block the advertisement of all contributing routes in dynamic protocols like BGP.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="AggregateRouteStatus defines the observed state of AggregateRoute",
            title="Status",
        ),
    ] = None


class AggregateRouteDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class AggregateRouteDeletedResources(
    RootModel[List[AggregateRouteDeletedResourceEntry]]
):
    root: List[AggregateRouteDeletedResourceEntry]


class AggregateRouteList(BaseModel):
    """
    AggregateRouteList is a list of aggregateroutes
    """

    apiVersion: str
    items: Optional[List[AggregateRoute]] = None
    kind: str


class AggregateRouteMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]
    namespace: str


class AggregateRouteSpec(BaseModel):
    """
    The AggregateRoute enables the configuration of aggregated routes on a specified Router. This resource allows for the definition of destination prefixes, the selection of a router, and optionally, specific nodes where the aggregate routes should be configured. Advanced options include the ability to generate ICMP unreachable messages for packets matching the aggregate route, and the ability to block the advertisement of all contributing routes in dynamic protocols like BGP.
    """

    aggregatorASN: Annotated[
        Optional[int],
        Field(description="Specifies the aggregator's ASN.", title="Aggregator ASN"),
    ] = None
    aggregatorIP: Annotated[
        Optional[str],
        Field(
            description="Specifies the aggregator's IP address.", title="Aggregator IP"
        ),
    ] = None
    generateICMP: Annotated[
        Optional[bool],
        Field(
            description="When set to true the router generares ICMP unreachable messages for packets matching the aggregate route (and not a more specific route).",
            title="Generate ICMP",
        ),
    ] = None
    nodes: Annotated[
        Optional[List[str]],
        Field(
            description="List of nodes on which to configure the aggregate routes. An AND operation is executed against the nodes in this list and the nodes on which the Router is configured to determine the Nodes on which to configure the aggregate routes.",
            title="Nodes",
        ),
    ] = None
    prefixes: Annotated[
        List[str],
        Field(
            description="List of destination prefixes for the aggregate routes.",
            title="Prefixes",
        ),
    ]
    router: Annotated[
        str,
        Field(
            description="Reference to a Router on which to configure the aggregate routes.  If no Nodes are provided then the aggregate routes will be provisioned on all Nodes on which the Router is provisioned.",
            title="Router",
        ),
    ]
    summaryOnly: Annotated[
        Optional[bool],
        Field(
            description="When set to true the router blocks the advertisement of all contributing routes of this aggregate route in dynamic protocols such as BGP.",
            title="Summary Only",
        ),
    ] = None


class AppGroup(BaseModel):
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None
    preferredVersion: Optional[AppGroupVersion] = None
    versions: Optional[List[AppGroupVersion]] = None


class AppGroupVersion(BaseModel):
    groupVersion: Optional[str] = None
    version: Optional[str] = None


class BGPGroup(BaseModel):
    """
    BGPGroup is the Schema for the bgpgroups API
    """

    apiVersion: str
    kind: str
    metadata: BGPGroupMetadata
    spec: Annotated[
        BGPGroupSpec,
        Field(
            description="The BGPGroup enables centralized management of BGP peer configurations. This resource allows setting a description, common BGP settings, and peer-specific configurations, simplifying the consistent application of policies across multiple peers. It also includes transport settings, such as local TCP address configuration, passive mode, and TCP MSS.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[BGPGroupStatus],
        Field(
            description="BGPGroupStatus defines the observed state of BGPGroup",
            title="Status",
        ),
    ] = None


BGPGroupDeletedResourceEntry = AggregateRouteDeletedResourceEntry


class BGPGroupDeletedResources(RootModel[List[BGPGroupDeletedResourceEntry]]):
    root: List[BGPGroupDeletedResourceEntry]


class BGPGroupList(BaseModel):
    """
    BGPGroupList is a list of bgpgroups
    """

    apiVersion: str
    items: Optional[List[BGPGroup]] = None
    kind: str


BGPGroupMetadata = AggregateRouteMetadata


class BGPGroupSpec(BaseModel):
    """
    The BGPGroup enables centralized management of BGP peer configurations. This resource allows setting a description, common BGP settings, and peer-specific configurations, simplifying the consistent application of policies across multiple peers. It also includes transport settings, such as local TCP address configuration, passive mode, and TCP MSS.
    """

    asPathOptions: Annotated[
        Optional[BGPGroupSpecAsPathOptions],
        Field(description="AS Path Options", title="AS Path Options"),
    ] = None
    bfd: Annotated[
        Optional[bool],
        Field(
            description="Enable or disable Bi-forward Forwarding Detection (BFD) with fast failover.",
            title="BFD",
        ),
    ] = None
    client: Annotated[
        Optional[bool],
        Field(
            description="When set to true, all configured and dynamic BGP peers are considered RR clients.",
            title="Route Reflector Client",
        ),
    ] = None
    clusterID: Annotated[
        Optional[str],
        Field(
            description="Enables route reflect client and sets the cluster ID.",
            title="Cluster ID",
        ),
    ] = None
    description: Annotated[
        Optional[str],
        Field(
            description="Sets the description on the BGP group.", title="Description"
        ),
    ] = None
    exportPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes advertised to peers.",
            title="Export Policy",
        ),
    ] = None
    grStaleRouteTime: Annotated[
        Optional[int],
        Field(
            description="Enables Graceful Restart on the peer and sets the stale route time.",
            ge=1,
            le=3600,
            title="GR Stale Route Time",
        ),
    ] = None
    importPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes received from peers.",
            title="Import Policy",
        ),
    ] = None
    ipv4Unicast: Annotated[
        Optional[BGPGroupSpecIpv4Unicast],
        Field(
            description="Parameters relating to the IPv4 unicast AFI/SAFI.",
            title="IPv4 Unicast",
        ),
    ] = None
    ipv6Unicast: Annotated[
        Optional[BGPGroupSpecIpv6Unicast],
        Field(
            description="Parameters relating to the IPv6 unicast AFI/SAFI.",
            title="IPv6 Unicast",
        ),
    ] = None
    keychain: Annotated[
        Optional[str],
        Field(
            description="Reference to a Keychain resource that will be used for authentication with the BGP peer.",
            title="Keychain",
        ),
    ] = None
    localAS: Annotated[
        Optional[BGPGroupSpecLocalAS],
        Field(
            description="The local autonomous system number advertised to peers.",
            title="Local AS",
        ),
    ] = None
    localPreference: Annotated[
        Optional[int],
        Field(
            description="Local Preference attribute added to received routes from the BGP peers, also sets local preference for generated routes.",
            ge=0,
            le=4294967295,
            title="Local Preference",
        ),
    ] = None
    multiHopMaxHop: Annotated[
        Optional[int],
        Field(
            description="Enable multihop for eBGP peers and sets the maximum number of hops allowed.",
            ge=1,
            le=255,
            title="Multihop Max Hop Count",
        ),
    ] = None
    nextHopSelf: Annotated[
        Optional[bool],
        Field(
            description="When set to true, the next-hop in all IPv4-unicast, IPv6-unicast and EVPN BGP routes advertised to the peer is set to the local-address.",
            title="Next Hop Self",
        ),
    ] = None
    peerAS: Annotated[
        Optional[BGPGroupSpecPeerAS],
        Field(
            description="The autonomous system number expected from peers.",
            title="Peer AS",
        ),
    ] = None
    sendCommunityLarge: Annotated[
        Optional[bool],
        Field(
            description="When false, all large (12 byte) BGP communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Large",
        ),
    ] = None
    sendCommunityStandard: Annotated[
        Optional[bool],
        Field(
            description="When false, all standard (4 byte) communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Standard",
        ),
    ] = None
    sendDefaultRoute: Annotated[
        Optional[BGPGroupSpecSendDefaultRoute],
        Field(
            description="Options for controlling the generation of default routes towards BGP peers.",
            title="Send Default Route",
        ),
    ] = None
    timers: Annotated[
        Optional[BGPGroupSpecTimers],
        Field(description="Timer configurations", title="Timers"),
    ] = None


class BGPGroupSpecAsPathOptions(BaseModel):
    """
    AS Path Options
    """

    allowOwnAS: Annotated[
        int,
        Field(
            description="The maximum number of times the global AS number or a local AS number of the BGP instance can appear in any received AS_PATH before it is considered a loop and considered invalid.",
            ge=0,
            le=255,
            title="Allow Own AS",
        ),
    ]
    removePrivateAS: Annotated[
        Optional[BGPGroupSpecAsPathOptionsRemovePrivateAS],
        Field(
            description="Options for removing private AS numbers (2-byte and 4-byte) from the advertised AS path towards all peers.",
            title="Remove Private AS",
        ),
    ] = None


class BGPGroupSpecAsPathOptionsRemovePrivateAS(BaseModel):
    """
    Options for removing private AS numbers (2-byte and 4-byte) from the advertised AS path towards all peers.
    """

    ignorePeerAS: Annotated[
        bool,
        Field(
            description="If set to true then do not delete or replace a private AS number that is the same as the peer AS number.",
            title="Ignore Peer AS",
        ),
    ]
    leadingOnly: Annotated[
        bool,
        Field(
            description="If set to true then only delete or replace private AS numbers that appear before the first occurrence of a non-private ASN in the sequence of most recent ASNs in the AS path.",
            title="Leading Only",
        ),
    ]
    removePrivateASMode: Annotated[
        Literal["DISABLED", "REPLACE", "DELETE"],
        Field(
            description="The method by which private AS numbers are removed from the advertised AS_PATH attribute.",
            title="Remove Private AS Mode",
        ),
    ]


class BGPGroupSpecIpv4Unicast(BaseModel):
    """
    Parameters relating to the IPv4 unicast AFI/SAFI.
    """

    advertiseIPV6NextHops: Annotated[
        Optional[bool],
        Field(
            description="Enables advertisement of IPv4 Unicast routes with IPv6 next-hops to peers.",
            title="Advertise IPv6 Next Hops",
        ),
    ] = None
    enabled: Annotated[
        Optional[bool],
        Field(description="Enables the IPv4 unicast AFISAFI.", title="Enabled"),
    ] = None
    maxReceivedRoutes: Annotated[
        Optional[int],
        Field(
            description="Maximum number of IPv4 Unicast routes that will be accepted from the neighbor, counting routes accepted and rejected by import policies.",
            ge=1,
            le=4294967295,
            title="Max Received Routes",
        ),
    ] = None
    receiveIPV6NextHops: Annotated[
        Optional[bool],
        Field(
            description="Enables the advertisement of the RFC 5549 capability to receive IPv4 routes with IPv6 next-hops.",
            title="Receive IPv6 Next Hops",
        ),
    ] = None


class BGPGroupSpecIpv6Unicast(BaseModel):
    """
    Parameters relating to the IPv6 unicast AFI/SAFI.
    """

    enabled: Annotated[
        Optional[bool],
        Field(description="Enables the IPv6 unicast AFISAFI", title="Enabled"),
    ] = None
    maxReceivedRoutes: Annotated[
        Optional[int],
        Field(
            description="Maximum number of IPv6 Unicast routes that will be accepted from the neighbor, counting routes accepted and rejected by import policies.",
            ge=1,
            le=4294967295,
            title="Max Received Routes",
        ),
    ] = None


class BGPGroupSpecLocalAS(BaseModel):
    """
    The local autonomous system number advertised to peers.
    """

    autonomousSystem: Annotated[
        int,
        Field(
            description="Local Autonomous System number.",
            ge=1,
            le=4294967295,
            title="Local Autonomous System",
        ),
    ]
    prependGlobalAS: Annotated[
        Optional[bool],
        Field(
            description="When set to true, the global ASN value is prepended to the AS path in outbound routes towards each BGP peer.",
            title="Prepend Global Autonomous System",
        ),
    ] = None
    prependLocalAS: Annotated[
        Optional[bool],
        Field(
            description="When set to true, the local AS value is prepended to the AS path of inbound routes from each EBGP peer.",
            title="Prepend Local Autonomous System",
        ),
    ] = None


class BGPGroupSpecPeerAS(BaseModel):
    """
    The autonomous system number expected from peers.
    """

    autonomousSystem: Annotated[
        int,
        Field(
            description="Local Autonomous System number.",
            ge=1,
            le=4294967295,
            title="Peer Autonomous System",
        ),
    ]


class BGPGroupSpecSendDefaultRoute(BaseModel):
    """
    Options for controlling the generation of default routes towards BGP peers.
    """

    addressFamily: Annotated[
        List[Literal["IPV4-UNICAST", "IPV6-UNICAST"]],
        Field(
            description="Enables the sending of a synthetically generated default IPv4 or IPV6 route to each peer.",
            title="Address Families",
        ),
    ]
    exportPolicy: Annotated[
        Optional[str],
        Field(
            description="Reference to a Policy that should be applied to the advertised default routes, in order to set their attributes to non-default values.",
            title="Export Policy",
        ),
    ] = None


class BGPGroupSpecTimers(BaseModel):
    """
    Timer configurations
    """

    connectRetry: Annotated[
        Optional[int],
        Field(
            description="The time interval in seconds between successive attempts to establish a session with a peer.",
            ge=1,
            le=65535,
            title="Connect Retry",
        ),
    ] = None
    holdTime: Annotated[
        Optional[int],
        Field(
            description="The hold-time interval in seconds that the router proposes to the peer in its OPEN message.",
            ge=0,
            le=65535,
            title="Hold Time",
        ),
    ] = None
    keepAlive: Annotated[
        Optional[int],
        Field(
            description="The interval in seconds between successive keepalive messages sent to the peer.",
            ge=0,
            le=21845,
            title="Keep Alive",
        ),
    ] = None
    minimumAdvertisementInterval: Annotated[
        Optional[int],
        Field(
            description="The value assigned to the MinRouteAdvertisementIntervalTimer of RFC 4271, for both EBGP and IBGP sessions.",
            ge=1,
            le=255,
            title="Minimum Advertisement Interval",
        ),
    ] = None


class BGPGroupStatus(BaseModel):
    """
    BGPGroupStatus defines the observed state of BGPGroup
    """

    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the BGP group.", title="Health"
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description="The time when the state of the resource last changed.",
            title="Last Change",
        ),
    ] = None
    numPeers: Annotated[
        Optional[int],
        Field(
            description="Number of configured BGP peers within the BGP Group.",
            title="Number of Peers",
        ),
    ] = None
    numPeersOperDown: Annotated[
        Optional[int],
        Field(
            description="Number of configured BGP peers which have an Operational State of down within the BGP Group.",
            title="Number of Peers Operational Down",
        ),
    ] = None
    numPeersUnknown: Annotated[
        Optional[int],
        Field(
            description="Number of configured BGP peers within the BGP Group which cannot be reached by npp.",
            title="Number of unknown BGP Peers",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Operational state of the BGP group.", title="Operational State"
        ),
    ] = None


class BGPPeer(BaseModel):
    """
    BGPPeer is the Schema for the bgppeers API
    """

    apiVersion: str
    kind: str
    metadata: BGPPeerMetadata
    spec: Annotated[
        BGPPeerSpec,
        Field(
            description="BGPPeer enables the configuration of BGP sessions. It allows specifying a description, an interface reference (either RoutedInterface or IrbInterface), and the peer IP address. The resource also supports dynamic neighbors, common BGP settings, and peer-specific configurations.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[BGPPeerStatus],
        Field(
            description="BGPPeerStatus defines the observed state of BGPPeer",
            title="Status",
        ),
    ] = None


BGPPeerDeletedResourceEntry = AggregateRouteDeletedResourceEntry


class BGPPeerDeletedResources(RootModel[List[BGPPeerDeletedResourceEntry]]):
    root: List[BGPPeerDeletedResourceEntry]


class BGPPeerList(BaseModel):
    """
    BGPPeerList is a list of bgppeers
    """

    apiVersion: str
    items: Optional[List[BGPPeer]] = None
    kind: str


BGPPeerMetadata = AggregateRouteMetadata


class BGPPeerSpec(BaseModel):
    """
    BGPPeer enables the configuration of BGP sessions. It allows specifying a description, an interface reference (either RoutedInterface or IrbInterface), and the peer IP address. The resource also supports dynamic neighbors, common BGP settings, and peer-specific configurations.
    """

    asPathOptions: Annotated[
        Optional[BGPPeerSpecAsPathOptions],
        Field(description="AS Path Options", title="AS Path Options"),
    ] = None
    bfd: Annotated[
        Optional[bool],
        Field(
            description="Enable or disable Bi-forward Forwarding Detection (BFD) with fast failover.",
            title="BFD",
        ),
    ] = None
    client: Annotated[
        Optional[bool],
        Field(
            description="When set to true, all configured and dynamic BGP peers are considered RR clients.",
            title="Route Reflector Client",
        ),
    ] = None
    clusterID: Annotated[
        Optional[str],
        Field(
            description="Enables route reflect client and sets the cluster ID.",
            title="Cluster ID",
        ),
    ] = None
    description: Annotated[
        Optional[str],
        Field(description="Sets the description on the BGP peer", title="Description"),
    ] = None
    dynamicNeighbor: Annotated[
        Optional[bool],
        Field(
            description="When set to true the Interface is added to the dynamic-neighbor list for dynamic peering.",
            title="Dynamic Neighbor",
        ),
    ] = False
    dynamicNeighborAllowedPeerAS: Annotated[
        Optional[List[int]],
        Field(
            description="The autonomous system numbers allowed from peers if dynamic peering is enabled.",
            title="Dynamic Neighbor Allowed Peer AS",
        ),
    ] = None
    exportPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes advertised to peers.",
            title="Export Policy",
        ),
    ] = None
    grStaleRouteTime: Annotated[
        Optional[int],
        Field(
            description="Enables Graceful Restart on the peer and sets the stale route time.",
            ge=1,
            le=3600,
            title="GR Stale Route Time",
        ),
    ] = None
    group: Annotated[
        str,
        Field(
            description="Reference to a BGPGroup. When present this BGP peer will be added to the BGP group",
            title="Group",
        ),
    ]
    importPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes received from peers.",
            title="Import Policy",
        ),
    ] = None
    interface: Annotated[
        str,
        Field(
            description="Reference to a RoutedInterface or IrbInterface resource whose IP will be used as a source IP for the BGP session.",
            title="Interface Reference",
        ),
    ]
    interfaceKind: Annotated[
        Literal["ROUTEDINTERFACE", "IRBINTERFACE"],
        Field(
            description="InterfaceReference type defines whether the provided Reference is a RoutedInterface or IrbInterface.",
            title="Interface Reference Type",
        ),
    ]
    ipv4Unicast: Annotated[
        Optional[BGPPeerSpecIpv4Unicast],
        Field(
            description="Parameters relating to the IPv4 unicast AFI/SAFI.",
            title="IPv4 Unicast",
        ),
    ] = None
    ipv6Unicast: Annotated[
        Optional[BGPPeerSpecIpv6Unicast],
        Field(
            description="Parameters relating to the IPv6 unicast AFI/SAFI.",
            title="IPv6 Unicast",
        ),
    ] = None
    keychain: Annotated[
        Optional[str],
        Field(
            description="Reference to a Keychain resource that will be used for authentication with the BGP peer.",
            title="Keychain",
        ),
    ] = None
    localAS: Annotated[
        Optional[BGPPeerSpecLocalAS],
        Field(
            description="The local autonomous system number advertised to peers.",
            title="Local AS",
        ),
    ] = None
    localPreference: Annotated[
        Optional[int],
        Field(
            description="Local Preference attribute added to received routes from the BGP peers, also sets local preference for generated routes.",
            ge=0,
            le=4294967295,
            title="Local Preference",
        ),
    ] = None
    multiHopMaxHop: Annotated[
        Optional[int],
        Field(
            description="Enable multihop for eBGP peers and sets the maximum number of hops allowed.",
            ge=1,
            le=255,
            title="Multihop Max Hop Count",
        ),
    ] = None
    nextHopSelf: Annotated[
        Optional[bool],
        Field(
            description="When set to true, the next-hop in all IPv4-unicast, IPv6-unicast and EVPN BGP routes advertised to the peer is set to the local-address.",
            title="Next Hop Self",
        ),
    ] = None
    node: Annotated[
        Optional[str],
        Field(
            description="Node on which to configure the BGP peer. This node must be one of the nodes on which the IRBInterface is configured.  When left blank or if the node is not part of the IRBInterface, the peer will not be deployed. Ignored for RoutedInterfaces.",
            title="Node",
        ),
    ] = None
    peerAS: Annotated[
        Optional[BGPPeerSpecPeerAS],
        Field(
            description="The autonomous system number expected from peers.",
            title="Peer AS",
        ),
    ] = None
    peerIP: Annotated[
        Optional[str],
        Field(
            description="Peer IP to which the peering session will be established.",
            title="Peer IP",
        ),
    ] = None
    sendCommunityLarge: Annotated[
        Optional[bool],
        Field(
            description="When false, all large (12 byte) BGP communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Large",
        ),
    ] = None
    sendCommunityStandard: Annotated[
        Optional[bool],
        Field(
            description="When false, all standard (4 byte) communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Standard",
        ),
    ] = None
    sendDefaultRoute: Annotated[
        Optional[BGPPeerSpecSendDefaultRoute],
        Field(
            description="Options for controlling the generation of default routes towards BGP peers.",
            title="Send Default Route",
        ),
    ] = None
    timers: Annotated[
        Optional[BGPPeerSpecTimers],
        Field(description="Timer configurations", title="Timers"),
    ] = None


class BGPPeerSpecAsPathOptions(BaseModel):
    """
    AS Path Options
    """

    allowOwnAS: Annotated[
        int,
        Field(
            description="The maximum number of times the global AS number or a local AS number of the BGP instance can appear in any received AS_PATH before it is considered a loop and considered invalid.",
            ge=0,
            le=255,
            title="Allow Own AS",
        ),
    ]
    removePrivateAS: Annotated[
        Optional[BGPPeerSpecAsPathOptionsRemovePrivateAS],
        Field(
            description="Options for removing private AS numbers (2-byte and 4-byte) from the advertised AS path towards all peers.",
            title="Remove Private AS",
        ),
    ] = None


BGPPeerSpecAsPathOptionsRemovePrivateAS = BGPGroupSpecAsPathOptionsRemovePrivateAS


BGPPeerSpecIpv4Unicast = BGPGroupSpecIpv4Unicast


BGPPeerSpecIpv6Unicast = BGPGroupSpecIpv6Unicast


BGPPeerSpecLocalAS = BGPGroupSpecLocalAS


BGPPeerSpecPeerAS = BGPGroupSpecPeerAS


BGPPeerSpecSendDefaultRoute = BGPGroupSpecSendDefaultRoute


BGPPeerSpecTimers = BGPGroupSpecTimers


class BGPPeerState(BaseModel):
    """
    BGPPeerState is the Schema for the bgppeerstates API
    """

    apiVersion: str
    kind: str
    metadata: BGPPeerStateMetadata
    spec: Annotated[
        BGPPeerStateSpec,
        Field(
            description="BGPPeerStateSpec defines the desired state of BGPPeerState",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="BGPPeerStateStatus defines the observed state of BGPPeerState",
            title="Status",
        ),
    ] = None


BGPPeerStateDeletedResourceEntry = AggregateRouteDeletedResourceEntry


class BGPPeerStateDeletedResources(RootModel[List[BGPPeerStateDeletedResourceEntry]]):
    root: List[BGPPeerStateDeletedResourceEntry]


class BGPPeerStateList(BaseModel):
    """
    BGPPeerStateList is a list of bgppeerstates
    """

    apiVersion: str
    items: Optional[List[BGPPeerState]] = None
    kind: str


BGPPeerStateMetadata = AggregateRouteMetadata


class BGPPeerStateSpec(BaseModel):
    """
    BGPPeerStateSpec defines the desired state of BGPPeerState
    """

    afiSAFI: Annotated[
        Optional[List[str]],
        Field(description="List of configured AFI-SAFI on the BGP peer"),
    ] = None
    defaultNetworkInstance: Annotated[
        bool, Field(description="Denotes if the router is a DefaultRouter or Router")
    ]
    dynamicNeighbor: Annotated[
        bool,
        Field(
            description="When set to true the PeerDefaultInterface is added to the dynamic-neighbor list for dynamic peering."
        ),
    ]
    group: Annotated[Optional[str], Field(description="Reference to a BGPGroup")] = None
    networkInstanceName: Annotated[
        str,
        Field(
            description="The name of the network-instance or VPRN in which the BGP peer is configured"
        ),
    ]
    node: Annotated[
        Optional[str],
        Field(description="The Node on which the BGP peer configuration resides"),
    ] = None
    nodeInterface: Annotated[
        Optional[str],
        Field(
            description="Node interface of the default interface which is configured to peer as a dynamic neighbor"
        ),
    ] = None
    operatingSystem: Annotated[
        Optional[str], Field(description="Operating System of the Node")
    ] = None
    peerIP: Annotated[Optional[str], Field(description="The IP of the BGP peer")] = None
    router: Annotated[
        str, Field(description="Router to which the BGP peer is attached")
    ]
    subInterfaceIndex: Annotated[
        Optional[int],
        Field(
            description="Sub interface index of the default interface which is configured to peer as a dynamic neighbor"
        ),
    ] = None


class BGPPeerStatus(BaseModel):
    """
    BGPPeerStatus defines the observed state of BGPPeer
    """

    enabled: Annotated[
        Optional[bool],
        Field(
            description="Indicated whether the BGP Peer is administratively enabled.",
            title="Enabled",
        ),
    ] = None
    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the BGP peer.", title="Health"
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description="The time when the state of the resource last changed.",
            title="Last Change",
        ),
    ] = None
    lastEvent: Annotated[
        Optional[str],
        Field(description="Last event of the BGP peer.", title="Last Event"),
    ] = None
    lastState: Annotated[
        Optional[str],
        Field(description="Last state of the BGP peer.", title="Last State"),
    ] = None
    negotiatedHoldTime: Annotated[
        Optional[int],
        Field(
            description="Hold time negotiated with the BGP peer.",
            title="Negotiated Hold Time",
        ),
    ] = None
    negotiatedKeepaliveInterval: Annotated[
        Optional[int],
        Field(
            description="Keepalive interval negotiated with the BGP peer.",
            title="Negotiated Keepalive Interval",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Operational state of the BGP peer", title="Operational State"
        ),
    ] = None
    peerAS: Annotated[
        Optional[int], Field(description="Peer AS of the BGP peer.", title="Peer AS")
    ] = None
    sessionState: Annotated[
        Optional[str],
        Field(description="The state of the BGP session.", title="Session State"),
    ] = None
    underMaintenance: Annotated[
        Optional[bool],
        Field(
            description="Indicates if the BGP peer is under maintenance.",
            title="Under Maintenance",
        ),
    ] = None


class DefaultAggregateRoute(BaseModel):
    """
    DefaultAggregateRoute is the Schema for the defaultaggregateroutes API
    """

    apiVersion: str
    kind: str
    metadata: DefaultAggregateRouteMetadata
    spec: Annotated[
        DefaultAggregateRouteSpec,
        Field(
            description="DefaultAggregateRoute allows the configuration of aggregate routes on a DefaultRouter. It includes specifying destination prefixes, the DefaultRouter, and settings for generating ICMP unreachable messages or blocking route advertisement. Additionally, it configures the aggregator’s IP address and ASN for efficient route management.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="DefaultAggregateRouteStatus defines the observed state of DefaultAggregateRoute",
            title="Status",
        ),
    ] = None


DefaultAggregateRouteDeletedResourceEntry = AggregateRouteDeletedResourceEntry


class DefaultAggregateRouteDeletedResources(
    RootModel[List[DefaultAggregateRouteDeletedResourceEntry]]
):
    root: List[DefaultAggregateRouteDeletedResourceEntry]


class DefaultAggregateRouteList(BaseModel):
    """
    DefaultAggregateRouteList is a list of defaultaggregateroutes
    """

    apiVersion: str
    items: Optional[List[DefaultAggregateRoute]] = None
    kind: str


DefaultAggregateRouteMetadata = AggregateRouteMetadata


class DefaultAggregateRouteSpec(BaseModel):
    """
    DefaultAggregateRoute allows the configuration of aggregate routes on a DefaultRouter. It includes specifying destination prefixes, the DefaultRouter, and settings for generating ICMP unreachable messages or blocking route advertisement. Additionally, it configures the aggregator’s IP address and ASN for efficient route management.
    """

    aggregatorASN: Annotated[
        Optional[int],
        Field(description="Specifies the aggregator's ASN.", title="Aggregator ASN"),
    ] = None
    aggregatorIP: Annotated[
        Optional[str],
        Field(
            description="Specifies the aggregator's IP address.", title="Aggregator IP"
        ),
    ] = None
    defaultRouter: Annotated[
        str,
        Field(
            description="Reference to a Default Router on which to configure the aggregate routes.  If no Nodes are provided then the aggregate routes will be provisioned on all Nodes on which the Router is provisioned.",
            title="DefaultRouter",
        ),
    ]
    generateICMP: Annotated[
        Optional[bool],
        Field(
            description="When set to true the router generares ICMP unreachable messages for packets matching the aggregate route (and not a more specific route).",
            title="Generate ICMP",
        ),
    ] = None
    prefixes: Annotated[
        List[str],
        Field(
            description="List of destination prefixes for the aggregate routes.",
            title="Prefixes",
        ),
    ]
    summaryOnly: Annotated[
        Optional[bool],
        Field(
            description="When set to true the router blocks the advertisement of all contributing routes of this aggregate route in dynamic protocols such as BGP.",
            title="Summary Only",
        ),
    ] = None


class DefaultBGPGroup(BaseModel):
    """
    DefaultBGPGroup is the Schema for the defaultbgpgroups API
    """

    apiVersion: str
    kind: str
    metadata: DefaultBGPGroupMetadata
    spec: Annotated[
        DefaultBGPGroupSpec,
        Field(
            description="The DefaultBGPGroup enables centralized management of BGP peer configurations within a DefaultRouter. This resource allows setting a description, common BGP settings, and peer-specific configurations, simplifying the consistent application of policies across multiple peers. It also includes transport settings, such as local TCP address configuration, passive mode, and TCP MSS. type DefaultBGPGroupSpec struct {",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[DefaultBGPGroupStatus],
        Field(
            description="DefaultBGPGroupStatus defines the observed state of DefaultBGPGroup.",
            title="Status",
        ),
    ] = None


DefaultBGPGroupDeletedResourceEntry = AggregateRouteDeletedResourceEntry


class DefaultBGPGroupDeletedResources(
    RootModel[List[DefaultBGPGroupDeletedResourceEntry]]
):
    root: List[DefaultBGPGroupDeletedResourceEntry]


class DefaultBGPGroupList(BaseModel):
    """
    DefaultBGPGroupList is a list of defaultbgpgroups
    """

    apiVersion: str
    items: Optional[List[DefaultBGPGroup]] = None
    kind: str


DefaultBGPGroupMetadata = AggregateRouteMetadata


class DefaultBGPGroupSpec(BaseModel):
    """
    The DefaultBGPGroup enables centralized management of BGP peer configurations within a DefaultRouter. This resource allows setting a description, common BGP settings, and peer-specific configurations, simplifying the consistent application of policies across multiple peers. It also includes transport settings, such as local TCP address configuration, passive mode, and TCP MSS. type DefaultBGPGroupSpec struct {
    """

    asPathOptions: Annotated[
        Optional[DefaultBGPGroupSpecAsPathOptions],
        Field(description="AS Path Options", title="AS Path Options"),
    ] = None
    bfd: Annotated[
        Optional[bool],
        Field(
            description="Enable or disable Bi-forward Forwarding Detection (BFD) with fast failover.",
            title="BFD",
        ),
    ] = None
    client: Annotated[
        Optional[bool],
        Field(
            description="When set to true, all configured and dynamic BGP peers are considered RR clients.",
            title="Route Reflector Client",
        ),
    ] = None
    clusterID: Annotated[
        Optional[str],
        Field(
            description="Enables route reflect client and sets the cluster ID.",
            title="Cluster ID",
        ),
    ] = None
    description: Annotated[
        Optional[str],
        Field(
            description="Sets the description on the BGP group.", title="Description"
        ),
    ] = None
    exportPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes advertised to peers.",
            title="Export Policy",
        ),
    ] = None
    grStaleRouteTime: Annotated[
        Optional[int],
        Field(
            description="Enables Graceful Restart on the peer and sets the stale route time.",
            ge=1,
            le=3600,
            title="GR Stale Route Time",
        ),
    ] = None
    importPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes received from peers.",
            title="Import Policy",
        ),
    ] = None
    ipv4Unicast: Annotated[
        Optional[DefaultBGPGroupSpecIpv4Unicast],
        Field(
            description="Parameters relating to the IPv4 unicast AFI/SAFI.",
            title="IPv4 Unicast",
        ),
    ] = None
    ipv6Unicast: Annotated[
        Optional[DefaultBGPGroupSpecIpv6Unicast],
        Field(
            description="Parameters relating to the IPv6 unicast AFI/SAFI.",
            title="IPv6 Unicast",
        ),
    ] = None
    keychain: Annotated[
        Optional[str],
        Field(
            description="Reference to a Keychain resource that will be used for authentication with the BGP peer.",
            title="Keychain",
        ),
    ] = None
    l2VPNEVPN: Annotated[
        Optional[DefaultBGPGroupSpecL2VPNEVPN],
        Field(
            description="Parameters relating to the EVPN AFI/SAFI.",
            title="L2VPN EVPN Settings",
        ),
    ] = None
    localAS: Annotated[
        Optional[DefaultBGPGroupSpecLocalAS],
        Field(
            description="The local autonomous system number advertised to peers.",
            title="Local AS",
        ),
    ] = None
    localPreference: Annotated[
        Optional[int],
        Field(
            description="Local Preference attribute added to received routes from the BGP peers, also sets local preference for generated routes.",
            ge=0,
            le=4294967295,
            title="Local Preference",
        ),
    ] = None
    multiHopMaxHop: Annotated[
        Optional[int],
        Field(
            description="Enable multihop for eBGP peers and sets the maximum number of hops allowed.",
            ge=1,
            le=255,
            title="Multihop Max Hop Count",
        ),
    ] = None
    nextHopSelf: Annotated[
        Optional[bool],
        Field(
            description="When set to true, the next-hop in all IPv4-unicast, IPv6-unicast and EVPN BGP routes advertised to the peer is set to the local-address.",
            title="Next Hop Self",
        ),
    ] = None
    peerAS: Annotated[
        Optional[DefaultBGPGroupSpecPeerAS],
        Field(
            description="The autonomous system number expected from peers.",
            title="Peer AS",
        ),
    ] = None
    sendCommunityLarge: Annotated[
        Optional[bool],
        Field(
            description="When false, all large (12 byte) BGP communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Large",
        ),
    ] = None
    sendCommunityStandard: Annotated[
        Optional[bool],
        Field(
            description="When false, all standard (4 byte) communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Standard",
        ),
    ] = None
    sendDefaultRoute: Annotated[
        Optional[DefaultBGPGroupSpecSendDefaultRoute],
        Field(
            description="Options for controlling the generation of default routes towards BGP peers.",
            title="Send Default Route",
        ),
    ] = None
    timers: Annotated[
        Optional[DefaultBGPGroupSpecTimers],
        Field(description="Timer configurations", title="Timers"),
    ] = None


class DefaultBGPGroupSpecAsPathOptions(BaseModel):
    """
    AS Path Options
    """

    allowOwnAS: Annotated[
        int,
        Field(
            description="The maximum number of times the global AS number or a local AS number of the BGP instance can appear in any received AS_PATH before it is considered a loop and considered invalid.",
            ge=0,
            le=255,
            title="Allow Own AS",
        ),
    ]
    removePrivateAS: Annotated[
        Optional[DefaultBGPGroupSpecAsPathOptionsRemovePrivateAS],
        Field(
            description="Options for removing private AS numbers (2-byte and 4-byte) from the advertised AS path towards all peers.",
            title="Remove Private AS",
        ),
    ] = None


DefaultBGPGroupSpecAsPathOptionsRemovePrivateAS = (
    BGPGroupSpecAsPathOptionsRemovePrivateAS
)


DefaultBGPGroupSpecIpv4Unicast = BGPGroupSpecIpv4Unicast


DefaultBGPGroupSpecIpv6Unicast = BGPGroupSpecIpv6Unicast


class DefaultBGPGroupSpecL2VPNEVPN(BaseModel):
    """
    Parameters relating to the EVPN AFI/SAFI.
    """

    advertiseIPV6NextHops: Annotated[
        Optional[bool],
        Field(
            description="Enables advertisement of EVPN routes with IPv6 next-hops to peers.",
            title="Advertise IPv6 Next Hops",
        ),
    ] = None
    enabled: Annotated[
        Optional[bool],
        Field(description="Enables the L2VPN EVPN AFISAFI.", title="Enabled"),
    ] = None
    maxReceivedRoutes: Annotated[
        Optional[int],
        Field(
            description="Maximum number of EVPN routes that will be accepted from the neighbor, counting routes accepted and rejected by import policies.",
            ge=1,
            le=4294967295,
            title="Max Received Routes",
        ),
    ] = None


DefaultBGPGroupSpecLocalAS = BGPGroupSpecLocalAS


DefaultBGPGroupSpecPeerAS = BGPGroupSpecPeerAS


DefaultBGPGroupSpecSendDefaultRoute = BGPGroupSpecSendDefaultRoute


DefaultBGPGroupSpecTimers = BGPGroupSpecTimers


class DefaultBGPGroupStatus(BaseModel):
    """
    DefaultBGPGroupStatus defines the observed state of DefaultBGPGroup.
    """

    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the BGP group.", title="Health"
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description="The time when the state of the resource last changed.",
            title="Last Change",
        ),
    ] = None
    numPeers: Annotated[
        Optional[int],
        Field(
            description="Number of configured BGP peers within the BGP Group.",
            title="Number of Peers",
        ),
    ] = None
    numPeersOperDown: Annotated[
        Optional[int],
        Field(
            description="Number of configured BGP peers which have an Operational State of down within the BGP Group.",
            title="Number of Peers Operational Down",
        ),
    ] = None
    numPeersUnknown: Annotated[
        Optional[int],
        Field(
            description="Number of configured BGP peers within the BGP Group which cannot be reached by npp.",
            title="Number of unknown BGP Peers",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Operational state of the BGP group.", title="Operational State"
        ),
    ] = None


class DefaultBGPPeer(BaseModel):
    """
    DefaultBGPPeer is the Schema for the defaultbgppeers API
    """

    apiVersion: str
    kind: str
    metadata: DefaultBGPPeerMetadata
    spec: Annotated[
        DefaultBGPPeerSpec,
        Field(
            description="DefaultBGPPeer enables the configuration of BGP sessions within a DefaultRouter. It allows specifying a description, a DefaultInterface reference, and the peer IP address. The resource also supports dynamic neighbors, common BGP settings, and peer-specific configurations.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[DefaultBGPPeerStatus],
        Field(
            description="DefaultBGPPeerStatus defines the observed state of DefaultBGPPeer",
            title="Status",
        ),
    ] = None


DefaultBGPPeerDeletedResourceEntry = AggregateRouteDeletedResourceEntry


class DefaultBGPPeerDeletedResources(
    RootModel[List[DefaultBGPPeerDeletedResourceEntry]]
):
    root: List[DefaultBGPPeerDeletedResourceEntry]


class DefaultBGPPeerList(BaseModel):
    """
    DefaultBGPPeerList is a list of defaultbgppeers
    """

    apiVersion: str
    items: Optional[List[DefaultBGPPeer]] = None
    kind: str


DefaultBGPPeerMetadata = AggregateRouteMetadata


class DefaultBGPPeerSpec(BaseModel):
    """
    DefaultBGPPeer enables the configuration of BGP sessions within a DefaultRouter. It allows specifying a description, a DefaultInterface reference, and the peer IP address. The resource also supports dynamic neighbors, common BGP settings, and peer-specific configurations.
    """

    asPathOptions: Annotated[
        Optional[DefaultBGPPeerSpecAsPathOptions],
        Field(description="AS Path Options", title="AS Path Options"),
    ] = None
    bfd: Annotated[
        Optional[bool],
        Field(
            description="Enable or disable Bi-forward Forwarding Detection (BFD) with fast failover.",
            title="BFD",
        ),
    ] = None
    client: Annotated[
        Optional[bool],
        Field(
            description="When set to true, all configured and dynamic BGP peers are considered RR clients.",
            title="Route Reflector Client",
        ),
    ] = None
    clusterID: Annotated[
        Optional[str],
        Field(
            description="Enables route reflect client and sets the cluster ID.",
            title="Cluster ID",
        ),
    ] = None
    description: Annotated[
        Optional[str],
        Field(description="Sets the description on the BGP peer.", title="Description"),
    ] = None
    dynamicNeighbor: Annotated[
        Optional[bool],
        Field(
            description="When set to true the DefaultInterface is added to the dynamic-neighbor list for dynamic peering.",
            title="Dynamic Neighbor",
        ),
    ] = False
    dynamicNeighborAllowedPeerAS: Annotated[
        Optional[List[int]],
        Field(
            description="The autonomous system numbers allowed from peers if dynamic peering is enabled.",
            title="Dynamic Neighbor Allowed Peer AS",
        ),
    ] = None
    exportPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes advertised to peers.",
            title="Export Policy",
        ),
    ] = None
    grStaleRouteTime: Annotated[
        Optional[int],
        Field(
            description="Enables Graceful Restart on the peer and sets the stale route time.",
            ge=1,
            le=3600,
            title="GR Stale Route Time",
        ),
    ] = None
    group: Annotated[
        str, Field(description="Reference to a DefaultBGPGroup.", title="Group")
    ]
    importPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes received from peers.",
            title="Import Policy",
        ),
    ] = None
    interface: Annotated[
        str,
        Field(
            description="Reference to either a DefaultInterface or SystemInterface whose IP will be used as a source IP for the BGP session.",
            title="Interface",
        ),
    ]
    interfaceKind: Annotated[
        Literal["DEFAULTINTERFACE", "SYSTEMINTERFACE"],
        Field(
            description="Reference to a the Kind of interface whose IP will be used as a source IP for the BGP session.",
            title="Interface Kind",
        ),
    ]
    ipv4Unicast: Annotated[
        Optional[DefaultBGPPeerSpecIpv4Unicast],
        Field(
            description="Parameters relating to the IPv4 unicast AFI/SAFI.",
            title="IPv4 Unicast",
        ),
    ] = None
    ipv6Unicast: Annotated[
        Optional[DefaultBGPPeerSpecIpv6Unicast],
        Field(
            description="Parameters relating to the IPv6 unicast AFI/SAFI.",
            title="IPv6 Unicast",
        ),
    ] = None
    keychain: Annotated[
        Optional[str],
        Field(
            description="Reference to a Keychain resource that will be used for authentication with the BGP peer.",
            title="Keychain",
        ),
    ] = None
    l2VPNEVPN: Annotated[
        Optional[DefaultBGPPeerSpecL2VPNEVPN],
        Field(
            description="Parameters relating to the EVPN AFI/SAFI.", title="L2VPN EVPN"
        ),
    ] = None
    localAS: Annotated[
        Optional[DefaultBGPPeerSpecLocalAS],
        Field(
            description="The local autonomous system number advertised to peers.",
            title="Local AS",
        ),
    ] = None
    localPreference: Annotated[
        Optional[int],
        Field(
            description="Local Preference attribute added to received routes from the BGP peers, also sets local preference for generated routes.",
            ge=0,
            le=4294967295,
            title="Local Preference",
        ),
    ] = None
    multiHopMaxHop: Annotated[
        Optional[int],
        Field(
            description="Enable multihop for eBGP peers and sets the maximum number of hops allowed.",
            ge=1,
            le=255,
            title="Multihop Max Hop Count",
        ),
    ] = None
    nextHopSelf: Annotated[
        Optional[bool],
        Field(
            description="When set to true, the next-hop in all IPv4-unicast, IPv6-unicast and EVPN BGP routes advertised to the peer is set to the local-address.",
            title="Next Hop Self",
        ),
    ] = None
    peerAS: Annotated[
        Optional[DefaultBGPPeerSpecPeerAS],
        Field(
            description="The autonomous system number expected from peers.",
            title="Peer AS",
        ),
    ] = None
    peerIP: Annotated[
        Optional[str],
        Field(
            description="Peer IP to which the peering session will be established. There cannot be both a PeerIp and PeerDefaultInterface property set.",
            title="Peer IP",
        ),
    ] = None
    peerInterface: Annotated[
        Optional[str],
        Field(
            description="Reference to a DefaultInterface or SystemInterface resource to which the peering session will be established. There cannot be both a PeerIp and PeerDefaultInterface property set.",
            title="Peer DefaultInterface",
        ),
    ] = None
    peerInterfaceKind: Annotated[
        Optional[Literal["DEFAULTINTERFACE", "SYSTEMINTERFACE"]],
        Field(
            description="Reference to a the Kind of interface to which to peer to.",
            title="Peer DefaultInterface Kind",
        ),
    ] = None
    sendCommunityLarge: Annotated[
        Optional[bool],
        Field(
            description="When false, all large (12 byte) BGP communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Large",
        ),
    ] = None
    sendCommunityStandard: Annotated[
        Optional[bool],
        Field(
            description="When false, all standard (4 byte) communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Standard",
        ),
    ] = None
    sendDefaultRoute: Annotated[
        Optional[DefaultBGPPeerSpecSendDefaultRoute],
        Field(
            description="Options for controlling the generation of default routes towards BGP peers.",
            title="Send Default Route",
        ),
    ] = None
    timers: Annotated[
        Optional[DefaultBGPPeerSpecTimers],
        Field(description="Timer configurations", title="Timers"),
    ] = None


class DefaultBGPPeerSpecAsPathOptions(BaseModel):
    """
    AS Path Options
    """

    allowOwnAS: Annotated[
        int,
        Field(
            description="The maximum number of times the global AS number or a local AS number of the BGP instance can appear in any received AS_PATH before it is considered a loop and considered invalid.",
            ge=0,
            le=255,
            title="Allow Own AS",
        ),
    ]
    removePrivateAS: Annotated[
        Optional[DefaultBGPPeerSpecAsPathOptionsRemovePrivateAS],
        Field(
            description="Options for removing private AS numbers (2-byte and 4-byte) from the advertised AS path towards all peers.",
            title="Remove Private AS",
        ),
    ] = None


DefaultBGPPeerSpecAsPathOptionsRemovePrivateAS = (
    BGPGroupSpecAsPathOptionsRemovePrivateAS
)


DefaultBGPPeerSpecIpv4Unicast = BGPGroupSpecIpv4Unicast


DefaultBGPPeerSpecIpv6Unicast = BGPGroupSpecIpv6Unicast


DefaultBGPPeerSpecL2VPNEVPN = DefaultBGPGroupSpecL2VPNEVPN


DefaultBGPPeerSpecLocalAS = BGPGroupSpecLocalAS


DefaultBGPPeerSpecPeerAS = BGPGroupSpecPeerAS


DefaultBGPPeerSpecSendDefaultRoute = BGPGroupSpecSendDefaultRoute


DefaultBGPPeerSpecTimers = BGPGroupSpecTimers


class DefaultBGPPeerStatus(BaseModel):
    """
    DefaultBGPPeerStatus defines the observed state of DefaultBGPPeer
    """

    enabled: Annotated[
        Optional[bool],
        Field(
            description="Indicated whether the BGP Peer is administratively enabled.",
            title="Enabled",
        ),
    ] = None
    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the BGP peer.", title="Health"
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description="The time when the state of the resource last changed.",
            title="Last Change",
        ),
    ] = None
    lastEvent: Annotated[
        Optional[str],
        Field(description="Last event of the BGP peer.", title="Last Event"),
    ] = None
    lastState: Annotated[
        Optional[str],
        Field(description="Last state of the BGP peer.", title="Last State"),
    ] = None
    negotiatedHoldTime: Annotated[
        Optional[int],
        Field(
            description="Hold time negotiated with the BGP peer.",
            title="Negotiated Hold Time",
        ),
    ] = None
    negotiatedKeepaliveInterval: Annotated[
        Optional[int],
        Field(
            description="Keepalive interval negotiated with the BGP peer.",
            title="Negotiated Keepalive Interval",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Operational state of the BGP peer", title="Operational State"
        ),
    ] = None
    peerAS: Annotated[
        Optional[int], Field(description="Peer AS of the BGP peer.", title="Peer AS")
    ] = None
    sessionState: Annotated[
        Optional[str],
        Field(description="The state of the BGP session.", title="Session State"),
    ] = None
    underMaintenance: Annotated[
        Optional[bool],
        Field(
            description="Indicates if the BGP peer is under maintenance.",
            title="Under Maintenance",
        ),
    ] = None


class DefaultRouteReflector(BaseModel):
    """
    DefaultRouteReflector is the Schema for the defaultroutereflectors API
    """

    apiVersion: str
    kind: str
    metadata: DefaultRouteReflectorMetadata
    spec: Annotated[
        DefaultRouteReflectorSpec,
        Field(
            description="DefaultRouteReflector enables the configuration of iBGP sessions to RouteReflectorClients. It includes settings for the DefaultInterface, BGP group, client selectors, and the Cluster ID. Additionally, it allows for the configuration of L2VPN EVPN settings and applies common BGP configuration settings to manage routing efficiently within the network.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[DefaultRouteReflectorStatus],
        Field(
            description="DefaultRouteReflectorStatus defines the observed state of DefaultRouteReflector",
            title="Status",
        ),
    ] = None


class DefaultRouteReflectorClient(BaseModel):
    """
    DefaultRouteReflectorClient is the Schema for the defaultroutereflectorclients API
    """

    apiVersion: str
    kind: str
    metadata: DefaultRouteReflectorClientMetadata
    spec: Annotated[
        DefaultRouteReflectorClientSpec,
        Field(
            description="DefaultRouteReflectorClient enables the configuration of iBGP sessions from a client to RouteReflectors. It includes settings for the DefaultInterface, BGP group, client selectors, and a list of Route Reflector IPs. Additionally, it allows for the configuration of L2VPN EVPN settings and applies common BGP configuration settings to manage routing efficiently within the network.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[DefaultRouteReflectorClientStatus],
        Field(
            description="DefaultRouteReflectorClientStatus defines the observed state of DefaultRouteReflectorClient",
            title="Status",
        ),
    ] = None


DefaultRouteReflectorClientDeletedResourceEntry = AggregateRouteDeletedResourceEntry


class DefaultRouteReflectorClientDeletedResources(
    RootModel[List[DefaultRouteReflectorClientDeletedResourceEntry]]
):
    root: List[DefaultRouteReflectorClientDeletedResourceEntry]


class DefaultRouteReflectorClientList(BaseModel):
    """
    DefaultRouteReflectorClientList is a list of defaultroutereflectorclients
    """

    apiVersion: str
    items: Optional[List[DefaultRouteReflectorClient]] = None
    kind: str


DefaultRouteReflectorClientMetadata = AggregateRouteMetadata


class DefaultRouteReflectorClientSpec(BaseModel):
    """
    DefaultRouteReflectorClient enables the configuration of iBGP sessions from a client to RouteReflectors. It includes settings for the DefaultInterface, BGP group, client selectors, and a list of Route Reflector IPs. Additionally, it allows for the configuration of L2VPN EVPN settings and applies common BGP configuration settings to manage routing efficiently within the network.
    """

    asPathOptions: Annotated[
        Optional[DefaultRouteReflectorClientSpecAsPathOptions],
        Field(description="AS Path Options", title="AS Path Options"),
    ] = None
    bfd: Annotated[
        Optional[bool],
        Field(
            description="Enable or disable Bi-forward Forwarding Detection (BFD) with fast failover.",
            title="BFD",
        ),
    ] = None
    defaultBgpClientGroup: Annotated[
        str,
        Field(
            description="Reference to Default Bgp Group.",
            title="Default BGP Client Group",
        ),
    ]
    exportPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes advertised to peers.",
            title="Export Policy",
        ),
    ] = None
    grStaleRouteTime: Annotated[
        Optional[int],
        Field(
            description="Enables Graceful Restart on the peer and sets the stale route time.",
            ge=1,
            le=3600,
            title="GR Stale Route Time",
        ),
    ] = None
    importPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes received from peers.",
            title="Import Policy",
        ),
    ] = None
    interface: Annotated[
        str,
        Field(
            description="Reference to either a DefaultInterface or SystemInterface from which the session to the RR will be done from.",
            title="Interface",
        ),
    ]
    interfaceKind: Annotated[
        Literal["DEFAULTINTERFACE", "SYSTEMINTERFACE"],
        Field(
            description="Reference to a the Kind of interface from which the session to the RR will be done from.",
            title="Interface Kind",
        ),
    ]
    ipv4Unicast: Annotated[
        Optional[DefaultRouteReflectorClientSpecIpv4Unicast],
        Field(
            description="Parameters relating to the IPv4 unicast AFI/SAFI.",
            title="IPv4 Unicast",
        ),
    ] = None
    ipv6Unicast: Annotated[
        Optional[DefaultRouteReflectorClientSpecIpv6Unicast],
        Field(
            description="Parameters relating to the IPv6 unicast AFI/SAFI.",
            title="IPv6 Unicast",
        ),
    ] = None
    keychain: Annotated[
        Optional[str],
        Field(
            description="Reference to a Keychain resource that will be used for authentication with the BGP peer.",
            title="Keychain",
        ),
    ] = None
    l2VPNEVPN: Annotated[
        Optional[DefaultRouteReflectorClientSpecL2VPNEVPN],
        Field(
            description="Parameters relating to the EVPN AFI/SAFI.", title="L2VPN EVPN"
        ),
    ] = None
    localAS: Annotated[
        Optional[DefaultRouteReflectorClientSpecLocalAS],
        Field(
            description="The local autonomous system number advertised to peers.",
            title="Local AS",
        ),
    ] = None
    peerAS: Annotated[
        Optional[DefaultRouteReflectorClientSpecPeerAS],
        Field(
            description="The autonomous system number expected from peers.",
            title="Peer AS",
        ),
    ] = None
    routeReflectorIPs: Annotated[
        Optional[List[str]],
        Field(
            description="List of the peering IPs on the RRs to which peering session is established.",
            title="Route Reflector IPs",
        ),
    ] = None
    routeReflectorSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Label selector used to select the RouteReflectors to which the iBGP sessions are established.",
            title="Route Reflector Selector",
        ),
    ] = None
    sendCommunityLarge: Annotated[
        Optional[bool],
        Field(
            description="When false, all large (12 byte) BGP communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Large",
        ),
    ] = None
    sendCommunityStandard: Annotated[
        Optional[bool],
        Field(
            description="When false, all standard (4 byte) communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Standard",
        ),
    ] = None
    sendDefaultRoute: Annotated[
        Optional[DefaultRouteReflectorClientSpecSendDefaultRoute],
        Field(
            description="Options for controlling the generation of default routes towards BGP peers.",
            title="Send Default Route",
        ),
    ] = None
    timers: Annotated[
        Optional[DefaultRouteReflectorClientSpecTimers],
        Field(description="Timer configurations", title="Timers"),
    ] = None


class DefaultRouteReflectorClientSpecAsPathOptions(BaseModel):
    """
    AS Path Options
    """

    allowOwnAS: Annotated[
        int,
        Field(
            description="The maximum number of times the global AS number or a local AS number of the BGP instance can appear in any received AS_PATH before it is considered a loop and considered invalid.",
            ge=0,
            le=255,
            title="Allow Own AS",
        ),
    ]
    removePrivateAS: Annotated[
        Optional[DefaultRouteReflectorClientSpecAsPathOptionsRemovePrivateAS],
        Field(
            description="Options for removing private AS numbers (2-byte and 4-byte) from the advertised AS path towards all peers.",
            title="Remove Private AS",
        ),
    ] = None


DefaultRouteReflectorClientSpecAsPathOptionsRemovePrivateAS = (
    BGPGroupSpecAsPathOptionsRemovePrivateAS
)


DefaultRouteReflectorClientSpecIpv4Unicast = BGPGroupSpecIpv4Unicast


DefaultRouteReflectorClientSpecIpv6Unicast = BGPGroupSpecIpv6Unicast


DefaultRouteReflectorClientSpecL2VPNEVPN = DefaultBGPGroupSpecL2VPNEVPN


DefaultRouteReflectorClientSpecLocalAS = BGPGroupSpecLocalAS


DefaultRouteReflectorClientSpecPeerAS = BGPGroupSpecPeerAS


DefaultRouteReflectorClientSpecSendDefaultRoute = BGPGroupSpecSendDefaultRoute


DefaultRouteReflectorClientSpecTimers = BGPGroupSpecTimers


class DefaultRouteReflectorClientStatus(BaseModel):
    """
    DefaultRouteReflectorClientStatus defines the observed state of DefaultRouteReflectorClient
    """

    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the DefaultRouteReflectorClient.",
            title="Health",
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description="The time when the state of the resource last changed.",
            title="Last Change",
        ),
    ] = None
    numRouteReflectorClientBGPPeers: Annotated[
        Optional[int],
        Field(
            description="Total number of configured route reflector peers on the route reflector client.",
            title="Number of Route Reflector Client BGP Peers",
        ),
    ] = None
    numRouteReflectorClientBGPPeersOperDown: Annotated[
        Optional[int],
        Field(
            description="Total number of configured route reflector peers on the route reflector client that are operationally down.",
            title="Number of Oper Down Route Reflector Client BGP Peers",
        ),
    ] = None
    operDownRouteReflectorClientPeers: Annotated[
        Optional[List[str]],
        Field(
            description="List of route reflector BGPPeers which are operationally down.",
            title="Oper Down Route Reflector Client Peers",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Operational state of the DefaultRouteReflectorClient.",
            title="Operational State",
        ),
    ] = None


DefaultRouteReflectorDeletedResourceEntry = AggregateRouteDeletedResourceEntry


class DefaultRouteReflectorDeletedResources(
    RootModel[List[DefaultRouteReflectorDeletedResourceEntry]]
):
    root: List[DefaultRouteReflectorDeletedResourceEntry]


class DefaultRouteReflectorList(BaseModel):
    """
    DefaultRouteReflectorList is a list of defaultroutereflectors
    """

    apiVersion: str
    items: Optional[List[DefaultRouteReflector]] = None
    kind: str


DefaultRouteReflectorMetadata = AggregateRouteMetadata


class DefaultRouteReflectorSpec(BaseModel):
    """
    DefaultRouteReflector enables the configuration of iBGP sessions to RouteReflectorClients. It includes settings for the DefaultInterface, BGP group, client selectors, and the Cluster ID. Additionally, it allows for the configuration of L2VPN EVPN settings and applies common BGP configuration settings to manage routing efficiently within the network.
    """

    asPathOptions: Annotated[
        Optional[DefaultRouteReflectorSpecAsPathOptions],
        Field(description="AS Path Options", title="AS Path Options"),
    ] = None
    bfd: Annotated[
        Optional[bool],
        Field(
            description="Enable or disable Bi-forward Forwarding Detection (BFD) with fast failover.",
            title="BFD",
        ),
    ] = None
    clientIPs: Annotated[
        Optional[List[str]],
        Field(
            description="List of RR client IPs to which the iBGP sessions are established.",
            title="Client IPs",
        ),
    ] = None
    clientSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Label selector used to select the RouteReflectorClients to which the iBGP sessions are established.",
            title="Client Selector",
        ),
    ] = None
    clusterID: Annotated[
        str,
        Field(
            description="Sets the cluster ID for route reflectors.", title="Cluster ID"
        ),
    ]
    defaultBGPRRGroup: Annotated[
        str,
        Field(
            description="Reference to a DefaultBGPGroup.", title="Default BGP RR Group"
        ),
    ]
    exportPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes advertised to peers.",
            title="Export Policy",
        ),
    ] = None
    grStaleRouteTime: Annotated[
        Optional[int],
        Field(
            description="Enables Graceful Restart on the peer and sets the stale route time.",
            ge=1,
            le=3600,
            title="GR Stale Route Time",
        ),
    ] = None
    importPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes received from peers.",
            title="Import Policy",
        ),
    ] = None
    interface: Annotated[
        str,
        Field(
            description="Reference to either a DefaultInterface or SystemInterface from which the session to the client will be done from.",
            title="Interface Reference",
        ),
    ]
    interfaceKind: Annotated[
        Literal["DEFAULTINTERFACE", "SYSTEMINTERFACE"],
        Field(
            description="Reference to a the Kind of interface from which the session to the client will be done from.",
            title="Interface Kind",
        ),
    ]
    ipv4Unicast: Annotated[
        Optional[DefaultRouteReflectorSpecIpv4Unicast],
        Field(
            description="Parameters relating to the IPv4 unicast AFI/SAFI.",
            title="IPv4 Unicast",
        ),
    ] = None
    ipv6Unicast: Annotated[
        Optional[DefaultRouteReflectorSpecIpv6Unicast],
        Field(
            description="Parameters relating to the IPv6 unicast AFI/SAFI.",
            title="IPv6 Unicast",
        ),
    ] = None
    keychain: Annotated[
        Optional[str],
        Field(
            description="Reference to a Keychain resource that will be used for authentication with the BGP peer.",
            title="Keychain",
        ),
    ] = None
    l2VPNEVPN: Annotated[
        Optional[DefaultRouteReflectorSpecL2VPNEVPN],
        Field(
            description="Parameters relating to the EVPN AFI/SAFI.", title="L2VPN EVPN"
        ),
    ] = None
    localAS: Annotated[
        Optional[DefaultRouteReflectorSpecLocalAS],
        Field(
            description="The local autonomous system number advertised to peers.",
            title="Local AS",
        ),
    ] = None
    peerAS: Annotated[
        Optional[DefaultRouteReflectorSpecPeerAS],
        Field(
            description="The autonomous system number expected from peers.",
            title="Peer AS",
        ),
    ] = None
    sendCommunityLarge: Annotated[
        Optional[bool],
        Field(
            description="When false, all large (12 byte) BGP communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Large",
        ),
    ] = None
    sendCommunityStandard: Annotated[
        Optional[bool],
        Field(
            description="When false, all standard (4 byte) communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Standard",
        ),
    ] = None
    sendDefaultRoute: Annotated[
        Optional[DefaultRouteReflectorSpecSendDefaultRoute],
        Field(
            description="Options for controlling the generation of default routes towards BGP peers.",
            title="Send Default Route",
        ),
    ] = None
    timers: Annotated[
        Optional[DefaultRouteReflectorSpecTimers],
        Field(description="Timer configurations", title="Timers"),
    ] = None


class DefaultRouteReflectorSpecAsPathOptions(BaseModel):
    """
    AS Path Options
    """

    allowOwnAS: Annotated[
        int,
        Field(
            description="The maximum number of times the global AS number or a local AS number of the BGP instance can appear in any received AS_PATH before it is considered a loop and considered invalid.",
            ge=0,
            le=255,
            title="Allow Own AS",
        ),
    ]
    removePrivateAS: Annotated[
        Optional[DefaultRouteReflectorSpecAsPathOptionsRemovePrivateAS],
        Field(
            description="Options for removing private AS numbers (2-byte and 4-byte) from the advertised AS path towards all peers.",
            title="Remove Private AS",
        ),
    ] = None


DefaultRouteReflectorSpecAsPathOptionsRemovePrivateAS = (
    BGPGroupSpecAsPathOptionsRemovePrivateAS
)


DefaultRouteReflectorSpecIpv4Unicast = BGPGroupSpecIpv4Unicast


DefaultRouteReflectorSpecIpv6Unicast = BGPGroupSpecIpv6Unicast


DefaultRouteReflectorSpecL2VPNEVPN = DefaultBGPGroupSpecL2VPNEVPN


DefaultRouteReflectorSpecLocalAS = BGPGroupSpecLocalAS


DefaultRouteReflectorSpecPeerAS = BGPGroupSpecPeerAS


DefaultRouteReflectorSpecSendDefaultRoute = BGPGroupSpecSendDefaultRoute


DefaultRouteReflectorSpecTimers = BGPGroupSpecTimers


class DefaultRouteReflectorStatus(BaseModel):
    """
    DefaultRouteReflectorStatus defines the observed state of DefaultRouteReflector
    """

    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the Route Reflector.",
            title="Health",
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description="The time when the state of the resource last changed.",
            title="Last Change",
        ),
    ] = None
    numRouteReflectorBGPPeers: Annotated[
        Optional[int],
        Field(
            description="Total number of configured route reflector client peers on the route reflector.",
            title="Number of Route Reflector BGP Peers",
        ),
    ] = None
    numRouteReflectorBGPPeersOperDown: Annotated[
        Optional[int],
        Field(
            description="Total number of configured route reflector client peers on the route reflector that are operationally down.",
            title="Number of Oper Down Route Reflector BGP Peers",
        ),
    ] = None
    operDownRouteReflectorPeers: Annotated[
        Optional[List[str]],
        Field(
            description="List of route reflector BGPPeers which are operationally down.",
            title="Oper Down Route Reflector Peers",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Operational state of the Route Reflector.",
            title="Operational State",
        ),
    ] = None


class DefaultStaticRoute(BaseModel):
    """
    DefaultStaticRoute is the Schema for the defaultstaticroutes API
    """

    apiVersion: str
    kind: str
    metadata: DefaultStaticRouteMetadata
    spec: Annotated[
        DefaultStaticRouteSpec,
        Field(
            description="DefaultStaticRoute enables the configuration of static routes within a DefaultRouter. It allows specifying destination prefixes, route preference, and a nexthop group. This resource facilitates precise control over routing behavior, including options for BFD, route resolution, and blackholing traffic.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[DefaultStaticRouteStatus],
        Field(
            description="DefaultStaticRouteStatus defines the observed state of default static route",
            title="Status",
        ),
    ] = None


DefaultStaticRouteDeletedResourceEntry = AggregateRouteDeletedResourceEntry


class DefaultStaticRouteDeletedResources(
    RootModel[List[DefaultStaticRouteDeletedResourceEntry]]
):
    root: List[DefaultStaticRouteDeletedResourceEntry]


class DefaultStaticRouteList(BaseModel):
    """
    DefaultStaticRouteList is a list of defaultstaticroutes
    """

    apiVersion: str
    items: Optional[List[DefaultStaticRoute]] = None
    kind: str


DefaultStaticRouteMetadata = AggregateRouteMetadata


class DefaultStaticRouteSpec(BaseModel):
    """
    DefaultStaticRoute enables the configuration of static routes within a DefaultRouter. It allows specifying destination prefixes, route preference, and a nexthop group. This resource facilitates precise control over routing behavior, including options for BFD, route resolution, and blackholing traffic.
    """

    defaultRouter: Annotated[
        str,
        Field(
            description="Reference to a DefaultRouter on which to configure the static routes.",
            title="Default Router",
        ),
    ]
    nexthopGroup: Annotated[
        DefaultStaticRouteSpecNexthopGroup,
        Field(
            description="Group of nexthops for the list of prefixes.",
            title="Nexthop Group",
        ),
    ]
    preference: Annotated[
        Optional[int],
        Field(description="Defines the route preference.", title="Preference"),
    ] = None
    prefixes: Annotated[
        List[str],
        Field(
            description="List of destination prefixes and mask to use for the static routes.",
            title="Prefixes",
        ),
    ]


class DefaultStaticRouteSpecNexthopGroup(BaseModel):
    """
    Group of nexthops for the list of prefixes.
    """

    bfd: Annotated[
        Optional[DefaultStaticRouteSpecNexthopGroupBfd],
        Field(
            description="Enables BFD to the next-hops in the group. Local and Remote discriminator parameters have been deprecated at this level. Use Nexthop to set these parameters.",
            title="BFD",
        ),
    ] = None
    blackhole: Annotated[
        Optional[bool],
        Field(
            description="If set to true all traffic destined to the prefixes will be blackholed.  If enabled, next-hops are ignored and this takes precedence.",
            title="Blackhole",
        ),
    ] = False
    nexthops: Annotated[
        Optional[List[DefaultStaticRouteSpecNexthopGroupNexthop]],
        Field(description="Ordered list of nexthops.", title="Nexthops"),
    ] = None
    resolve: Annotated[
        Optional[bool],
        Field(
            description="If set to true the next-hops can be destinations which are resolved in the route table.",
            title="Resolve",
        ),
    ] = False


class DefaultStaticRouteSpecNexthopGroupBfd(BaseModel):
    """
    Enables BFD to the next-hops in the group. Local and Remote discriminator parameters have been deprecated at this level. Use Nexthop to set these parameters.
    """

    enabled: Annotated[
        Optional[bool],
        Field(
            description="Defines whether BFD should be enabled towards the nexthops.",
            title="Enabled",
        ),
    ] = False
    localAddress: Annotated[
        Optional[str],
        Field(
            description="Defines the local address to use when establishing the BFD session with the nexthop.",
            title="Local Address",
        ),
    ] = None
    localDiscriminator: Annotated[
        Optional[int],
        Field(
            description="Defines the local discriminator.", title="Local Discriminator"
        ),
    ] = None
    remoteDiscriminator: Annotated[
        Optional[int],
        Field(
            description="Defines the remote discriminator.",
            title="Remote Discriminator",
        ),
    ] = None


class DefaultStaticRouteSpecNexthopGroupNexthop(BaseModel):
    bfd: Annotated[
        Optional[DefaultStaticRouteSpecNexthopGroupNexthopBfd],
        Field(
            description="Enables BFD to the next-hops in the group. This overrides the configuration at the group.",
            title="BFD",
        ),
    ] = None
    ipPrefix: Annotated[str, Field(description="Address to use.", title="IP Prefix")]
    resolve: Annotated[
        Optional[bool],
        Field(
            description="If set to true the next-hops can be destinations which are resolved in the route table. This overrides the configuration at the group.",
            title="Resolve",
        ),
    ] = False


class DefaultStaticRouteSpecNexthopGroupNexthopBfd(BaseModel):
    """
    Enables BFD to the next-hops in the group. This overrides the configuration at the group.
    """

    enabled: Annotated[
        Optional[bool],
        Field(
            description="Defines whether BFD should be enabled towards the nexthops.",
            title="Enabled",
        ),
    ] = False
    localAddress: Annotated[
        Optional[str],
        Field(
            description="Defines the local address to use when establishing the BFD session with the nexthop.",
            title="Local Address",
        ),
    ] = None
    localDiscriminator: Annotated[
        Optional[int],
        Field(
            description="Defines the local discriminator.", title="Local Discriminator"
        ),
    ] = None
    remoteDiscriminator: Annotated[
        Optional[int],
        Field(
            description="Defines the remote discriminator.",
            title="Remote Discriminator",
        ),
    ] = None


class DefaultStaticRouteStatus(BaseModel):
    """
    DefaultStaticRouteStatus defines the observed state of default static route
    """

    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the static routes.",
            title="Health",
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description="The time when the state of the resource last changed.",
            title="Last Change",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Operational state of the static routes.",
            title="Operational State",
        ),
    ] = None


class ErrorIndex(BaseModel):
    index: Optional[int] = None


class ErrorItem(BaseModel):
    error: Optional[Dict[str, Any]] = None
    type: Optional[str] = None


class ErrorResponse(BaseModel):
    """
    Generic error response for REST APIs
    """

    code: Annotated[
        int, Field(description="the numeric HTTP error code for the response.")
    ]
    details: Annotated[
        Optional[str], Field(description="The optional details of the error response.")
    ] = None
    dictionary: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Dictionary/map of associated data/information relevant to the error.\nThe error "message" may contain {{name}} escapes that should be substituted\nwith information from this dictionary.'
        ),
    ] = None
    errors: Annotated[
        Optional[List[ErrorItem]],
        Field(
            description="Collection of errors in cases where more than one exists. This needs to be\nflexible so we can support multiple formats"
        ),
    ] = None
    index: Optional[ErrorIndex] = None
    internal: Annotated[
        Optional[int],
        Field(
            description="Internal error code in cases where we don't have an array of errors"
        ),
    ] = None
    message: Annotated[
        str, Field(description="The basic text error message for the error response.")
    ]
    ref: Annotated[
        Optional[str],
        Field(
            description="Reference to the error source. Should typically be the URI of the request"
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description="URI pointing at a document that describes the error and mitigation steps\nIf there is no document, point to the RFC for the HTTP error code"
        ),
    ] = None


class K8SPatchOp(BaseModel):
    from_: Annotated[Optional[str], Field(alias="from")] = None
    op: str
    path: str
    value: Optional[Dict[str, Any]] = None
    x_permissive: Annotated[Optional[bool], Field(alias="x-permissive")] = None


class Patch(RootModel[List[K8SPatchOp]]):
    root: List[K8SPatchOp]


class Resource(BaseModel):
    kind: Optional[str] = None
    name: Optional[str] = None
    namespaced: Optional[bool] = None
    readOnly: Optional[bool] = None
    singularName: Optional[str] = None
    uiCategory: Optional[str] = None


class ResourceHistory(RootModel[List[ResourceHistoryEntry]]):
    root: List[ResourceHistoryEntry]


class ResourceHistoryEntry(BaseModel):
    author: Optional[str] = None
    changeType: Optional[str] = None
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    message: Optional[str] = None
    transactionId: Optional[int] = None


class ResourceList(BaseModel):
    apiVersion: Optional[str] = None
    groupVersion: Optional[str] = None
    kind: Optional[str] = None
    resources: Optional[List[Resource]] = None


class RouteReflector(BaseModel):
    """
    RouteReflector is the Schema for the routereflectors API
    """

    apiVersion: str
    kind: str
    metadata: RouteReflectorMetadata
    spec: Annotated[
        RouteReflectorSpec,
        Field(
            description="RouteReflector enables the configuration of iBGP sessions with RouteReflectorClients. It includes settings for selecting Interfaces, client selectors for IPv4 and IPv6, and the option to specify a BGP group and cluster ID.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[RouteReflectorStatus],
        Field(
            description="RouteReflectorStatus defines the observed state of RouteReflector",
            title="Status",
        ),
    ] = None


class RouteReflectorClient(BaseModel):
    """
    RouteReflectorClient is the Schema for the routereflectorclients API
    """

    apiVersion: str
    kind: str
    metadata: RouteReflectorClientMetadata
    spec: Annotated[
        RouteReflectorClientSpec,
        Field(
            description="RouteReflectorClient manages the configuration of iBGP sessions between a client and RouteReflectors. This resource allows you to specify the Interface for BGP sessions, set selectors for RouteReflectors, and configure common BGP settings.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[RouteReflectorClientStatus],
        Field(
            description="RouteReflectorClientStatus defines the observed state of RouteReflectorClient",
            title="Status",
        ),
    ] = None


RouteReflectorClientDeletedResourceEntry = AggregateRouteDeletedResourceEntry


class RouteReflectorClientDeletedResources(
    RootModel[List[RouteReflectorClientDeletedResourceEntry]]
):
    root: List[RouteReflectorClientDeletedResourceEntry]


class RouteReflectorClientList(BaseModel):
    """
    RouteReflectorClientList is a list of routereflectorclients
    """

    apiVersion: str
    items: Optional[List[RouteReflectorClient]] = None
    kind: str


RouteReflectorClientMetadata = AggregateRouteMetadata


class RouteReflectorClientSpec(BaseModel):
    """
    RouteReflectorClient manages the configuration of iBGP sessions between a client and RouteReflectors. This resource allows you to specify the Interface for BGP sessions, set selectors for RouteReflectors, and configure common BGP settings.
    """

    asPathOptions: Annotated[
        Optional[RouteReflectorClientSpecAsPathOptions],
        Field(description="AS Path Options", title="AS Path Options"),
    ] = None
    bfd: Annotated[
        Optional[bool],
        Field(
            description="Enable or disable Bi-forward Forwarding Detection (BFD) with fast failover.",
            title="BFD",
        ),
    ] = None
    bgpGroup: Annotated[
        str, Field(description="Reference to BgpGroup.", title="BGP Group")
    ]
    exportPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes advertised to peers.",
            title="Export Policy",
        ),
    ] = None
    grStaleRouteTime: Annotated[
        Optional[int],
        Field(
            description="Enables Graceful Restart on the peer and sets the stale route time.",
            ge=1,
            le=3600,
            title="GR Stale Route Time",
        ),
    ] = None
    importPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes received from peers.",
            title="Import Policy",
        ),
    ] = None
    interface: Annotated[
        str,
        Field(
            description="Reference to a RoutedInterface or IrbInterface resource whose IP will be used as a source IP for the BGP session.",
            title="Interface Reference",
        ),
    ]
    interfaceKind: Annotated[
        Literal["ROUTEDINTERFACE", "IRBINTERFACE"],
        Field(
            description="InterfaceReference type defines whether the provided Reference is a RoutedInterface or IrbInterface.",
            title="Interface Reference Type",
        ),
    ]
    ipv4RouteReflectorSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Label selector used to select the RouteReflectors to which the iBGP sessions are established for IPv4.",
            title="IPv4 Route Reflector Selector",
        ),
    ] = None
    ipv4Unicast: Annotated[
        Optional[RouteReflectorClientSpecIpv4Unicast],
        Field(
            description="Parameters relating to the IPv4 unicast AFI/SAFI.",
            title="IPv4 Unicast",
        ),
    ] = None
    ipv6RouteReflectorSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Label selector used to select the RouteReflectors to which the iBGP sessions are established for IPv6.",
            title="IPv6 Route Reflector Selector",
        ),
    ] = None
    ipv6Unicast: Annotated[
        Optional[RouteReflectorClientSpecIpv6Unicast],
        Field(
            description="Parameters relating to the IPv6 unicast AFI/SAFI.",
            title="IPv6 Unicast",
        ),
    ] = None
    keychain: Annotated[
        Optional[str],
        Field(
            description="Reference to a Keychain resource that will be used for authentication with the BGP peer.",
            title="Keychain",
        ),
    ] = None
    localAS: Annotated[
        Optional[RouteReflectorClientSpecLocalAS],
        Field(
            description="The local autonomous system number advertised to peers.",
            title="Local AS",
        ),
    ] = None
    peerAS: Annotated[
        Optional[RouteReflectorClientSpecPeerAS],
        Field(
            description="The autonomous system number expected from peers.",
            title="Peer AS",
        ),
    ] = None
    routeReflectorIPs: Annotated[
        Optional[List[str]],
        Field(
            description="List of the peering IPs on the RRs to which peering session is established.",
            title="Route Reflector IPs",
        ),
    ] = None
    sendCommunityLarge: Annotated[
        Optional[bool],
        Field(
            description="When false, all large (12 byte) BGP communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Large",
        ),
    ] = None
    sendCommunityStandard: Annotated[
        Optional[bool],
        Field(
            description="When false, all standard (4 byte) communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Standard",
        ),
    ] = None
    sendDefaultRoute: Annotated[
        Optional[RouteReflectorClientSpecSendDefaultRoute],
        Field(
            description="Options for controlling the generation of default routes towards BGP peers.",
            title="Send Default Route",
        ),
    ] = None
    timers: Annotated[
        Optional[RouteReflectorClientSpecTimers],
        Field(description="Timer configurations", title="Timers"),
    ] = None


class RouteReflectorClientSpecAsPathOptions(BaseModel):
    """
    AS Path Options
    """

    allowOwnAS: Annotated[
        int,
        Field(
            description="The maximum number of times the global AS number or a local AS number of the BGP instance can appear in any received AS_PATH before it is considered a loop and considered invalid.",
            ge=0,
            le=255,
            title="Allow Own AS",
        ),
    ]
    removePrivateAS: Annotated[
        Optional[RouteReflectorClientSpecAsPathOptionsRemovePrivateAS],
        Field(
            description="Options for removing private AS numbers (2-byte and 4-byte) from the advertised AS path towards all peers.",
            title="Remove Private AS",
        ),
    ] = None


RouteReflectorClientSpecAsPathOptionsRemovePrivateAS = (
    BGPGroupSpecAsPathOptionsRemovePrivateAS
)


RouteReflectorClientSpecIpv4Unicast = BGPGroupSpecIpv4Unicast


RouteReflectorClientSpecIpv6Unicast = BGPGroupSpecIpv6Unicast


RouteReflectorClientSpecLocalAS = BGPGroupSpecLocalAS


RouteReflectorClientSpecPeerAS = BGPGroupSpecPeerAS


RouteReflectorClientSpecSendDefaultRoute = BGPGroupSpecSendDefaultRoute


RouteReflectorClientSpecTimers = BGPGroupSpecTimers


class RouteReflectorClientState(BaseModel):
    """
    RouteReflectorClientState is the Schema for the routereflectorclientstates API
    """

    apiVersion: str
    kind: str
    metadata: RouteReflectorClientStateMetadata
    spec: Annotated[
        RouteReflectorClientStateSpec,
        Field(
            description="RouteReflectorClientStateSpec defines the desired state of RouteReflectorClientState",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="RouteReflectorClientStateStatus defines the observed state of RouteReflectorClientState",
            title="Status",
        ),
    ] = None


RouteReflectorClientStateDeletedResourceEntry = AggregateRouteDeletedResourceEntry


class RouteReflectorClientStateDeletedResources(
    RootModel[List[RouteReflectorClientStateDeletedResourceEntry]]
):
    root: List[RouteReflectorClientStateDeletedResourceEntry]


class RouteReflectorClientStateList(BaseModel):
    """
    RouteReflectorClientStateList is a list of routereflectorclientstates
    """

    apiVersion: str
    items: Optional[List[RouteReflectorClientState]] = None
    kind: str


RouteReflectorClientStateMetadata = AggregateRouteMetadata


class RouteReflectorClientStateSpec(BaseModel):
    """
    RouteReflectorClientStateSpec defines the desired state of RouteReflectorClientState
    """

    defaultRouteReflectorClient: Annotated[
        Optional[bool],
        Field(
            description="Denotes if the route reflector client is a DefaultRouteReflectorClient or RouteReflectorClient"
        ),
    ] = None
    routeReflectorClientBGPPeers: Annotated[
        Optional[List[str]],
        Field(
            description="A list of BGPPeers configured on the route reflector client to peer with route reflectors"
        ),
    ] = None


class RouteReflectorClientStatus(BaseModel):
    """
    RouteReflectorClientStatus defines the observed state of RouteReflectorClient
    """

    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the RouteReflectorClient.",
            title="Health",
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description="The time when the state of the resource last changed.",
            title="Last Change",
        ),
    ] = None
    numRouteReflectorClientBGPPeers: Annotated[
        Optional[int],
        Field(
            description="Total number of configured route reflector peers on the route reflector client.",
            title="Number of Route Reflector Client BGP Peers",
        ),
    ] = None
    numRouteReflectorClientBGPPeersOperDown: Annotated[
        Optional[int],
        Field(
            description="Total number of configured route reflector peers on the route reflector client that are operationally down.",
            title="Number of Oper Down Route Reflector Client BGP Peers",
        ),
    ] = None
    operDownRouteReflectorClientPeers: Annotated[
        Optional[List[str]],
        Field(
            description="List of route reflector BGPPeers which are operationally down.",
            title="Oper Down Route Reflector Client Peers",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Operational state of the RouteReflectorClient.",
            title="Operational State",
        ),
    ] = None


RouteReflectorDeletedResourceEntry = AggregateRouteDeletedResourceEntry


class RouteReflectorDeletedResources(
    RootModel[List[RouteReflectorDeletedResourceEntry]]
):
    root: List[RouteReflectorDeletedResourceEntry]


class RouteReflectorList(BaseModel):
    """
    RouteReflectorList is a list of routereflectors
    """

    apiVersion: str
    items: Optional[List[RouteReflector]] = None
    kind: str


RouteReflectorMetadata = AggregateRouteMetadata


class RouteReflectorSpec(BaseModel):
    """
    RouteReflector enables the configuration of iBGP sessions with RouteReflectorClients. It includes settings for selecting Interfaces, client selectors for IPv4 and IPv6, and the option to specify a BGP group and cluster ID.
    """

    asPathOptions: Annotated[
        Optional[RouteReflectorSpecAsPathOptions],
        Field(description="AS Path Options", title="AS Path Options"),
    ] = None
    bfd: Annotated[
        Optional[bool],
        Field(
            description="Enable or disable Bi-forward Forwarding Detection (BFD) with fast failover.",
            title="BFD",
        ),
    ] = None
    bgpGroup: Annotated[
        str, Field(description="Reference to BgpGroup", title="BGP Group")
    ]
    clientIPs: Annotated[
        Optional[List[str]],
        Field(
            description="List of RR client IPs to which the iBGP sessions are established.",
            title="Client IPs",
        ),
    ] = None
    clusterID: Annotated[
        str,
        Field(
            description="Sets the cluster ID for route reflectors.", title="Cluster ID"
        ),
    ]
    exportPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes advertised to peers.",
            title="Export Policy",
        ),
    ] = None
    grStaleRouteTime: Annotated[
        Optional[int],
        Field(
            description="Enables Graceful Restart on the peer and sets the stale route time.",
            ge=1,
            le=3600,
            title="GR Stale Route Time",
        ),
    ] = None
    importPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes received from peers.",
            title="Import Policy",
        ),
    ] = None
    interface: Annotated[
        str,
        Field(
            description="Reference to a RoutedInterface or IrbInterface resource whose IP will be used as a source IP for the BGP session.",
            title="Interface Reference",
        ),
    ]
    interfaceKind: Annotated[
        Literal["ROUTEDINTERFACE", "IRBINTERFACE"],
        Field(
            description="InterfaceReference type defines whether the provided Reference is a RoutedInterface or IrbInterface.",
            title="Interface Reference Type",
        ),
    ]
    ipv4ClientSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Label selector used to select the RouteReflectorClients to which the iBGP sessions are established for IPv4.",
            title="IPv4 Client Selector",
        ),
    ] = None
    ipv4Unicast: Annotated[
        Optional[RouteReflectorSpecIpv4Unicast],
        Field(
            description="Parameters relating to the IPv4 unicast AFI/SAFI.",
            title="IPv4 Unicast",
        ),
    ] = None
    ipv6ClientSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Label selector used to select the RouteReflectorClients to which the iBGP sessions are established for IPv6.",
            title="IPv6 Client Selector",
        ),
    ] = None
    ipv6Unicast: Annotated[
        Optional[RouteReflectorSpecIpv6Unicast],
        Field(
            description="Parameters relating to the IPv6 unicast AFI/SAFI.",
            title="IPv6 Unicast",
        ),
    ] = None
    keychain: Annotated[
        Optional[str],
        Field(
            description="Reference to a Keychain resource that will be used for authentication with the BGP peer.",
            title="Keychain",
        ),
    ] = None
    localAS: Annotated[
        Optional[RouteReflectorSpecLocalAS],
        Field(
            description="The local autonomous system number advertised to peers.",
            title="Local AS",
        ),
    ] = None
    peerAS: Annotated[
        Optional[RouteReflectorSpecPeerAS],
        Field(
            description="The autonomous system number expected from peers.",
            title="Peer AS",
        ),
    ] = None
    sendCommunityLarge: Annotated[
        Optional[bool],
        Field(
            description="When false, all large (12 byte) BGP communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Large",
        ),
    ] = None
    sendCommunityStandard: Annotated[
        Optional[bool],
        Field(
            description="When false, all standard (4 byte) communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Standard",
        ),
    ] = None
    sendDefaultRoute: Annotated[
        Optional[RouteReflectorSpecSendDefaultRoute],
        Field(
            description="Options for controlling the generation of default routes towards BGP peers.",
            title="Send Default Route",
        ),
    ] = None
    timers: Annotated[
        Optional[RouteReflectorSpecTimers],
        Field(description="Timer configurations", title="Timers"),
    ] = None


class RouteReflectorSpecAsPathOptions(BaseModel):
    """
    AS Path Options
    """

    allowOwnAS: Annotated[
        int,
        Field(
            description="The maximum number of times the global AS number or a local AS number of the BGP instance can appear in any received AS_PATH before it is considered a loop and considered invalid.",
            ge=0,
            le=255,
            title="Allow Own AS",
        ),
    ]
    removePrivateAS: Annotated[
        Optional[RouteReflectorSpecAsPathOptionsRemovePrivateAS],
        Field(
            description="Options for removing private AS numbers (2-byte and 4-byte) from the advertised AS path towards all peers.",
            title="Remove Private AS",
        ),
    ] = None


RouteReflectorSpecAsPathOptionsRemovePrivateAS = (
    BGPGroupSpecAsPathOptionsRemovePrivateAS
)


RouteReflectorSpecIpv4Unicast = BGPGroupSpecIpv4Unicast


RouteReflectorSpecIpv6Unicast = BGPGroupSpecIpv6Unicast


RouteReflectorSpecLocalAS = BGPGroupSpecLocalAS


RouteReflectorSpecPeerAS = BGPGroupSpecPeerAS


RouteReflectorSpecSendDefaultRoute = BGPGroupSpecSendDefaultRoute


RouteReflectorSpecTimers = BGPGroupSpecTimers


class RouteReflectorState(BaseModel):
    """
    RouteReflectorState is the Schema for the routereflectorstates API
    """

    apiVersion: str
    kind: str
    metadata: RouteReflectorStateMetadata
    spec: Annotated[
        RouteReflectorStateSpec,
        Field(
            description="RouteReflectorStateSpec defines the desired state of RouteReflectorState",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="RouteReflectorStateStatus defines the observed state of RouteReflectorState",
            title="Status",
        ),
    ] = None


RouteReflectorStateDeletedResourceEntry = AggregateRouteDeletedResourceEntry


class RouteReflectorStateDeletedResources(
    RootModel[List[RouteReflectorStateDeletedResourceEntry]]
):
    root: List[RouteReflectorStateDeletedResourceEntry]


class RouteReflectorStateList(BaseModel):
    """
    RouteReflectorStateList is a list of routereflectorstates
    """

    apiVersion: str
    items: Optional[List[RouteReflectorState]] = None
    kind: str


RouteReflectorStateMetadata = AggregateRouteMetadata


class RouteReflectorStateSpec(BaseModel):
    """
    RouteReflectorStateSpec defines the desired state of RouteReflectorState
    """

    defaultRouteReflector: Annotated[
        Optional[bool],
        Field(
            description="Denotes if the route reflector is a DefaultRouteReflector or RouteReflector"
        ),
    ] = None
    routeReflectorBGPPeers: Annotated[
        Optional[List[str]],
        Field(
            description="A list of BGPPeers configured on the route reflector to peer with clients"
        ),
    ] = None


class RouteReflectorStatus(BaseModel):
    """
    RouteReflectorStatus defines the observed state of RouteReflector
    """

    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the RouteReflector.",
            title="Health",
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description="The time when the state of the resource last changed.",
            title="Last Change",
        ),
    ] = None
    numRouteReflectorBGPPeers: Annotated[
        Optional[int],
        Field(
            description="Total number of configured route reflector client peers on the route reflector.",
            title="Number of Route Reflector BGP Peers",
        ),
    ] = None
    numRouteReflectorBGPPeersOperDown: Annotated[
        Optional[int],
        Field(
            description="Total number of configured route reflector client peers on the route reflector that are operationally down.",
            title="Number of Oper Down Route Reflector BGP Peers",
        ),
    ] = None
    operDownRouteReflectorPeers: Annotated[
        Optional[List[str]],
        Field(
            description="List of route reflector BGPPeers which are operationally down.",
            title="Oper Down Route Reflector Peers",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Operational state of the RouteReflector.",
            title="Operational State",
        ),
    ] = None


class StaticRoute(BaseModel):
    """
    StaticRoute is the Schema for the staticroutes API
    """

    apiVersion: str
    kind: str
    metadata: StaticRouteMetadata
    spec: Annotated[
        StaticRouteSpec,
        Field(
            description="StaticRoute allows for the specification of destination prefixes, route preferences, and the associated Router. It also supports configuring nexthop groups and specifying the nodes where the static routes should be provisioned.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[StaticRouteStatus],
        Field(
            description="StaticRouteStatus defines the observed state of Static Route",
            title="Status",
        ),
    ] = None


StaticRouteDeletedResourceEntry = AggregateRouteDeletedResourceEntry


class StaticRouteDeletedResources(RootModel[List[StaticRouteDeletedResourceEntry]]):
    root: List[StaticRouteDeletedResourceEntry]


class StaticRouteList(BaseModel):
    """
    StaticRouteList is a list of staticroutes
    """

    apiVersion: str
    items: Optional[List[StaticRoute]] = None
    kind: str


StaticRouteMetadata = AggregateRouteMetadata


class StaticRouteSpec(BaseModel):
    """
    StaticRoute allows for the specification of destination prefixes, route preferences, and the associated Router. It also supports configuring nexthop groups and specifying the nodes where the static routes should be provisioned.
    """

    nexthopGroup: Annotated[
        StaticRouteSpecNexthopGroup,
        Field(
            description="Group of nexthops for the list of prefixes.",
            title="Nexthop Group",
        ),
    ]
    nodes: Annotated[
        Optional[List[str]],
        Field(
            description="List of nodes on which to configure the static routes. An AND operation is executed against the nodes in this list and the nodes on which the Router is configured to determine the Nodes on which to configure the static routes.",
            title="Nodes",
        ),
    ] = None
    preference: Annotated[
        Optional[int],
        Field(description="Defines the route preference.", title="Preference"),
    ] = None
    prefixes: Annotated[
        List[str],
        Field(
            description="List of destination prefixes and mask to use for the static routes.",
            title="Prefixes",
        ),
    ]
    router: Annotated[
        str,
        Field(
            description="Reference to a Router on which to configure the static routes.  If no Nodes are provided then the static routes will be provisioned on all Nodes on which the Router is provisioned.",
            title="Router",
        ),
    ]


class StaticRouteSpecNexthopGroup(BaseModel):
    """
    Group of nexthops for the list of prefixes.
    """

    bfd: Annotated[
        Optional[StaticRouteSpecNexthopGroupBfd],
        Field(
            description="Enables BFD to the next-hops in the group. Local and Remote discriminator parameters have been deprecated at this level. Use Nexthop to set these parameters.",
            title="BFD",
        ),
    ] = None
    blackhole: Annotated[
        Optional[bool],
        Field(
            description="If set to true all traffic destined to the prefixes will be blackholed.  If enabled, next-hops are ignored and this takes precedence.",
            title="Blackhole",
        ),
    ] = False
    nexthops: Annotated[
        Optional[List[StaticRouteSpecNexthopGroupNexthop]],
        Field(description="Ordered list of nexthops.", title="Nexthops"),
    ] = None
    resolve: Annotated[
        Optional[bool],
        Field(
            description="If set to true the next-hops can be destinations which are resolved in the route table.",
            title="Resolve",
        ),
    ] = False


StaticRouteSpecNexthopGroupBfd = DefaultStaticRouteSpecNexthopGroupBfd


class StaticRouteSpecNexthopGroupNexthop(BaseModel):
    bfd: Annotated[
        Optional[StaticRouteSpecNexthopGroupNexthopBfd],
        Field(
            description="Enables BFD to the next-hops in the group. This overrides the configuration at the group.",
            title="BFD",
        ),
    ] = None
    ipPrefix: Annotated[str, Field(description="Address to use.", title="IP Prefix")]
    resolve: Annotated[
        Optional[bool],
        Field(
            description="If set to true the next-hops can be destinations which are resolved in the route table. This overrides the configuration at the group.",
            title="Resolve",
        ),
    ] = False


StaticRouteSpecNexthopGroupNexthopBfd = DefaultStaticRouteSpecNexthopGroupNexthopBfd


class StaticRouteStatus(BaseModel):
    """
    StaticRouteStatus defines the observed state of Static Route
    """

    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the static routes.",
            title="Health",
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description="The time when the state of the resource last changed.",
            title="Last Change",
        ),
    ] = None
    nodes: Annotated[
        Optional[List[str]],
        Field(
            description="List of Nodes on which the static routes are configured.",
            title="Nodes",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Operational state of the static routes.",
            title="Operational State",
        ),
    ] = None


class Status(BaseModel):
    apiVersion: Optional[str] = None
    details: Optional[StatusDetails] = None
    kind: Optional[str] = None
    string: Optional[str] = None


class StatusDetails(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None


class UIResult(RootModel[str]):
    root: str
