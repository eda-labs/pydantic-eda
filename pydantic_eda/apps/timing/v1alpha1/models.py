# generated by datamodel-codegen:
#   filename:  timing.json

from __future__ import annotations

from typing import Annotated, Any, Dict, List, Literal, Optional

from pydantic import AwareDatetime, BaseModel, Field, RootModel


class AppGroupVersion(BaseModel):
    groupVersion: Optional[str] = None
    version: Optional[str] = None


class ErrorIndex(BaseModel):
    index: Optional[int] = None


class ErrorItem(BaseModel):
    error: Optional[Dict[str, Any]] = None
    type: Optional[str] = None


class ErrorResponse(BaseModel):
    """
    Generic error response for REST APIs
    """

    code: Annotated[
        int, Field(description="the numeric HTTP error code for the response.")
    ]
    details: Annotated[
        Optional[str], Field(description="The optional details of the error response.")
    ] = None
    dictionary: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Dictionary/map of associated data/information relevant to the error.\nThe error "message" may contain {{name}} escapes that should be substituted\nwith information from this dictionary.'
        ),
    ] = None
    domain: Annotated[
        Optional[str],
        Field(
            description='The "domain" for the error.  If empty, it is an EDA\ncore error.  Alternatively it can be an EDA application\n"apiVersion" value (e.g. interfaces.eda.nokia.com/v1alpha1)\nindicating that the error is specific to that application.\nThe domain gives the receiver information that they can use\nto help them interpret the "internal" error code value, or\nto find an internationalization translation for the message.'
        ),
    ] = None
    errors: Annotated[
        Optional[List[ErrorItem]],
        Field(
            description="Collection of errors in cases where more than one exists. This needs to be\nflexible so we can support multiple formats"
        ),
    ] = None
    index: Optional[ErrorIndex] = None
    internal: Annotated[
        Optional[int],
        Field(
            description="Internal error code in cases where we don't have an array of errors"
        ),
    ] = None
    message: Annotated[
        str, Field(description="The basic text error message for the error response.")
    ]
    ref: Annotated[
        Optional[str],
        Field(
            description="Reference to the error source. Should typically be the URI of the request"
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description="URI pointing at a document that describes the error and mitigation steps\nIf there is no document, point to the RFC for the HTTP error code"
        ),
    ] = None


class K8SPatchOp(BaseModel):
    from_: Annotated[Optional[str], Field(alias="from")] = None
    op: str
    path: str
    value: Optional[Dict[str, Any]] = None
    x_permissive: Annotated[Optional[bool], Field(alias="x-permissive")] = None


class Patch(RootModel[List[K8SPatchOp]]):
    root: List[K8SPatchOp]


class Resource(BaseModel):
    kind: Optional[str] = None
    name: Optional[str] = None
    namespaced: Optional[bool] = None
    readOnly: Optional[bool] = None
    singularName: Optional[str] = None
    uiCategory: Optional[str] = None


class ResourceHistoryEntry(BaseModel):
    author: Optional[str] = None
    changeType: Optional[str] = None
    commitTime: Optional[AwareDatetime] = None
    hash: Optional[str] = None
    message: Optional[str] = None
    transactionId: Optional[int] = None


class ResourceList(BaseModel):
    apiVersion: Optional[str] = None
    groupVersion: Optional[str] = None
    kind: Optional[str] = None
    resources: Optional[List[Resource]] = None


class StatusDetails(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None


class TopoAttrMetadata(BaseModel):
    type: Optional[str] = None
    ui_description: Optional[str] = None
    ui_description_key: Optional[str] = None
    ui_name: Optional[str] = None
    ui_name_key: Optional[str] = None


class TopoLinkEndpoint(BaseModel):
    endpoint: Optional[str] = None
    node: Optional[str] = None
    node_key: Optional[str] = None


class TopoNodeGrouping(BaseModel):
    group: Optional[str] = None
    tier: Optional[int] = None


class TopoOverlayEndpointState(BaseModel):
    state: Optional[int] = None


TopoOverlayLinkState = TopoOverlayEndpointState


class TopoOverlayNodeState(BaseModel):
    badges: Optional[List[int]] = None
    state: Optional[int] = None


class TopoSchema(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    version: Optional[str] = None


class UIResult(RootModel[str]):
    root: str


class NTPClientSpecServer(BaseModel):
    iBurst: Annotated[
        Optional[bool],
        Field(
            description="Indicates whether this server should enable burst synchronization or not",
            title="Enable iBurst",
        ),
    ] = None
    preferred: Annotated[
        Optional[bool],
        Field(
            description="Indicates whether this server should be preferred or not",
            title="Preferred Server",
        ),
    ] = None
    server: Annotated[
        str,
        Field(
            description="An NTP server can either be an IP address or an FQDN",
            title="Server",
        ),
    ]


class NTPClientSpec(BaseModel):
    """
    The NTP client allows for configuring NTP servers and the source of NTP traffic in order for the devices to synchronize their clocks.
    """

    router: Annotated[
        Optional[str],
        Field(description="Router used to reach the NTP servers.", title="Router"),
    ] = None
    routerKind: Annotated[
        Literal["MANAGEMENTROUTER", "ROUTER", "DEFAULTROUTER"],
        Field(
            description="the Kind of the router used to reach the NTP servers.",
            title="Router Kind",
        ),
    ]
    routerSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Selects router resources based on the defined KIND.  Applies to DefaultRouter only. Not supported for Router and ManagementRouter.",
            title="Router Selector",
        ),
    ] = None
    servers: Annotated[
        List[NTPClientSpecServer],
        Field(
            description="A list of NTP servers, each entry in the list can either be an IP address or an FQDN.",
            title="Servers",
        ),
    ]
    sourceInterface: Annotated[
        Optional[str],
        Field(
            description="Specifies a Interface resource to use as a source of NTP traffic. If none is specified the Node default behavior is used.",
            title="Source Interface",
        ),
    ] = None
    sourceInterfaceKind: Annotated[
        Optional[Literal["IRB", "ROUTED", "DEFAULT", "SYSTEM"]],
        Field(
            description="Specifies the source interface Kind to use as a source of NTP traffic.",
            title="Source Interface Kind",
        ),
    ] = None


class NTPClientStatusNode(BaseModel):
    node: Annotated[str, Field(description="Reference to Node object", title="Node")]
    operatingSystem: Annotated[
        str, Field(description="Operating System of the Node", title="Operating System")
    ]
    synchronized: Annotated[
        Optional[str],
        Field(description="Synchronized state of the Node", title="Synchronized"),
    ] = None


class NTPClientStatus(BaseModel):
    """
    NTPClientStatus defines the observed state of NTPClient
    """

    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the NTPClient",
            title="Health Score",
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score",
            title="Health Score Reason",
        ),
    ] = None
    lastChange: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The time when the state of the resource last changed",
            title="Last Change",
        ),
    ] = None
    nodes: Annotated[
        Optional[List[NTPClientStatusNode]],
        Field(
            description="List of nodes which are not synchronized",
            title="Unsynchronized Nodes",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Operational state of the NTPClient", title="Operational State"
        ),
    ] = None


class NTPClientDeletedResourceEntry(BaseModel):
    commitTime: Optional[AwareDatetime] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class NTPClientDeletedResources(RootModel[List[NTPClientDeletedResourceEntry]]):
    root: List[NTPClientDeletedResourceEntry]


class NTPClientMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]
    namespace: str


class AppGroup(BaseModel):
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None
    preferredVersion: Optional[AppGroupVersion] = None
    versions: Optional[List[AppGroupVersion]] = None


class ResourceHistory(RootModel[List[ResourceHistoryEntry]]):
    root: List[ResourceHistoryEntry]


class Status(BaseModel):
    apiVersion: Optional[str] = None
    details: Optional[StatusDetails] = None
    kind: Optional[str] = None
    string: Optional[str] = None


class TopoElemMetadata(BaseModel):
    attributes: Optional[Dict[str, TopoAttrMetadata]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    subtitle: Optional[str] = None
    subtitle_key: Optional[str] = None


class TopoOverlayEndpoint(BaseModel):
    attributes: Optional[Dict[str, Dict[str, Any]]] = None
    cr_name: Optional[str] = None
    labels: Optional[Dict[str, str]] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    overlays: Optional[Dict[str, TopoOverlayEndpointState]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    state: Optional[int] = None
    ui_name: Optional[str] = None


class TopoOverlayLink(BaseModel):
    attributes: Optional[Dict[str, Dict[str, Any]]] = None
    cr_name: Optional[str] = None
    endpoint_a: Optional[TopoLinkEndpoint] = None
    endpoint_a_details: Optional[TopoOverlayEndpoint] = None
    endpoint_b: Optional[TopoLinkEndpoint] = None
    endpoint_b_details: Optional[TopoOverlayEndpoint] = None
    key: Optional[str] = None
    labels: Optional[Dict[str, str]] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    overlays: Optional[Dict[str, TopoOverlayLinkState]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    state: Optional[int] = None
    ui_name: Optional[str] = None


class TopoOverlayNode(BaseModel):
    attributes: Optional[Dict[str, Dict[str, Any]]] = None
    badges: Optional[List[int]] = None
    cr_name: Optional[str] = None
    grouping: Optional[TopoNodeGrouping] = None
    key: Optional[str] = None
    labels: Optional[Dict[str, str]] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    overlays: Optional[Dict[str, TopoOverlayNodeState]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    state: Optional[int] = None
    ui_name: Optional[str] = None


class Topology(BaseModel):
    endpoints: Optional[TopoElemMetadata] = None
    group: Optional[str] = None
    grouping: Optional[TopoSchema] = None
    links: Optional[TopoElemMetadata] = None
    name: Optional[str] = None
    nodes: Optional[TopoElemMetadata] = None
    ui_description: Optional[str] = None
    ui_description_key: Optional[str] = None
    ui_name: Optional[str] = None
    ui_name_key: Optional[str] = None
    version: Optional[str] = None


class NTPClient(BaseModel):
    """
    NTPClient is the Schema for the ntpclients API
    """

    apiVersion: Annotated[str, Field(pattern="^timing\\.eda\\.nokia\\.com/v1alpha1$")]
    kind: Annotated[str, Field(pattern="^NTPClient$")]
    metadata: NTPClientMetadata
    spec: Annotated[
        NTPClientSpec,
        Field(
            description="The NTP client allows for configuring NTP servers and the source of NTP traffic in order for the devices to synchronize their clocks.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[NTPClientStatus],
        Field(
            description="NTPClientStatus defines the observed state of NTPClient",
            title="Status",
        ),
    ] = None


class NTPClientList(BaseModel):
    """
    NTPClientList is a list of ntpclients
    """

    apiVersion: str
    items: Optional[List[NTPClient]] = None
    kind: str


class OverlayState(BaseModel):
    links: Optional[Dict[str, TopoOverlayLink]] = None
    nodes: Optional[Dict[str, TopoOverlayNode]] = None


class ResourceTopology(BaseModel):
    topology: Optional[OverlayState] = None
    topologyMetadata: Optional[Topology] = None
