# generated by datamodel-codegen:
#   filename:  components.json

from __future__ import annotations

from datetime import date
from typing import Annotated, Any, Dict, List, Literal, Optional

from pydantic import AwareDatetime, BaseModel, Field, RootModel


class AppGroupVersion(BaseModel):
    groupVersion: Optional[str] = None
    version: Optional[str] = None


class ErrorIndex(BaseModel):
    index: Optional[int] = None


class ErrorItem(BaseModel):
    error: Optional[Dict[str, Any]] = None
    type: Optional[str] = None


class ErrorResponse(BaseModel):
    """
    Generic error response for REST APIs
    """

    code: Annotated[
        int, Field(description="the numeric HTTP error code for the response.")
    ]
    details: Annotated[
        Optional[str], Field(description="The optional details of the error response.")
    ] = None
    dictionary: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Dictionary/map of associated data/information relevant to the error.\nThe error "message" may contain {{name}} escapes that should be substituted\nwith information from this dictionary.'
        ),
    ] = None
    domain: Annotated[
        Optional[str],
        Field(
            description='The "domain" for the error.  If empty, it is an EDA\ncore error.  Alternatively it can be an EDA application\n"apiVersion" value (e.g. interfaces.eda.nokia.com/v1alpha1)\nindicating that the error is specific to that application.\nThe domain gives the receiver information that they can use\nto help them interpret the "internal" error code value, or\nto find an internationalization translation for the message.'
        ),
    ] = None
    errors: Annotated[
        Optional[List[ErrorItem]],
        Field(
            description="Collection of errors in cases where more than one exists. This needs to be\nflexible so we can support multiple formats"
        ),
    ] = None
    index: Optional[ErrorIndex] = None
    internal: Annotated[
        Optional[int],
        Field(
            description="Internal error code in cases where we don't have an array of errors"
        ),
    ] = None
    message: Annotated[
        str, Field(description="The basic text error message for the error response.")
    ]
    ref: Annotated[
        Optional[str],
        Field(
            description="Reference to the error source. Should typically be the URI of the request"
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description="URI pointing at a document that describes the error and mitigation steps\nIf there is no document, point to the RFC for the HTTP error code"
        ),
    ] = None


class K8SPatchOp(BaseModel):
    from_: Annotated[Optional[str], Field(alias="from")] = None
    op: str
    path: str
    value: Optional[Dict[str, Any]] = None
    x_permissive: Annotated[Optional[bool], Field(alias="x-permissive")] = None


class Patch(RootModel[List[K8SPatchOp]]):
    root: List[K8SPatchOp]


class Resource(BaseModel):
    kind: Optional[str] = None
    name: Optional[str] = None
    namespaced: Optional[bool] = None
    readOnly: Optional[bool] = None
    singularName: Optional[str] = None
    uiCategory: Optional[str] = None


class ResourceHistoryEntry(BaseModel):
    author: Optional[str] = None
    changeType: Optional[str] = None
    commitTime: Optional[AwareDatetime] = None
    hash: Optional[str] = None
    message: Optional[str] = None
    transactionId: Optional[int] = None


class ResourceList(BaseModel):
    apiVersion: Optional[str] = None
    groupVersion: Optional[str] = None
    kind: Optional[str] = None
    resources: Optional[List[Resource]] = None


class StatusDetails(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None


class TopoAttrMetadata(BaseModel):
    type: Optional[str] = None
    ui_description: Optional[str] = None
    ui_description_key: Optional[str] = None
    ui_name: Optional[str] = None
    ui_name_key: Optional[str] = None


class TopoLinkEndpoint(BaseModel):
    endpoint: Optional[str] = None
    node: Optional[str] = None
    node_key: Optional[str] = None


class TopoNodeGrouping(BaseModel):
    group: Optional[str] = None
    tier: Optional[int] = None


class TopoOverlayEndpointState(BaseModel):
    state: Optional[int] = None


TopoOverlayLinkState = TopoOverlayEndpointState


class TopoOverlayNodeState(BaseModel):
    badges: Optional[List[int]] = None
    state: Optional[int] = None


class TopoSchema(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    version: Optional[str] = None


class UIResult(RootModel[str]):
    root: str


class ChassisStatusChildrenItem(BaseModel):
    name: Annotated[
        Optional[str], Field(description="Reference to a child component", title="Name")
    ] = None
    type: Annotated[
        Optional[
            Literal[
                "Fan",
                "FanTray",
                "PowerSupply",
                "PowerModule",
                "PowerShelf",
                "InterfaceModule",
                "ControlModule",
                "FabricModule",
                "Chassis",
                "Transceiver",
            ]
        ],
        Field(description="Type of the child component", title="Type"),
    ] = None


class ChassisStatus(BaseModel):
    """
    ChassisStatus defines the observed state of Chassis
    """

    chassisMacAddress: Annotated[
        Optional[str],
        Field(description="MAC Address of the Chassis", title="Chassis MAC Address"),
    ] = None
    children: Annotated[
        Optional[List[ChassisStatusChildrenItem]],
        Field(description="References to children components", title="Children"),
    ] = None
    commonLanguageEquipmentIdentifier: Annotated[
        Optional[str],
        Field(description="The CLEI code of this component", title="CLEI Code"),
    ] = None
    lastBooted: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The date and time this component last booted",
            title="Last Booted",
        ),
    ] = None
    lastChange: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The date and time this component last changed operational state",
            title="Last Change",
        ),
    ] = None
    manufacturedDate: Annotated[
        Optional[date],
        Field(
            description="The date this component was manufactured",
            title="Manufactured Date",
        ),
    ] = None
    operationalState: Annotated[
        Optional[Literal["Up", "Down", "Rebooting", "Unknown", "Starting", "Empty"]],
        Field(
            description="Indicates the current operational state of this component.",
            title="Operational State",
        ),
    ] = None
    partNumber: Annotated[
        Optional[str],
        Field(
            description="The discovered part number of this component",
            title="Part Number",
        ),
    ] = None
    removable: Annotated[
        Optional[bool],
        Field(
            description="Indicates if this component is removable", title="Removable"
        ),
    ] = None
    serialNumber: Annotated[
        Optional[str],
        Field(
            description="The discovered serial number of this component",
            title="Serial Number",
        ),
    ] = None
    target: Annotated[
        Optional[str],
        Field(description="Target this component resides on.", title="Target"),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description="Component type, as provided by the target", title="Type"),
    ] = None


class ChassisMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]
    namespace: str


class ComponentSpec(BaseModel):
    """
    ComponentSpec defines the desired state of Component
    """

    node: Annotated[
        str,
        Field(
            description="TopologyNode this Component resides on.\nIndicates the operation in which to apply the configuration",
            title="Node",
        ),
    ]
    slot: Annotated[
        Optional[str],
        Field(
            description="Slot this Component resides in, unset for Components that do not have a slot or ID.",
            title="Slot",
        ),
    ] = None
    type: Annotated[
        Literal[
            "Fan",
            "FanTray",
            "PowerSupply",
            "PowerModule",
            "PowerShelf",
            "InterfaceModule",
            "ControlModule",
            "FabricModule",
            "Chassis",
            "Transceiver",
        ],
        Field(description="Type of Component.", title="Type"),
    ]


class ComponentStatus(BaseModel):
    """
    ComponentStatus defines the observed state of Component
    """

    enabled: Annotated[
        Optional[bool],
        Field(
            description="The administrative status of this Component.", title="Enabled"
        ),
    ] = None
    lastChange: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The date and time this Component last changed operational state",
            title="Last Change",
        ),
    ] = None
    manufacturedDate: Annotated[
        Optional[date],
        Field(
            description="The date this Component was manufactured",
            title="Manufactured Date",
        ),
    ] = None
    operationalState: Annotated[
        Optional[Literal["Up", "Down", "Rebooting", "Unknown", "Starting", "Empty"]],
        Field(
            description="Indicates the current operational state of this Component.",
            title="Operational State",
        ),
    ] = None
    partNumber: Annotated[
        Optional[str],
        Field(
            description="The discovered part number of this Component",
            title="Part Number",
        ),
    ] = None
    serialNumber: Annotated[
        Optional[str],
        Field(
            description="The discovered serial number of this Component",
            title="Serial Number",
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description="Component type, as provided by the node.", title="Type"),
    ] = None


ComponentMetadata = ChassisMetadata


class ControlModuleStatusTemperature(BaseModel):
    """
    Temperature information for this component
    """

    alarmState: Annotated[
        Optional[bool],
        Field(
            description="The temperature alarm state, as reported by the component",
            title="Alarm State",
        ),
    ] = None
    instant: Annotated[
        Optional[int],
        Field(description="The current temperature of this component", title="Instant"),
    ] = None
    margin: Annotated[
        Optional[int],
        Field(description="The margin temperature of this component", title="Margin"),
    ] = None
    maximum: Annotated[
        Optional[int],
        Field(description="The maximum temperature of this component", title="Maximum"),
    ] = None
    threshold: Annotated[
        Optional[int],
        Field(
            description="The threshold temperature of this component", title="Threshold"
        ),
    ] = None


class ControlModuleStatus(BaseModel):
    """
    ControlModuleStatus defines the observed state of ControlModule
    """

    commonLanguageEquipmentIdentifier: Annotated[
        Optional[str],
        Field(description="The CLEI code of this component", title="CLEI Code"),
    ] = None
    lastBooted: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The date and time this component last booted",
            title="Last Booted",
        ),
    ] = None
    lastChange: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The date and time this component last changed operational state",
            title="Last Change",
        ),
    ] = None
    locatorEnabled: Annotated[
        Optional[bool],
        Field(
            description="Indicates if the locator LED for the component is active",
            title="Locator Enabled",
        ),
    ] = None
    manufacturedDate: Annotated[
        Optional[date],
        Field(
            description="The date this component was manufactured",
            title="Manufactured Date",
        ),
    ] = None
    operationalState: Annotated[
        Optional[Literal["Up", "Down", "Rebooting", "Unknown", "Starting", "Empty"]],
        Field(
            description="Indicates the current operational state of this component.",
            title="Operational State",
        ),
    ] = None
    parent: Annotated[
        Optional[str],
        Field(description="Reference to a parent component", title="Parent"),
    ] = None
    parentType: Annotated[
        Optional[
            Literal[
                "Fan",
                "FanTray",
                "PowerSupply",
                "PowerModule",
                "PowerShelf",
                "InterfaceModule",
                "ControlModule",
                "FabricModule",
                "Chassis",
                "Transceiver",
            ]
        ],
        Field(description="Type of the parent component", title="Parent Type"),
    ] = None
    partNumber: Annotated[
        Optional[str],
        Field(
            description="The discovered part number of this component",
            title="Part Number",
        ),
    ] = None
    removable: Annotated[
        Optional[bool],
        Field(
            description="Indicates if this component is removable", title="Removable"
        ),
    ] = None
    role: Annotated[
        Optional[Literal["Active", "Standby"]],
        Field(description="Role of the control module", title="Role"),
    ] = None
    serialNumber: Annotated[
        Optional[str],
        Field(
            description="The discovered serial number of this component",
            title="Serial Number",
        ),
    ] = None
    slot: Annotated[
        Optional[str],
        Field(
            description="Slot this component resides in, unset for components that do not have a slot or ID",
            title="Slot",
        ),
    ] = None
    softwareVersion: Annotated[
        Optional[str],
        Field(
            description="Version string of the software running on this component",
            title="Software Version",
        ),
    ] = None
    target: Annotated[
        Optional[str],
        Field(description="Target this component resides on.", title="Target"),
    ] = None
    temperature: Annotated[
        Optional[ControlModuleStatusTemperature],
        Field(
            description="Temperature information for this component",
            title="Temperature",
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description="Component type, as provided by the target", title="Type"),
    ] = None


ControlModuleMetadata = ChassisMetadata


FabricModuleStatusTemperature = ControlModuleStatusTemperature


class FabricModuleStatus(BaseModel):
    """
    FabricModuleStatus defines the observed state of FabricModule
    """

    commonLanguageEquipmentIdentifier: Annotated[
        Optional[str],
        Field(description="The CLEI code of this component", title="CLEI Code"),
    ] = None
    lastBooted: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The date and time this component last booted",
            title="Last Booted",
        ),
    ] = None
    lastChange: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The date and time this component last changed operational state",
            title="Last Change",
        ),
    ] = None
    locatorEnabled: Annotated[
        Optional[bool],
        Field(
            description="Indicates if the locator LED for the component is active",
            title="Locator Enabled",
        ),
    ] = None
    manufacturedDate: Annotated[
        Optional[date],
        Field(
            description="The date this component was manufactured",
            title="Manufactured Date",
        ),
    ] = None
    operationalState: Annotated[
        Optional[Literal["Up", "Down", "Rebooting", "Unknown", "Starting", "Empty"]],
        Field(
            description="Indicates the current operational state of this component.",
            title="Operational State",
        ),
    ] = None
    parent: Annotated[
        Optional[str],
        Field(description="Reference to a parent component", title="Parent"),
    ] = None
    parentType: Annotated[
        Optional[
            Literal[
                "Fan",
                "FanTray",
                "PowerSupply",
                "PowerModule",
                "PowerShelf",
                "InterfaceModule",
                "ControlModule",
                "FabricModule",
                "Chassis",
                "Transceiver",
            ]
        ],
        Field(description="Type of the parent component", title="Parent Type"),
    ] = None
    partNumber: Annotated[
        Optional[str],
        Field(
            description="The discovered part number of this component",
            title="Part Number",
        ),
    ] = None
    removable: Annotated[
        Optional[bool],
        Field(
            description="Indicates if this component is removable", title="Removable"
        ),
    ] = None
    serialNumber: Annotated[
        Optional[str],
        Field(
            description="The discovered serial number of this component",
            title="Serial Number",
        ),
    ] = None
    slot: Annotated[
        Optional[str],
        Field(
            description="Slot this component resides in, unset for components that do not have a slot or ID",
            title="Slot",
        ),
    ] = None
    softwareVersion: Annotated[
        Optional[str],
        Field(
            description="Version string of the software running on this component",
            title="Software Version",
        ),
    ] = None
    target: Annotated[
        Optional[str],
        Field(description="Target this component resides on.", title="Target"),
    ] = None
    temperature: Annotated[
        Optional[FabricModuleStatusTemperature],
        Field(
            description="Temperature information for this component",
            title="Temperature",
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description="Component type, as provided by the target", title="Type"),
    ] = None


FabricModuleMetadata = ChassisMetadata


class FanStatus(BaseModel):
    """
    FanStatus defines the observed state of Fan
    """

    commonLanguageEquipmentIdentifier: Annotated[
        Optional[str],
        Field(description="The CLEI code of this component", title="CLEI Code"),
    ] = None
    lastBooted: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The date and time this component last booted",
            title="Last Booted",
        ),
    ] = None
    lastChange: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The date and time this component last changed operational state",
            title="Last Change",
        ),
    ] = None
    locatorEnabled: Annotated[
        Optional[bool],
        Field(
            description="Indicates if the locator LED for the component is active",
            title="Locator Enabled",
        ),
    ] = None
    manufacturedDate: Annotated[
        Optional[date],
        Field(
            description="The date this component was manufactured",
            title="Manufactured Date",
        ),
    ] = None
    operationalState: Annotated[
        Optional[Literal["Up", "Down", "Rebooting", "Unknown", "Starting", "Empty"]],
        Field(
            description="Indicates the current operational state of this component.",
            title="Operational State",
        ),
    ] = None
    parent: Annotated[
        Optional[str],
        Field(description="Reference to a parent component", title="Parent"),
    ] = None
    parentType: Annotated[
        Optional[
            Literal[
                "Fan",
                "FanTray",
                "PowerSupply",
                "PowerModule",
                "PowerShelf",
                "InterfaceModule",
                "ControlModule",
                "FabricModule",
                "Chassis",
                "Transceiver",
            ]
        ],
        Field(description="Type of the parent component", title="Parent Type"),
    ] = None
    partNumber: Annotated[
        Optional[str],
        Field(
            description="The discovered part number of this component",
            title="Part Number",
        ),
    ] = None
    removable: Annotated[
        Optional[bool],
        Field(
            description="Indicates if this component is removable", title="Removable"
        ),
    ] = None
    serialNumber: Annotated[
        Optional[str],
        Field(
            description="The discovered serial number of this component",
            title="Serial Number",
        ),
    ] = None
    slot: Annotated[
        Optional[str],
        Field(
            description="Slot this component resides in, unset for components that do not have a slot or ID",
            title="Slot",
        ),
    ] = None
    target: Annotated[
        Optional[str],
        Field(description="Target this component resides on.", title="Target"),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description="Component type, as provided by the target", title="Type"),
    ] = None


FanMetadata = ChassisMetadata


InterfaceModuleStatusTemperature = ControlModuleStatusTemperature


class InterfaceModuleStatus(BaseModel):
    """
    InterfaceModuleStatus defines the observed state of InterfaceModule
    """

    commonLanguageEquipmentIdentifier: Annotated[
        Optional[str],
        Field(description="The CLEI code of this component", title="CLEI Code"),
    ] = None
    lastBooted: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The date and time this component last booted",
            title="Last Booted",
        ),
    ] = None
    lastChange: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The date and time this component last changed operational state",
            title="Last Change",
        ),
    ] = None
    locatorEnabled: Annotated[
        Optional[bool],
        Field(
            description="Indicates if the locator LED for the component is active",
            title="Locator Enabled",
        ),
    ] = None
    manufacturedDate: Annotated[
        Optional[date],
        Field(
            description="The date this component was manufactured",
            title="Manufactured Date",
        ),
    ] = None
    operationalState: Annotated[
        Optional[Literal["Up", "Down", "Rebooting", "Unknown", "Starting", "Empty"]],
        Field(
            description="Indicates the current operational state of this component.",
            title="Operational State",
        ),
    ] = None
    parent: Annotated[
        Optional[str],
        Field(description="Reference to a parent component", title="Parent"),
    ] = None
    parentType: Annotated[
        Optional[
            Literal[
                "Fan",
                "FanTray",
                "PowerSupply",
                "PowerModule",
                "PowerShelf",
                "InterfaceModule",
                "ControlModule",
                "FabricModule",
                "Chassis",
                "Transceiver",
            ]
        ],
        Field(description="Type of the parent component", title="Parent Type"),
    ] = None
    partNumber: Annotated[
        Optional[str],
        Field(
            description="The discovered part number of this component",
            title="Part Number",
        ),
    ] = None
    removable: Annotated[
        Optional[bool],
        Field(
            description="Indicates if this component is removable", title="Removable"
        ),
    ] = None
    serialNumber: Annotated[
        Optional[str],
        Field(
            description="The discovered serial number of this component",
            title="Serial Number",
        ),
    ] = None
    slot: Annotated[
        Optional[str],
        Field(
            description="Slot this component resides in, unset for components that do not have a slot or ID",
            title="Slot",
        ),
    ] = None
    softwareVersion: Annotated[
        Optional[str],
        Field(
            description="Version string of the software running on this component",
            title="Software Version",
        ),
    ] = None
    target: Annotated[
        Optional[str],
        Field(description="Target this component resides on.", title="Target"),
    ] = None
    temperature: Annotated[
        Optional[InterfaceModuleStatusTemperature],
        Field(
            description="Temperature information for this component",
            title="Temperature",
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description="Component type, as provided by the target", title="Type"),
    ] = None


InterfaceModuleMetadata = ChassisMetadata


class MonitorSpecCpuUtilization(BaseModel):
    """
    Parameters relating to CPU utilization monitoring.
    """

    criticalThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
            ge=1,
            le=100,
            title="Critical Threshold",
        ),
    ] = 95
    fallingDelta: Annotated[
        Optional[int],
        Field(
            description="The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
            ge=1,
            le=25,
            title="Falling Delta",
        ),
    ] = 5
    majorThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
            ge=1,
            le=100,
            title="Major Threshold",
        ),
    ] = 90
    minorThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a minor alarm.",
            ge=1,
            le=100,
            title="Minor Threshold",
        ),
    ] = 80


class MonitorSpecCpu(BaseModel):
    """
    CPU monitoring for targets matching this Monitor.
    """

    enabled: Annotated[
        bool, Field(description="Enable or disable CPU monitoring.", title="Enabled")
    ]
    utilization: Annotated[
        Optional[MonitorSpecCpuUtilization],
        Field(
            description="Parameters relating to CPU utilization monitoring.",
            title="Thresholds",
        ),
    ] = None


class MonitorSpecMemoryUtilization(BaseModel):
    """
    Parameters relating to memory utilization monitoring.
    """

    criticalThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
            ge=1,
            le=100,
            title="Critical Threshold",
        ),
    ] = 95
    fallingDelta: Annotated[
        Optional[int],
        Field(
            description="The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
            ge=1,
            le=25,
            title="Falling Delta",
        ),
    ] = 5
    majorThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
            ge=1,
            le=100,
            title="Major Threshold",
        ),
    ] = 90
    minorThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a minor alarm.",
            ge=1,
            le=100,
            title="Minor Threshold",
        ),
    ] = 80


class MonitorSpecMemory(BaseModel):
    """
    Memory monitoring for targets matching this Monitor.
    """

    enabled: Annotated[
        bool, Field(description="Enable or disable memory monitoring.", title="Enabled")
    ]
    utilization: Annotated[
        Optional[MonitorSpecMemoryUtilization],
        Field(
            description="Parameters relating to memory utilization monitoring.",
            title="Thresholds",
        ),
    ] = None


class MonitorSpecVolumeUtilization(BaseModel):
    """
    Parameters relating to volume utilization monitoring.
    """

    criticalThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
            ge=1,
            le=100,
            title="Critical Threshold",
        ),
    ] = 95
    fallingDelta: Annotated[
        Optional[int],
        Field(
            description="The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
            ge=1,
            le=25,
            title="Falling Delta",
        ),
    ] = 5
    majorThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
            ge=1,
            le=100,
            title="Major Threshold",
        ),
    ] = 90
    minorThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a minor alarm.",
            ge=1,
            le=100,
            title="Minor Threshold",
        ),
    ] = 80


class MonitorSpecVolume(BaseModel):
    """
    Volume monitoring for targets matching this Monitor.
    """

    enabled: Annotated[
        bool, Field(description="Enable or disable volume monitoring.", title="Enabled")
    ]
    utilization: Annotated[
        Optional[MonitorSpecVolumeUtilization],
        Field(
            description="Parameters relating to volume utilization monitoring.",
            title="Thresholds",
        ),
    ] = None


class MonitorSpec(BaseModel):
    """
    MonitorSpec defines the desired state of Monitor
    """

    cpu: Annotated[
        Optional[MonitorSpecCpu],
        Field(
            description="CPU monitoring for targets matching this Monitor.", title="CPU"
        ),
    ] = None
    memory: Annotated[
        Optional[MonitorSpecMemory],
        Field(
            description="Memory monitoring for targets matching this Monitor.",
            title="Memory",
        ),
    ] = None
    targetSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Selector to use when including targets to monitor.",
            title="Target Selector",
        ),
    ] = None
    targets: Annotated[
        Optional[List[str]],
        Field(description="References to targets to monitor.", title="Targets"),
    ] = None
    volume: Annotated[
        Optional[MonitorSpecVolume],
        Field(
            description="Volume monitoring for targets matching this Monitor.",
            title="Volume",
        ),
    ] = None


class MonitorStatus(BaseModel):
    """
    MonitorStatus defines the observed state of Monitor
    """

    targets: Annotated[
        Optional[List[str]],
        Field(description="Targets being monitored.", title="Targets"),
    ] = None


class MonitorDeletedResourceEntry(BaseModel):
    commitTime: Optional[AwareDatetime] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class MonitorDeletedResources(RootModel[List[MonitorDeletedResourceEntry]]):
    root: List[MonitorDeletedResourceEntry]


MonitorMetadata = ChassisMetadata


class PowerSupplySpec(BaseModel):
    """
    PowerSupplySpec defines the desired state of PowerSupply
    """

    foo: Annotated[
        str,
        Field(
            description='INSERT ADDITIONAL SPEC FIELDS - define desired state of cluster\nImportant: Run "edabuilder generate" to regenerate code after modifying this file'
        ),
    ]


PowerSupplyStatusTemperature = ControlModuleStatusTemperature


class PowerSupplyStatus(BaseModel):
    """
    PowerSupplyStatus defines the observed state of PowerSupply
    """

    commonLanguageEquipmentIdentifier: Annotated[
        Optional[str],
        Field(description="The CLEI code of this component", title="CLEI Code"),
    ] = None
    lastBooted: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The date and time this component last booted",
            title="Last Booted",
        ),
    ] = None
    lastChange: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The date and time this component last changed operational state",
            title="Last Change",
        ),
    ] = None
    locatorEnabled: Annotated[
        Optional[bool],
        Field(
            description="Indicates if the locator LED for the component is active",
            title="Locator Enabled",
        ),
    ] = None
    manufacturedDate: Annotated[
        Optional[date],
        Field(
            description="The date this component was manufactured",
            title="Manufactured Date",
        ),
    ] = None
    operationalState: Annotated[
        Optional[Literal["Up", "Down", "Rebooting", "Unknown", "Starting", "Empty"]],
        Field(
            description="Indicates the current operational state of this component.",
            title="Operational State",
        ),
    ] = None
    parent: Annotated[
        Optional[str],
        Field(description="Reference to a parent component", title="Parent"),
    ] = None
    parentType: Annotated[
        Optional[
            Literal[
                "Fan",
                "FanTray",
                "PowerSupply",
                "PowerModule",
                "PowerShelf",
                "InterfaceModule",
                "ControlModule",
                "FabricModule",
                "Chassis",
                "Transceiver",
            ]
        ],
        Field(description="Type of the parent component", title="Parent Type"),
    ] = None
    partNumber: Annotated[
        Optional[str],
        Field(
            description="The discovered part number of this component",
            title="Part Number",
        ),
    ] = None
    removable: Annotated[
        Optional[bool],
        Field(
            description="Indicates if this component is removable", title="Removable"
        ),
    ] = None
    serialNumber: Annotated[
        Optional[str],
        Field(
            description="The discovered serial number of this component",
            title="Serial Number",
        ),
    ] = None
    slot: Annotated[
        Optional[str],
        Field(
            description="Slot this component resides in, unset for components that do not have a slot or ID",
            title="Slot",
        ),
    ] = None
    softwareVersion: Annotated[
        Optional[str],
        Field(
            description="Version string of the software running on this component",
            title="Software Version",
        ),
    ] = None
    target: Annotated[
        Optional[str],
        Field(description="Target this component resides on.", title="Target"),
    ] = None
    temperature: Annotated[
        Optional[PowerSupplyStatusTemperature],
        Field(
            description="Temperature information for this component",
            title="Temperature",
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description="Component type, as provided by the target", title="Type"),
    ] = None


PowerSupplyMetadata = ChassisMetadata


class AppGroup(BaseModel):
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None
    preferredVersion: Optional[AppGroupVersion] = None
    versions: Optional[List[AppGroupVersion]] = None


class ResourceHistory(RootModel[List[ResourceHistoryEntry]]):
    root: List[ResourceHistoryEntry]


class Status(BaseModel):
    apiVersion: Optional[str] = None
    details: Optional[StatusDetails] = None
    kind: Optional[str] = None
    string: Optional[str] = None


class TopoElemMetadata(BaseModel):
    attributes: Optional[Dict[str, TopoAttrMetadata]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    subtitle: Optional[str] = None
    subtitle_key: Optional[str] = None


class TopoOverlayEndpoint(BaseModel):
    attributes: Optional[Dict[str, Dict[str, Any]]] = None
    cr_name: Optional[str] = None
    labels: Optional[Dict[str, str]] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    overlays: Optional[Dict[str, TopoOverlayEndpointState]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    state: Optional[int] = None
    ui_name: Optional[str] = None


class TopoOverlayLink(BaseModel):
    attributes: Optional[Dict[str, Dict[str, Any]]] = None
    cr_name: Optional[str] = None
    endpoint_a: Optional[TopoLinkEndpoint] = None
    endpoint_a_details: Optional[TopoOverlayEndpoint] = None
    endpoint_b: Optional[TopoLinkEndpoint] = None
    endpoint_b_details: Optional[TopoOverlayEndpoint] = None
    key: Optional[str] = None
    labels: Optional[Dict[str, str]] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    overlays: Optional[Dict[str, TopoOverlayLinkState]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    state: Optional[int] = None
    ui_name: Optional[str] = None


class TopoOverlayNode(BaseModel):
    attributes: Optional[Dict[str, Dict[str, Any]]] = None
    badges: Optional[List[int]] = None
    cr_name: Optional[str] = None
    grouping: Optional[TopoNodeGrouping] = None
    key: Optional[str] = None
    labels: Optional[Dict[str, str]] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    overlays: Optional[Dict[str, TopoOverlayNodeState]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    state: Optional[int] = None
    ui_name: Optional[str] = None


class Topology(BaseModel):
    endpoints: Optional[TopoElemMetadata] = None
    group: Optional[str] = None
    grouping: Optional[TopoSchema] = None
    links: Optional[TopoElemMetadata] = None
    name: Optional[str] = None
    nodes: Optional[TopoElemMetadata] = None
    ui_description: Optional[str] = None
    ui_description_key: Optional[str] = None
    ui_name: Optional[str] = None
    ui_name_key: Optional[str] = None
    version: Optional[str] = None


class Chassis(BaseModel):
    """
    Chassis is the Schema for the chassis API
    """

    apiVersion: str
    kind: str
    metadata: ChassisMetadata
    spec: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="ChassisSpec defines the desired state of Chassis",
            title="Specification",
        ),
    ] = None
    status: Annotated[
        Optional[ChassisStatus],
        Field(
            description="ChassisStatus defines the observed state of Chassis",
            title="Status",
        ),
    ] = None


class ChassisList(BaseModel):
    """
    ChassisList is a list of chassis
    """

    apiVersion: str
    items: Optional[List[Chassis]] = None
    kind: str


class Component(BaseModel):
    """
    Component is the Schema for the components API
    """

    apiVersion: str
    kind: str
    metadata: ComponentMetadata
    spec: Annotated[
        ComponentSpec,
        Field(
            description="ComponentSpec defines the desired state of Component",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[ComponentStatus],
        Field(
            description="ComponentStatus defines the observed state of Component",
            title="Status",
        ),
    ] = None


class ComponentList(BaseModel):
    """
    ComponentList is a list of components
    """

    apiVersion: str
    items: Optional[List[Component]] = None
    kind: str


class ControlModule(BaseModel):
    """
    ControlModule is the Schema for the controlmodules API
    """

    apiVersion: str
    kind: str
    metadata: ControlModuleMetadata
    spec: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="ControlModuleSpec defines the desired state of ControlModule",
            title="Specification",
        ),
    ] = None
    status: Annotated[
        Optional[ControlModuleStatus],
        Field(
            description="ControlModuleStatus defines the observed state of ControlModule",
            title="Status",
        ),
    ] = None


class ControlModuleList(BaseModel):
    """
    ControlModuleList is a list of controlmodules
    """

    apiVersion: str
    items: Optional[List[ControlModule]] = None
    kind: str


class FabricModule(BaseModel):
    """
    FabricModule is the Schema for the fabricmodules API
    """

    apiVersion: str
    kind: str
    metadata: FabricModuleMetadata
    spec: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="FabricModuleSpec defines the desired state of FabricModule",
            title="Specification",
        ),
    ] = None
    status: Annotated[
        Optional[FabricModuleStatus],
        Field(
            description="FabricModuleStatus defines the observed state of FabricModule",
            title="Status",
        ),
    ] = None


class FabricModuleList(BaseModel):
    """
    FabricModuleList is a list of fabricmodules
    """

    apiVersion: str
    items: Optional[List[FabricModule]] = None
    kind: str


class Fan(BaseModel):
    """
    Fan is the Schema for the fans API
    """

    apiVersion: str
    kind: str
    metadata: FanMetadata
    spec: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="FanSpec defines the desired state of Fan",
            title="Specification",
        ),
    ] = None
    status: Annotated[
        Optional[FanStatus],
        Field(
            description="FanStatus defines the observed state of Fan", title="Status"
        ),
    ] = None


class FanList(BaseModel):
    """
    FanList is a list of fans
    """

    apiVersion: str
    items: Optional[List[Fan]] = None
    kind: str


class InterfaceModule(BaseModel):
    """
    InterfaceModule is the Schema for the interfacemodules API
    """

    apiVersion: str
    kind: str
    metadata: InterfaceModuleMetadata
    spec: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="InterfaceModuleSpec defines the desired state of InterfaceModule",
            title="Specification",
        ),
    ] = None
    status: Annotated[
        Optional[InterfaceModuleStatus],
        Field(
            description="InterfaceModuleStatus defines the observed state of InterfaceModule",
            title="Status",
        ),
    ] = None


class InterfaceModuleList(BaseModel):
    """
    InterfaceModuleList is a list of interfacemodules
    """

    apiVersion: str
    items: Optional[List[InterfaceModule]] = None
    kind: str


class Monitor(BaseModel):
    """
    Monitor is the Schema for the monitors API
    """

    apiVersion: str
    kind: str
    metadata: MonitorMetadata
    spec: Annotated[
        MonitorSpec,
        Field(
            description="MonitorSpec defines the desired state of Monitor",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[MonitorStatus],
        Field(
            description="MonitorStatus defines the observed state of Monitor",
            title="Status",
        ),
    ] = None


class MonitorList(BaseModel):
    """
    MonitorList is a list of monitors
    """

    apiVersion: str
    items: Optional[List[Monitor]] = None
    kind: str


class PowerSupply(BaseModel):
    """
    PowerSupply is the Schema for the powersupplies API
    """

    apiVersion: str
    kind: str
    metadata: PowerSupplyMetadata
    spec: Annotated[
        PowerSupplySpec,
        Field(
            description="PowerSupplySpec defines the desired state of PowerSupply",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[PowerSupplyStatus],
        Field(
            description="PowerSupplyStatus defines the observed state of PowerSupply",
            title="Status",
        ),
    ] = None


class PowerSupplyList(BaseModel):
    """
    PowerSupplyList is a list of powersupplies
    """

    apiVersion: str
    items: Optional[List[PowerSupply]] = None
    kind: str


class OverlayState(BaseModel):
    links: Optional[Dict[str, TopoOverlayLink]] = None
    nodes: Optional[Dict[str, TopoOverlayNode]] = None


class ResourceTopology(BaseModel):
    topology: Optional[OverlayState] = None
    topologyMetadata: Optional[Topology] = None
