# generated by datamodel-codegen:
#   filename:  filters.json

from __future__ import annotations
from typing import Annotated, Any, Dict, List, Literal, Optional
from pydantic import BaseModel, Field, RootModel


class AppGroupVersion(BaseModel):
    groupVersion: Optional[str] = None
    version: Optional[str] = None


class ErrorIndex(BaseModel):
    index: Optional[int] = None


class ErrorItem(BaseModel):
    error: Optional[Dict[str, Any]] = None
    type: Optional[str] = None


class ErrorResponse(BaseModel):
    """
    Generic error response for REST APIs
    """

    code: Annotated[
        int, Field(description="the numeric HTTP error code for the response.")
    ]
    details: Annotated[
        Optional[str], Field(description="The optional details of the error response.")
    ] = None
    dictionary: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Dictionary/map of associated data/information relevant to the error.\nThe error "message" may contain {{name}} escapes that should be substituted\nwith information from this dictionary.'
        ),
    ] = None
    errors: Annotated[
        Optional[List[ErrorItem]],
        Field(
            description="Collection of errors in cases where more than one exists. This needs to be\nflexible so we can support multiple formats"
        ),
    ] = None
    index: Optional[ErrorIndex] = None
    internal: Annotated[
        Optional[int],
        Field(
            description="Internal error code in cases where we don't have an array of errors"
        ),
    ] = None
    message: Annotated[
        str, Field(description="The basic text error message for the error response.")
    ]
    ref: Annotated[
        Optional[str],
        Field(
            description="Reference to the error source. Should typically be the URI of the request"
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description="URI pointing at a document that describes the error and mitigation steps\nIf there is no document, point to the RFC for the HTTP error code"
        ),
    ] = None


class K8SPatchOp(BaseModel):
    from_: Annotated[Optional[str], Field(alias="from")] = None
    op: str
    path: str
    value: Optional[Dict[str, Any]] = None
    x_permissive: Annotated[Optional[bool], Field(alias="x-permissive")] = None


class Patch(RootModel[List[K8SPatchOp]]):
    root: List[K8SPatchOp]


class Resource(BaseModel):
    kind: Optional[str] = None
    name: Optional[str] = None
    namespaced: Optional[bool] = None
    readOnly: Optional[bool] = None
    singularName: Optional[str] = None
    uiCategory: Optional[str] = None


class ResourceHistoryEntry(BaseModel):
    author: Optional[str] = None
    changeType: Optional[str] = None
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    message: Optional[str] = None
    transactionId: Optional[int] = None


class ResourceList(BaseModel):
    apiVersion: Optional[str] = None
    groupVersion: Optional[str] = None
    kind: Optional[str] = None
    resources: Optional[List[Resource]] = None


class StatusDetails(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None


class UIResult(RootModel[str]):
    root: str


class ControlPlaneFilterSpecEntryIpEntryRateLimit(BaseModel):
    """
    Rate limit to apply when the action is 'RateLimit'.
    """

    burstSize: Annotated[
        Optional[int],
        Field(description="The maximum burst size in bytes.", title="Burst Size"),
    ] = None
    entrySpecificPolicer: Annotated[
        Optional[bool],
        Field(
            description="Controls policer instantiation: false for shared instance, true for per-entry instances",
            title="Entry Specific Policer",
        ),
    ] = False
    peakRate: Annotated[
        Optional[int],
        Field(description="The peak rate in kilobytes per second.", title="Peak Rate"),
    ] = None
    scope: Annotated[
        Optional[Literal["Global", "Subinterface"]],
        Field(
            description="Determines how the policer is applied across subinterfaces. Global applies the policer across all subinterfaces, while Subinterface applies it individually to each subinterface.",
            title="Scope",
        ),
    ] = "Global"


class ControlPlaneFilterSpecEntryIpEntry(BaseModel):
    action: Annotated[
        Optional[Literal["Drop", "Accept", "RateLimit"]],
        Field(
            description="An action to take, either 'Accept','Drop', or 'RateLimit'.",
            title="Action",
        ),
    ] = None
    destinationPortName: Annotated[
        Optional[
            Literal[
                "ACAP",
                "AFP-TCP",
                "ARNS",
                "ASF-RMCP",
                "ASHARE",
                "ATALK-RM",
                "AURP",
                "AUTH",
                "BFD",
                "BFD-ECHO",
                "BFTP",
                "BGMP",
                "BGP",
                "BOOTPC",
                "BOOTPS",
                "CCSO-NS",
                "CHARGEN",
                "CISCO-TDP",
                "CITADEL",
                "CLEARCASE",
                "COMMERCE",
                "COURIER",
                "DAYTIME",
                "DHCP-FAILOVER",
                "DHCPV6-CLIENT",
                "DHCPV6-SERVER",
                "DICOM",
                "DISCARD",
                "DNSIX",
                "DOMAIN",
                "DSP",
                "ECHO",
                "EPP",
                "ESRO",
                "EXEC",
                "FINGER",
                "FTP",
                "FTP-DATA",
                "FTPS",
                "FTPS-DATA",
                "GODI",
                "GOPHER",
                "GTP-C",
                "GTP-PRIME",
                "GTP-U",
                "HA-CLUSTER",
                "HOSTNAME",
                "HP-ALARM-MGR",
                "HTTP",
                "HTTP-ALT",
                "HTTP-MGMT",
                "HTTP-RPC",
                "HTTPS",
                "IEEE-MMS-SSL",
                "IMAP",
                "IMAP3",
                "IMAPS",
                "IPP",
                "IPSEC",
                "IPX",
                "IRC",
                "IRIS-BEEP",
                "ISAKMP",
                "ISAKMP-NAT",
                "ISCSI",
                "ISO-TSAP",
                "KERBEROS",
                "KERBEROS-ADM",
                "KLOGIN",
                "KPASSWD",
                "KSHELL",
                "L2TP",
                "LDAP",
                "LDAPS",
                "LDP",
                "LMP",
                "LOGIN",
                "LPD",
                "LSP-PING",
                "MAC-SERVER-ADM",
                "MATIP-A",
                "MATIP-B",
                "MICRO-BFD",
                "MICROSOFT-DS",
                "MOBILE-IP",
                "MONITOR",
                "MPP",
                "MS-EXCHANGE",
                "MSDP",
                "MSP",
                "MSSQL-M",
                "MSSQL-S",
                "MULTIHOP-BFD",
                "NAS",
                "NCP",
                "NETBIOS-DATA",
                "NETBIOS-NS",
                "NETBIOS-SS",
                "NETNEWS",
                "NETRJS-1",
                "NETRJS-2",
                "NETRJS-3",
                "NETRJS-4",
                "NETWALL",
                "NEW-RWHO",
                "NFS",
                "NNTP",
                "NNTPS",
                "NTP",
                "ODMR",
                "OLSR",
                "OPENVPN",
                "PIM-AUTO-RP",
                "PKIX-TIMESTAMP",
                "POP2",
                "POP3",
                "POP3S",
                "PPTP",
                "PRINT-SRV",
                "PTP-EVENT",
                "PTP-GENERAL",
                "QMTP",
                "QOTD",
                "RADIUS",
                "RADIUS-ACCT",
                "REMOTE-MAIL",
                "REMOTEFS",
                "REMOTECMD",
                "RIP",
                "RJE",
                "RLP",
                "RLZDB",
                "RMC",
                "RMONITOR",
                "RPC2PORTMAP",
                "RSYNC",
                "RTELNET",
                "RTSP",
                "SGMP",
                "SILC",
                "SMUX",
                "SNA-GW",
                "SNMP",
                "SNMP-TRAP",
                "SNPP",
                "SMTP",
                "SQL-SVCS",
                "SQL",
                "SSH",
                "SUBMISSION",
                "SUNRPC",
                "SVCLOC",
                "SYSLOG",
                "SYSTAT",
                "TACACS",
                "TALK",
                "TCPMUX",
                "TCPNETHASPSRV",
                "TFTP",
                "TIME",
                "TIMED",
                "UPS",
                "XDMCP",
                "XNS-CH",
                "XNS-MAIL",
                "XNS-TIME",
                "Z3950",
            ]
        ],
        Field(
            description="Destination port to match by name.",
            title="Destination Port Name",
        ),
    ] = None
    destinationPortNumber: Annotated[
        Optional[int],
        Field(
            description="Destination port to match by numerical value.",
            ge=0,
            le=65535,
            title="Destination Port Number",
        ),
    ] = None
    destinationPortOperator: Annotated[
        Optional[Literal["Equals", "GreaterOrEquals", "LessOrEquals"]],
        Field(
            description="Operator to use when matching destinationPort, either Equals, GreaterOrEquals, or LessOrEquals.",
            title="Destination Port Operator",
        ),
    ] = None
    destinationPortRange: Annotated[
        Optional[str],
        Field(
            description="Range of destination ports to match, in the format n-m, e.g. 100-200,  The start and end of the range must be port numbers.",
            title="Destination Port Range",
        ),
    ] = None
    destinationPrefix: Annotated[
        Optional[str],
        Field(description="Destination prefix to match.", title="Destination Prefix"),
    ] = None
    firstFragment: Annotated[
        Optional[bool],
        Field(description="Match the first fragment only.", title="First Fragment"),
    ] = None
    fragment: Annotated[
        Optional[bool], Field(description="Match any fragment.", title="Fragment")
    ] = None
    icmpCode: Annotated[
        Optional[List[int]],
        Field(
            description="Match a specific ICMP code, as a number between 0-255, e.g. 0.",
            max_length=255,
            min_length=0,
            title="ICMP Code",
        ),
    ] = None
    icmpTypeName: Annotated[
        Optional[
            Literal[
                "DestUnreachable",
                "Echo",
                "EchoReply",
                "EchoRequest",
                "McastRtrAdv",
                "McastRtrSolicit",
                "McastRtrTerm",
                "MldDone",
                "MldQuery",
                "MldReport",
                "MldV2",
                "NeighborAdvertise",
                "NeighborSolicit",
                "NodeInfoQuery",
                "NodeInfoResponse",
                "PacketTooBig",
                "ParamProblem",
                "Redirect",
                "RouterAdvertise",
                "RouterRenumber",
                "RouterSolicit",
                "SourceQuench",
                "TimeExceeded",
                "Timestamp",
                "TimestampReply",
            ]
        ],
        Field(
            description="Match a specific ICMP type by name, e.g. dest-unreachable.",
            title="ICMP Type Name",
        ),
    ] = None
    icmpTypeNumber: Annotated[
        Optional[int],
        Field(
            description="Match a specific ICMP type by number.",
            ge=0,
            le=255,
            title="ICMP Type Number",
        ),
    ] = None
    protocolName: Annotated[
        Optional[
            Literal[
                "AH",
                "EGP",
                "EIGRP",
                "ESP",
                "GGP",
                "GRE",
                "ICMP",
                "ICMP6",
                "IDRP",
                "IGMP",
                "IGP",
                "IPV4",
                "IPV6",
                "IPV6-DEST-OPTS",
                "IPV6-HOP",
                "L2TP",
                "MPLS-IN-IP",
                "NO-NEXT-HDR",
                "OSPF",
                "PIM",
                "ROHC",
                "RSVP",
                "SCTP",
                "ST",
                "TCP",
                "UDP",
                "VRRP",
            ]
        ],
        Field(
            description="Match a specific IP protocol name (specified in the type field of the IP header).",
            title="Protocol Name",
        ),
    ] = None
    protocolNumber: Annotated[
        Optional[int],
        Field(
            description="Match a specific IP protocol number (specified in the type field of the IP header).",
            ge=0,
            le=255,
            title="Protocol Number",
        ),
    ] = None
    rateLimit: Annotated[
        Optional[ControlPlaneFilterSpecEntryIpEntryRateLimit],
        Field(
            description="Rate limit to apply when the action is 'RateLimit'.",
            title="Rate Limit",
        ),
    ] = None
    sourcePortName: Annotated[
        Optional[
            Literal[
                "ACAP",
                "AFP-TCP",
                "ARNS",
                "ASF-RMCP",
                "ASHARE",
                "ATALK-RM",
                "AURP",
                "AUTH",
                "BFD",
                "BFD-ECHO",
                "BFTP",
                "BGMP",
                "BGP",
                "BOOTPC",
                "BOOTPS",
                "CCSO-NS",
                "CHARGEN",
                "CISCO-TDP",
                "CITADEL",
                "CLEARCASE",
                "COMMERCE",
                "COURIER",
                "DAYTIME",
                "DHCP-FAILOVER",
                "DHCPV6-CLIENT",
                "DHCPV6-SERVER",
                "DICOM",
                "DISCARD",
                "DNSIX",
                "DOMAIN",
                "DSP",
                "ECHO",
                "EPP",
                "ESRO",
                "EXEC",
                "FINGER",
                "FTP",
                "FTP-DATA",
                "FTPS",
                "FTPS-DATA",
                "GODI",
                "GOPHER",
                "GTP-C",
                "GTP-PRIME",
                "GTP-U",
                "HA-CLUSTER",
                "HOSTNAME",
                "HP-ALARM-MGR",
                "HTTP",
                "HTTP-ALT",
                "HTTP-MGMT",
                "HTTP-RPC",
                "HTTPS",
                "IEEE-MMS-SSL",
                "IMAP",
                "IMAP3",
                "IMAPS",
                "IPP",
                "IPSEC",
                "IPX",
                "IRC",
                "IRIS-BEEP",
                "ISAKMP",
                "ISAKMP-NAT",
                "ISCSI",
                "ISO-TSAP",
                "KERBEROS",
                "KERBEROS-ADM",
                "KLOGIN",
                "KPASSWD",
                "KSHELL",
                "L2TP",
                "LDAP",
                "LDAPS",
                "LDP",
                "LMP",
                "LOGIN",
                "LPD",
                "LSP-PING",
                "MAC-SERVER-ADM",
                "MATIP-A",
                "MATIP-B",
                "MICRO-BFD",
                "MICROSOFT-DS",
                "MOBILE-IP",
                "MONITOR",
                "MPP",
                "MS-EXCHANGE",
                "MSDP",
                "MSP",
                "MSSQL-M",
                "MSSQL-S",
                "MULTIHOP-BFD",
                "NAS",
                "NCP",
                "NETBIOS-DATA",
                "NETBIOS-NS",
                "NETBIOS-SS",
                "NETNEWS",
                "NETRJS-1",
                "NETRJS-2",
                "NETRJS-3",
                "NETRJS-4",
                "NETWALL",
                "NEW-RWHO",
                "NFS",
                "NNTP",
                "NNTPS",
                "NTP",
                "ODMR",
                "OLSR",
                "OPENVPN",
                "PIM-AUTO-RP",
                "PKIX-TIMESTAMP",
                "POP2",
                "POP3",
                "POP3S",
                "PPTP",
                "PRINT-SRV",
                "PTP-EVENT",
                "PTP-GENERAL",
                "QMTP",
                "QOTD",
                "RADIUS",
                "RADIUS-ACCT",
                "REMOTE-MAIL",
                "REMOTEFS",
                "REMOTECMD",
                "RIP",
                "RJE",
                "RLP",
                "RLZDB",
                "RMC",
                "RMONITOR",
                "RPC2PORTMAP",
                "RSYNC",
                "RTELNET",
                "RTSP",
                "SGMP",
                "SILC",
                "SMUX",
                "SNA-GW",
                "SNMP",
                "SNMP-TRAP",
                "SNPP",
                "SMTP",
                "SQL-SVCS",
                "SQL",
                "SSH",
                "SUBMISSION",
                "SUNRPC",
                "SVCLOC",
                "SYSLOG",
                "SYSTAT",
                "TACACS",
                "TALK",
                "TCPMUX",
                "TCPNETHASPSRV",
                "TFTP",
                "TIME",
                "TIMED",
                "UPS",
                "XDMCP",
                "XNS-CH",
                "XNS-MAIL",
                "XNS-TIME",
                "Z3950",
            ]
        ],
        Field(description="Source port to match by name.", title="Source Port Name"),
    ] = None
    sourcePortNumber: Annotated[
        Optional[int],
        Field(
            description="Source port to match by numerical value.",
            ge=0,
            le=65535,
            title="Source Port Number",
        ),
    ] = None
    sourcePortOperator: Annotated[
        Optional[Literal["Equals", "GreaterOrEquals", "LessOrEquals"]],
        Field(
            description="Operator to use when matching sourcePort, either Equals, GreaterOrEquals, or LessOrEquals.",
            title="Source Port Operator",
        ),
    ] = None
    sourcePortRange: Annotated[
        Optional[str],
        Field(
            description="Range of source ports to match, in the format n-m, e.g. 100-200.  The start and end of the range must be port numbers.",
            title="Source Port Range",
        ),
    ] = None
    sourcePrefix: Annotated[
        Optional[str],
        Field(description="Source prefix to match.", title="Source Prefix"),
    ] = None
    tcpFlags: Annotated[
        Optional[str],
        Field(
            description="Match TCP flags, usable with !, &, | and the flags RST, SYN, and ACK.",
            title="TCP Flags",
        ),
    ] = None


ControlPlaneFilterSpecEntryMacEntryRateLimit = (
    ControlPlaneFilterSpecEntryIpEntryRateLimit
)


class ControlPlaneFilterSpecEntryMacEntry(BaseModel):
    action: Annotated[
        Optional[Literal["Drop", "Accept", "RateLimit"]],
        Field(
            description="An action to take, either 'Accept','Drop', or 'RateLimit'.",
            title="Action",
        ),
    ] = None
    destinationMAC: Annotated[
        Optional[str],
        Field(
            description="Match an Ethernet frame if its destination MAC address logically anded with the mask equals this MAC address.",
            title="Destination MAC",
        ),
    ] = None
    destinationMACMask: Annotated[
        Optional[str],
        Field(
            description="Match an Ethernet frame if its destination MAC address logically anded with the mask equals the configured MAC address.",
            title="Destination MAC Mask",
        ),
    ] = None
    ethertype: Annotated[
        Optional[
            Literal[
                "ARP",
                "AUTHENTICATION8021X",
                "ETHOAM",
                "FCOE",
                "FCOEINITIALIZATION",
                "FLOWCONTROL",
                "IPV4",
                "IPV6",
                "LACP",
                "LLDP",
                "MACSEC",
                "MPLSMULTICAST",
                "MPLSUNICAST",
                "PBB",
                "PPPOEDISCOVERY",
                "PPPOESESSION",
                "PTP",
                "ROCE",
            ]
        ],
        Field(
            description="An Ethernet frame matches this condition if its ethertype value (after 802.1Q VLAN tags) matches the specified value.",
            title="Ethertype",
        ),
    ] = None
    outerVLANIDOperator: Annotated[
        Optional[Literal["Equals", "GreaterOrEquals", "LessOrEquals"]],
        Field(
            description="Operator to use when matching OuterVlanIdValue, either Equals, GreaterOrEquals, or LessOrEquals.",
            title="Outer VLAN ID Operator",
        ),
    ] = None
    outerVLANIDRange: Annotated[
        Optional[str],
        Field(
            description="Range of Outer vlan IDs to match, in the format n-m, e.g. 100-200",
            title="Outer VLAN ID Range",
        ),
    ] = None
    outerVLANIDValue: Annotated[
        Optional[str],
        Field(
            description="Ethernet frame matching criteria based on the outermost VLAN ID found before the subinterface-defining VLAN tag (if any) is removed. A value of 'none' will match only untagged frames.",
            title="Outer VLAN ID Value",
        ),
    ] = None
    rateLimit: Annotated[
        Optional[ControlPlaneFilterSpecEntryMacEntryRateLimit],
        Field(
            description="Rate limit to apply when the action is 'RateLimit'.",
            title="Rate Limit",
        ),
    ] = None
    sourceMAC: Annotated[
        Optional[str],
        Field(
            description="Match an Ethernet frame if its source MAC address logically anded with the mask equals this MAC address.",
            title="Source MAC",
        ),
    ] = None
    sourceMACMask: Annotated[
        Optional[str],
        Field(
            description="Match an Ethernet frame if its source MAC address logically anded with the mask equals the configured MAC address.",
            title="Source MAC Mask",
        ),
    ] = None


class ControlPlaneFilterSpecEntry(BaseModel):
    ipEntry: Annotated[
        Optional[ControlPlaneFilterSpecEntryIpEntry], Field(title="IP Entry")
    ] = None
    macEntry: Annotated[
        Optional[ControlPlaneFilterSpecEntryMacEntry], Field(title="MAC Entry")
    ] = None
    type: Annotated[Literal["IPV4", "IPV6", "MAC", "Auto"], Field(title="Type")]


class ControlPlaneFilterSpec(BaseModel):
    """
    ControlPlaneFilter allows for specifying a list of Nodes or Node selectors where the filter should be applied and managing filter entries in order.
    """

    entries: Annotated[
        List[ControlPlaneFilterSpecEntry],
        Field(
            description="Specifies the list of filter entries, in order.",
            title="Entries",
        ),
    ]
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Label selector used to select Toponodes on which to deploy the CPM filter.",
            title="Node Selector",
        ),
    ] = None
    nodes: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a list of TopoNodes on which to deploy the CPM filter.",
            title="Nodes",
        ),
    ] = None


class ControlPlaneFilterDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class ControlPlaneFilterDeletedResources(
    RootModel[List[ControlPlaneFilterDeletedResourceEntry]]
):
    root: List[ControlPlaneFilterDeletedResourceEntry]


class ControlPlaneFilterMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]
    namespace: str


FilterSpecEntryIpEntryRateLimit = ControlPlaneFilterSpecEntryIpEntryRateLimit


class FilterSpecEntryIpEntry(BaseModel):
    action: Annotated[
        Optional[Literal["Drop", "Accept", "RateLimit"]],
        Field(
            description="An action to take, either 'Accept','Drop', or 'RateLimit'.",
            title="Action",
        ),
    ] = None
    destinationPortName: Annotated[
        Optional[
            Literal[
                "ACAP",
                "AFP-TCP",
                "ARNS",
                "ASF-RMCP",
                "ASHARE",
                "ATALK-RM",
                "AURP",
                "AUTH",
                "BFD",
                "BFD-ECHO",
                "BFTP",
                "BGMP",
                "BGP",
                "BOOTPC",
                "BOOTPS",
                "CCSO-NS",
                "CHARGEN",
                "CISCO-TDP",
                "CITADEL",
                "CLEARCASE",
                "COMMERCE",
                "COURIER",
                "DAYTIME",
                "DHCP-FAILOVER",
                "DHCPV6-CLIENT",
                "DHCPV6-SERVER",
                "DICOM",
                "DISCARD",
                "DNSIX",
                "DOMAIN",
                "DSP",
                "ECHO",
                "EPP",
                "ESRO",
                "EXEC",
                "FINGER",
                "FTP",
                "FTP-DATA",
                "FTPS",
                "FTPS-DATA",
                "GODI",
                "GOPHER",
                "GTP-C",
                "GTP-PRIME",
                "GTP-U",
                "HA-CLUSTER",
                "HOSTNAME",
                "HP-ALARM-MGR",
                "HTTP",
                "HTTP-ALT",
                "HTTP-MGMT",
                "HTTP-RPC",
                "HTTPS",
                "IEEE-MMS-SSL",
                "IMAP",
                "IMAP3",
                "IMAPS",
                "IPP",
                "IPSEC",
                "IPX",
                "IRC",
                "IRIS-BEEP",
                "ISAKMP",
                "ISAKMP-NAT",
                "ISCSI",
                "ISO-TSAP",
                "KERBEROS",
                "KERBEROS-ADM",
                "KLOGIN",
                "KPASSWD",
                "KSHELL",
                "L2TP",
                "LDAP",
                "LDAPS",
                "LDP",
                "LMP",
                "LOGIN",
                "LPD",
                "LSP-PING",
                "MAC-SERVER-ADM",
                "MATIP-A",
                "MATIP-B",
                "MICRO-BFD",
                "MICROSOFT-DS",
                "MOBILE-IP",
                "MONITOR",
                "MPP",
                "MS-EXCHANGE",
                "MSDP",
                "MSP",
                "MSSQL-M",
                "MSSQL-S",
                "MULTIHOP-BFD",
                "NAS",
                "NCP",
                "NETBIOS-DATA",
                "NETBIOS-NS",
                "NETBIOS-SS",
                "NETNEWS",
                "NETRJS-1",
                "NETRJS-2",
                "NETRJS-3",
                "NETRJS-4",
                "NETWALL",
                "NEW-RWHO",
                "NFS",
                "NNTP",
                "NNTPS",
                "NTP",
                "ODMR",
                "OLSR",
                "OPENVPN",
                "PIM-AUTO-RP",
                "PKIX-TIMESTAMP",
                "POP2",
                "POP3",
                "POP3S",
                "PPTP",
                "PRINT-SRV",
                "PTP-EVENT",
                "PTP-GENERAL",
                "QMTP",
                "QOTD",
                "RADIUS",
                "RADIUS-ACCT",
                "REMOTE-MAIL",
                "REMOTEFS",
                "REMOTECMD",
                "RIP",
                "RJE",
                "RLP",
                "RLZDB",
                "RMC",
                "RMONITOR",
                "RPC2PORTMAP",
                "RSYNC",
                "RTELNET",
                "RTSP",
                "SGMP",
                "SILC",
                "SMUX",
                "SNA-GW",
                "SNMP",
                "SNMP-TRAP",
                "SNPP",
                "SMTP",
                "SQL-SVCS",
                "SQL",
                "SSH",
                "SUBMISSION",
                "SUNRPC",
                "SVCLOC",
                "SYSLOG",
                "SYSTAT",
                "TACACS",
                "TALK",
                "TCPMUX",
                "TCPNETHASPSRV",
                "TFTP",
                "TIME",
                "TIMED",
                "UPS",
                "XDMCP",
                "XNS-CH",
                "XNS-MAIL",
                "XNS-TIME",
                "Z3950",
            ]
        ],
        Field(
            description="Destination port to match by name.",
            title="Destination Port Name",
        ),
    ] = None
    destinationPortNumber: Annotated[
        Optional[int],
        Field(
            description="Destination port to match by numerical value.",
            ge=0,
            le=65535,
            title="Destination Port Number",
        ),
    ] = None
    destinationPortOperator: Annotated[
        Optional[Literal["Equals", "GreaterOrEquals", "LessOrEquals"]],
        Field(
            description="Operator to use when matching destinationPort, either Equals, GreaterOrEquals, or LessOrEquals.",
            title="Destination Port Operator",
        ),
    ] = None
    destinationPortRange: Annotated[
        Optional[str],
        Field(
            description="Range of destination ports to match, in the format n-m, e.g. 100-200,  The start and end of the range must be port numbers.",
            title="Destination Port Range",
        ),
    ] = None
    destinationPrefix: Annotated[
        Optional[str],
        Field(description="Destination prefix to match.", title="Destination Prefix"),
    ] = None
    firstFragment: Annotated[
        Optional[bool],
        Field(description="Match the first fragment only.", title="First Fragment"),
    ] = None
    fragment: Annotated[
        Optional[bool], Field(description="Match any fragment.", title="Fragment")
    ] = None
    icmpCode: Annotated[
        Optional[List[int]],
        Field(
            description="Match a specific ICMP code, as a number between 0-255, e.g. 0.",
            max_length=255,
            min_length=0,
            title="ICMP Code",
        ),
    ] = None
    icmpTypeName: Annotated[
        Optional[
            Literal[
                "DestUnreachable",
                "Echo",
                "EchoReply",
                "EchoRequest",
                "McastRtrAdv",
                "McastRtrSolicit",
                "McastRtrTerm",
                "MldDone",
                "MldQuery",
                "MldReport",
                "MldV2",
                "NeighborAdvertise",
                "NeighborSolicit",
                "NodeInfoQuery",
                "NodeInfoResponse",
                "PacketTooBig",
                "ParamProblem",
                "Redirect",
                "RouterAdvertise",
                "RouterRenumber",
                "RouterSolicit",
                "SourceQuench",
                "TimeExceeded",
                "Timestamp",
                "TimestampReply",
            ]
        ],
        Field(
            description="Match a specific ICMP type by name, e.g. dest-unreachable.",
            title="ICMP Type Name",
        ),
    ] = None
    icmpTypeNumber: Annotated[
        Optional[int],
        Field(
            description="Match a specific ICMP type by number.",
            ge=0,
            le=255,
            title="ICMP Type Number",
        ),
    ] = None
    protocolName: Annotated[
        Optional[
            Literal[
                "AH",
                "EGP",
                "EIGRP",
                "ESP",
                "GGP",
                "GRE",
                "ICMP",
                "ICMP6",
                "IDRP",
                "IGMP",
                "IGP",
                "IPV4",
                "IPV6",
                "IPV6-DEST-OPTS",
                "IPV6-HOP",
                "L2TP",
                "MPLS-IN-IP",
                "NO-NEXT-HDR",
                "OSPF",
                "PIM",
                "ROHC",
                "RSVP",
                "SCTP",
                "ST",
                "TCP",
                "UDP",
                "VRRP",
            ]
        ],
        Field(
            description="Match a specific IP protocol name (specified in the type field of the IP header).",
            title="Protocol Name",
        ),
    ] = None
    protocolNumber: Annotated[
        Optional[int],
        Field(
            description="Match a specific IP protocol number (specified in the type field of the IP header).",
            ge=0,
            le=255,
            title="Protocol Number",
        ),
    ] = None
    rateLimit: Annotated[
        Optional[FilterSpecEntryIpEntryRateLimit],
        Field(
            description="Rate limit to apply when the action is 'RateLimit'.",
            title="Rate Limit",
        ),
    ] = None
    sourcePortName: Annotated[
        Optional[
            Literal[
                "ACAP",
                "AFP-TCP",
                "ARNS",
                "ASF-RMCP",
                "ASHARE",
                "ATALK-RM",
                "AURP",
                "AUTH",
                "BFD",
                "BFD-ECHO",
                "BFTP",
                "BGMP",
                "BGP",
                "BOOTPC",
                "BOOTPS",
                "CCSO-NS",
                "CHARGEN",
                "CISCO-TDP",
                "CITADEL",
                "CLEARCASE",
                "COMMERCE",
                "COURIER",
                "DAYTIME",
                "DHCP-FAILOVER",
                "DHCPV6-CLIENT",
                "DHCPV6-SERVER",
                "DICOM",
                "DISCARD",
                "DNSIX",
                "DOMAIN",
                "DSP",
                "ECHO",
                "EPP",
                "ESRO",
                "EXEC",
                "FINGER",
                "FTP",
                "FTP-DATA",
                "FTPS",
                "FTPS-DATA",
                "GODI",
                "GOPHER",
                "GTP-C",
                "GTP-PRIME",
                "GTP-U",
                "HA-CLUSTER",
                "HOSTNAME",
                "HP-ALARM-MGR",
                "HTTP",
                "HTTP-ALT",
                "HTTP-MGMT",
                "HTTP-RPC",
                "HTTPS",
                "IEEE-MMS-SSL",
                "IMAP",
                "IMAP3",
                "IMAPS",
                "IPP",
                "IPSEC",
                "IPX",
                "IRC",
                "IRIS-BEEP",
                "ISAKMP",
                "ISAKMP-NAT",
                "ISCSI",
                "ISO-TSAP",
                "KERBEROS",
                "KERBEROS-ADM",
                "KLOGIN",
                "KPASSWD",
                "KSHELL",
                "L2TP",
                "LDAP",
                "LDAPS",
                "LDP",
                "LMP",
                "LOGIN",
                "LPD",
                "LSP-PING",
                "MAC-SERVER-ADM",
                "MATIP-A",
                "MATIP-B",
                "MICRO-BFD",
                "MICROSOFT-DS",
                "MOBILE-IP",
                "MONITOR",
                "MPP",
                "MS-EXCHANGE",
                "MSDP",
                "MSP",
                "MSSQL-M",
                "MSSQL-S",
                "MULTIHOP-BFD",
                "NAS",
                "NCP",
                "NETBIOS-DATA",
                "NETBIOS-NS",
                "NETBIOS-SS",
                "NETNEWS",
                "NETRJS-1",
                "NETRJS-2",
                "NETRJS-3",
                "NETRJS-4",
                "NETWALL",
                "NEW-RWHO",
                "NFS",
                "NNTP",
                "NNTPS",
                "NTP",
                "ODMR",
                "OLSR",
                "OPENVPN",
                "PIM-AUTO-RP",
                "PKIX-TIMESTAMP",
                "POP2",
                "POP3",
                "POP3S",
                "PPTP",
                "PRINT-SRV",
                "PTP-EVENT",
                "PTP-GENERAL",
                "QMTP",
                "QOTD",
                "RADIUS",
                "RADIUS-ACCT",
                "REMOTE-MAIL",
                "REMOTEFS",
                "REMOTECMD",
                "RIP",
                "RJE",
                "RLP",
                "RLZDB",
                "RMC",
                "RMONITOR",
                "RPC2PORTMAP",
                "RSYNC",
                "RTELNET",
                "RTSP",
                "SGMP",
                "SILC",
                "SMUX",
                "SNA-GW",
                "SNMP",
                "SNMP-TRAP",
                "SNPP",
                "SMTP",
                "SQL-SVCS",
                "SQL",
                "SSH",
                "SUBMISSION",
                "SUNRPC",
                "SVCLOC",
                "SYSLOG",
                "SYSTAT",
                "TACACS",
                "TALK",
                "TCPMUX",
                "TCPNETHASPSRV",
                "TFTP",
                "TIME",
                "TIMED",
                "UPS",
                "XDMCP",
                "XNS-CH",
                "XNS-MAIL",
                "XNS-TIME",
                "Z3950",
            ]
        ],
        Field(description="Source port to match by name.", title="Source Port Name"),
    ] = None
    sourcePortNumber: Annotated[
        Optional[int],
        Field(
            description="Source port to match by numerical value.",
            ge=0,
            le=65535,
            title="Source Port Number",
        ),
    ] = None
    sourcePortOperator: Annotated[
        Optional[Literal["Equals", "GreaterOrEquals", "LessOrEquals"]],
        Field(
            description="Operator to use when matching sourcePort, either Equals, GreaterOrEquals, or LessOrEquals.",
            title="Source Port Operator",
        ),
    ] = None
    sourcePortRange: Annotated[
        Optional[str],
        Field(
            description="Range of source ports to match, in the format n-m, e.g. 100-200.  The start and end of the range must be port numbers.",
            title="Source Port Range",
        ),
    ] = None
    sourcePrefix: Annotated[
        Optional[str],
        Field(description="Source prefix to match.", title="Source Prefix"),
    ] = None
    tcpFlags: Annotated[
        Optional[str],
        Field(
            description="Match TCP flags, usable with !, &, | and the flags RST, SYN, and ACK.",
            title="TCP Flags",
        ),
    ] = None


FilterSpecEntryMacEntryRateLimit = ControlPlaneFilterSpecEntryIpEntryRateLimit


class FilterSpecEntryMacEntry(BaseModel):
    action: Annotated[
        Optional[Literal["Drop", "Accept", "RateLimit"]],
        Field(
            description="An action to take, either 'Accept','Drop', or 'RateLimit'.",
            title="Action",
        ),
    ] = None
    destinationMAC: Annotated[
        Optional[str],
        Field(
            description="Match an Ethernet frame if its destination MAC address logically anded with the mask equals this MAC address.",
            title="Destination MAC",
        ),
    ] = None
    destinationMACMask: Annotated[
        Optional[str],
        Field(
            description="Match an Ethernet frame if its destination MAC address logically anded with the mask equals the configured MAC address.",
            title="Destination MAC Mask",
        ),
    ] = None
    ethertype: Annotated[
        Optional[
            Literal[
                "ARP",
                "AUTHENTICATION8021X",
                "ETHOAM",
                "FCOE",
                "FCOEINITIALIZATION",
                "FLOWCONTROL",
                "IPV4",
                "IPV6",
                "LACP",
                "LLDP",
                "MACSEC",
                "MPLSMULTICAST",
                "MPLSUNICAST",
                "PBB",
                "PPPOEDISCOVERY",
                "PPPOESESSION",
                "PTP",
                "ROCE",
            ]
        ],
        Field(
            description="An Ethernet frame matches this condition if its ethertype value (after 802.1Q VLAN tags) matches the specified value.",
            title="Ethertype",
        ),
    ] = None
    outerVLANIDOperator: Annotated[
        Optional[Literal["Equals", "GreaterOrEquals", "LessOrEquals"]],
        Field(
            description="Operator to use when matching OuterVlanIdValue, either Equals, GreaterOrEquals, or LessOrEquals.",
            title="Outer VLAN ID Operator",
        ),
    ] = None
    outerVLANIDRange: Annotated[
        Optional[str],
        Field(
            description="Range of Outer vlan IDs to match, in the format n-m, e.g. 100-200",
            title="Outer VLAN ID Range",
        ),
    ] = None
    outerVLANIDValue: Annotated[
        Optional[str],
        Field(
            description="Ethernet frame matching criteria based on the outermost VLAN ID found before the subinterface-defining VLAN tag (if any) is removed. A value of 'none' will match only untagged frames.",
            title="Outer VLAN ID Value",
        ),
    ] = None
    rateLimit: Annotated[
        Optional[FilterSpecEntryMacEntryRateLimit],
        Field(
            description="Rate limit to apply when the action is 'RateLimit'.",
            title="Rate Limit",
        ),
    ] = None
    sourceMAC: Annotated[
        Optional[str],
        Field(
            description="Match an Ethernet frame if its source MAC address logically anded with the mask equals this MAC address.",
            title="Source MAC",
        ),
    ] = None
    sourceMACMask: Annotated[
        Optional[str],
        Field(
            description="Match an Ethernet frame if its source MAC address logically anded with the mask equals the configured MAC address.",
            title="Source MAC Mask",
        ),
    ] = None


class FilterSpecEntry(BaseModel):
    ipEntry: Annotated[Optional[FilterSpecEntryIpEntry], Field(title="IP Entry")] = None
    macEntry: Annotated[Optional[FilterSpecEntryMacEntry], Field(title="MAC Entry")] = (
        None
    )
    type: Annotated[Literal["IPV4", "IPV6", "MAC", "Auto"], Field(title="Type")]


class FilterSpec(BaseModel):
    """
    Filter allows for the creation and management of ordered filtering rules based on IP or MAC criteria. The resource supports various conditions and actions, enabling fine-grained control over network traffic by specifying rules for source and destination addresses, ports, and protocols.
    """

    entries: Annotated[
        List[FilterSpecEntry],
        Field(
            description="Specifies the list of filter entries, in order.",
            title="Entries",
        ),
    ]


FilterDeletedResourceEntry = ControlPlaneFilterDeletedResourceEntry


class FilterDeletedResources(RootModel[List[FilterDeletedResourceEntry]]):
    root: List[FilterDeletedResourceEntry]


FilterMetadata = ControlPlaneFilterMetadata


class AppGroup(BaseModel):
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None
    preferredVersion: Optional[AppGroupVersion] = None
    versions: Optional[List[AppGroupVersion]] = None


class ResourceHistory(RootModel[List[ResourceHistoryEntry]]):
    root: List[ResourceHistoryEntry]


class Status(BaseModel):
    apiVersion: Optional[str] = None
    details: Optional[StatusDetails] = None
    kind: Optional[str] = None
    string: Optional[str] = None


class ControlPlaneFilter(BaseModel):
    """
    ControlPlaneFilter is the Schema for the controlplanefilters API
    """

    apiVersion: str
    kind: str
    metadata: ControlPlaneFilterMetadata
    spec: Annotated[
        ControlPlaneFilterSpec,
        Field(
            description="ControlPlaneFilter allows for specifying a list of Nodes or Node selectors where the filter should be applied and managing filter entries in order.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="ControlPlaneFilterStatus defines the observed state of ControlPlaneFilter",
            title="Status",
        ),
    ] = None


class ControlPlaneFilterList(BaseModel):
    """
    ControlPlaneFilterList is a list of controlplanefilters
    """

    apiVersion: str
    items: Optional[List[ControlPlaneFilter]] = None
    kind: str


class Filter(BaseModel):
    """
    Filter is the Schema for the filters API
    """

    apiVersion: str
    kind: str
    metadata: FilterMetadata
    spec: Annotated[
        FilterSpec,
        Field(
            description="Filter allows for the creation and management of ordered filtering rules based on IP or MAC criteria. The resource supports various conditions and actions, enabling fine-grained control over network traffic by specifying rules for source and destination addresses, ports, and protocols.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="FilterStatus defines the observed state of Filter",
            title="Status",
        ),
    ] = None


class FilterList(BaseModel):
    """
    FilterList is a list of filters
    """

    apiVersion: str
    items: Optional[List[Filter]] = None
    kind: str
