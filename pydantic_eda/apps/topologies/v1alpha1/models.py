# generated by datamodel-codegen:
#   filename:  topologies.json

from __future__ import annotations

from typing import Annotated, Any, Dict, List, Optional

from pydantic import AwareDatetime, BaseModel, Field, RootModel


class AppGroupVersion(BaseModel):
    groupVersion: Optional[str] = None
    version: Optional[str] = None


class ErrorIndex(BaseModel):
    index: Optional[int] = None


class ErrorItem(BaseModel):
    error: Optional[Dict[str, Any]] = None
    type: Optional[str] = None


class ErrorResponse(BaseModel):
    """
    Generic error response for REST APIs
    """

    code: Annotated[
        int, Field(description="the numeric HTTP error code for the response.")
    ]
    details: Annotated[
        Optional[str], Field(description="The optional details of the error response.")
    ] = None
    dictionary: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Dictionary/map of associated data/information relevant to the error.\nThe error "message" may contain {{name}} escapes that should be substituted\nwith information from this dictionary.'
        ),
    ] = None
    domain: Annotated[
        Optional[str],
        Field(
            description='The "domain" for the error.  If empty, it is an EDA\ncore error.  Alternatively it can be an EDA application\n"apiVersion" value (e.g. interfaces.eda.nokia.com/v1alpha1)\nindicating that the error is specific to that application.\nThe domain gives the receiver information that they can use\nto help them interpret the "internal" error code value, or\nto find an internationalization translation for the message.'
        ),
    ] = None
    errors: Annotated[
        Optional[List[ErrorItem]],
        Field(
            description="Collection of errors in cases where more than one exists. This needs to be\nflexible so we can support multiple formats"
        ),
    ] = None
    index: Optional[ErrorIndex] = None
    internal: Annotated[
        Optional[int],
        Field(
            description="Internal error code in cases where we don't have an array of errors"
        ),
    ] = None
    message: Annotated[
        str, Field(description="The basic text error message for the error response.")
    ]
    ref: Annotated[
        Optional[str],
        Field(
            description="Reference to the error source. Should typically be the URI of the request"
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description="URI pointing at a document that describes the error and mitigation steps\nIf there is no document, point to the RFC for the HTTP error code"
        ),
    ] = None


class K8SPatchOp(BaseModel):
    from_: Annotated[Optional[str], Field(alias="from")] = None
    op: str
    path: str
    value: Optional[Dict[str, Any]] = None
    x_permissive: Annotated[Optional[bool], Field(alias="x-permissive")] = None


class Patch(RootModel[List[K8SPatchOp]]):
    root: List[K8SPatchOp]


class Resource(BaseModel):
    kind: Optional[str] = None
    name: Optional[str] = None
    namespaced: Optional[bool] = None
    readOnly: Optional[bool] = None
    singularName: Optional[str] = None
    uiCategory: Optional[str] = None


class ResourceHistoryEntry(BaseModel):
    author: Optional[str] = None
    changeType: Optional[str] = None
    commitTime: Optional[AwareDatetime] = None
    hash: Optional[str] = None
    message: Optional[str] = None
    transactionId: Optional[int] = None


class ResourceList(BaseModel):
    apiVersion: Optional[str] = None
    groupVersion: Optional[str] = None
    kind: Optional[str] = None
    resources: Optional[List[Resource]] = None


class StatusDetails(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None


class TopoAttrMetadata(BaseModel):
    type: Optional[str] = None
    ui_description: Optional[str] = None
    ui_description_key: Optional[str] = None
    ui_name: Optional[str] = None
    ui_name_key: Optional[str] = None


class TopoLinkEndpoint(BaseModel):
    endpoint: Optional[str] = None
    node: Optional[str] = None
    node_key: Optional[str] = None


class TopoNodeGrouping(BaseModel):
    group: Optional[str] = None
    tier: Optional[int] = None


class TopoOverlayEndpointState(BaseModel):
    state: Optional[int] = None


TopoOverlayLinkState = TopoOverlayEndpointState


class TopoOverlayNodeState(BaseModel):
    badges: Optional[List[int]] = None
    state: Optional[int] = None


class TopoSchema(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    version: Optional[str] = None


class TopologySpecOverlay(BaseModel):
    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable the generation of the status of this overlay",
            title="Enabled",
        ),
    ]
    key: Annotated[
        str,
        Field(
            description="A unique key for identifying this overlay within the topology.  This is used internally\nonly.",
            title="Key",
        ),
    ]


class TopologySpec(BaseModel):
    """
    TopologySpec defines the desired state of Topology
    """

    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable the generation of the status of this topology",
            title="Enabled",
        ),
    ]
    endpointSubtitle: Annotated[
        Optional[str],
        Field(
            description="Override the subtitle to show for endpoints in the topology",
            title="Endpoint Subtitle",
        ),
    ] = None
    linkSubtitle: Annotated[
        Optional[str],
        Field(
            description="Override the subtitle to show for links in the topology",
            title="Link Subtitle",
        ),
    ] = None
    nodeSubtitle: Annotated[
        Optional[str],
        Field(
            description="Override the subtitle to show for nodes in the topology",
            title="Node Subtitle",
        ),
    ] = None
    overlays: Annotated[
        List[TopologySpecOverlay],
        Field(
            description="The set of overlays supported with this topology",
            title="Overlays",
        ),
    ]
    uiDescription: Annotated[
        Optional[str],
        Field(
            description="A description of the topology to expose in the UI",
            title="UI Description",
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the description of the topology to expose in the UI",
            title="UI Description Key",
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description="The name of the topology to expose in the UI", title="UI Name"
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the name of the topology to expose in the UI",
            title="UI Name Key",
        ),
    ] = None


class UIResult(RootModel[str]):
    root: str


class DeviationOverlaySpecTopology(BaseModel):
    """
    Reference to the topology that this overlay is extending.
    """

    group: Annotated[
        str,
        Field(
            description="The group of the application which published the topology this overlay is extending.",
            title="Group",
        ),
    ]
    name: Annotated[
        str,
        Field(
            description="The name of the resource which published the topology this overlay is extending.",
            title="Name",
        ),
    ]
    version: Annotated[
        str,
        Field(
            description="The version of the application which published the topology this overlay is extending.",
            title="Version",
        ),
    ]


class DeviationOverlaySpec(BaseModel):
    """
    DeviationOverlaySpec defines the desired state of DeviationOverlay
    """

    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable the generation of the status of this overlay",
            title="Enabled",
        ),
    ]
    topology: Annotated[
        DeviationOverlaySpecTopology,
        Field(
            description="Reference to the topology that this overlay is extending.",
            title="Topology",
        ),
    ]
    uiDescription: Annotated[
        Optional[str],
        Field(
            description="A description of the overlay to expose in the UI",
            title="UI Description",
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the description of the overlay to expose in the UI",
            title="UI Description Key",
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description="The name of the overlay to expose in the UI", title="UI Name"
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the name of the overlay to expose in the UI",
            title="UI Name Key",
        ),
    ] = None


class DeviationOverlayDeletedResourceEntry(BaseModel):
    commitTime: Optional[AwareDatetime] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    transactionId: Optional[int] = None


class DeviationOverlayDeletedResources(
    RootModel[List[DeviationOverlayDeletedResourceEntry]]
):
    root: List[DeviationOverlayDeletedResourceEntry]


class DeviationOverlayMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]


LldpOverlaySpecTopology = DeviationOverlaySpecTopology


class LldpOverlaySpec(BaseModel):
    """
    LldpOverlaySpec defines the desired state of lldp
    """

    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable the generation of the status of this overlay",
            title="Enabled",
        ),
    ]
    topology: Annotated[
        LldpOverlaySpecTopology,
        Field(
            description="Reference to the topology that this overlay is extending.",
            title="Topology",
        ),
    ]
    uiDescription: Annotated[
        Optional[str],
        Field(
            description="A description of the overlay to expose in the UI",
            title="UI Description",
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the description of the overlay to expose in the UI",
            title="UI Description Key",
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description="The name of the overlay to expose in the UI", title="UI Name"
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the name of the overlay to expose in the UI",
            title="UI Name Key",
        ),
    ] = None


LldpOverlayDeletedResourceEntry = DeviationOverlayDeletedResourceEntry


class LldpOverlayDeletedResources(RootModel[List[LldpOverlayDeletedResourceEntry]]):
    root: List[LldpOverlayDeletedResourceEntry]


LldpOverlayMetadata = DeviationOverlayMetadata


class TopologyGroupingSpecGroupSelector(BaseModel):
    group: Annotated[
        str,
        Field(
            description="The group to assign to nodes that match the selector.",
            title="Group",
        ),
    ]
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Label selector to use to match nodes that should be assigned to this group.",
            title="Node Selector",
        ),
    ] = None


class TopologyGroupingSpecTierSelector(BaseModel):
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Label selector to use to match nodes that should be assigned to this tier.",
            title="Node Selector",
        ),
    ] = None
    tier: Annotated[
        int,
        Field(
            description="The tier to assign to nodes that match the selector.",
            title="Tier",
        ),
    ]


class TopologyGroupingSpec(BaseModel):
    """
    TopologyGroupingSpec defines the desired state of TopologyGrouping
    """

    groupSelectors: Annotated[
        Optional[List[TopologyGroupingSpecGroupSelector]],
        Field(
            description="The set of selectors for assigning nodes to groups",
            title="Group Selectors",
        ),
    ] = None
    tierSelectors: Annotated[
        Optional[List[TopologyGroupingSpecTierSelector]],
        Field(
            description="The set of selectors for assigning nodes to tiers",
            title="Tier Selectors",
        ),
    ] = None
    uiDescription: Annotated[
        Optional[str],
        Field(
            description="A description of the topology grouping to expose in the UI",
            title="UI Description",
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the description of the topology grouping to expose in the UI",
            title="UI Description Key",
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description="The name of the topology grouping to expose in the UI",
            title="UI Name",
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the name of the topology grouping to expose in the UI",
            title="UI Name Key",
        ),
    ] = None


TopologyGroupingDeletedResourceEntry = DeviationOverlayDeletedResourceEntry


class TopologyGroupingDeletedResources(
    RootModel[List[TopologyGroupingDeletedResourceEntry]]
):
    root: List[TopologyGroupingDeletedResourceEntry]


TopologyGroupingMetadata = DeviationOverlayMetadata


TopologyDeletedResourceEntry = DeviationOverlayDeletedResourceEntry


class TopologyDeletedResources(RootModel[List[TopologyDeletedResourceEntry]]):
    root: List[TopologyDeletedResourceEntry]


TopologyMetadata = DeviationOverlayMetadata


TrafficRateOverlaySpecTopology = DeviationOverlaySpecTopology


class TrafficRateOverlaySpec(BaseModel):
    """
    TrafficRateOverlaySpec defines the desired state of TrafficRateOverlay
    """

    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable the generation of the status of this overlay",
            title="Enabled",
        ),
    ]
    topology: Annotated[
        TrafficRateOverlaySpecTopology,
        Field(
            description="Reference to the topology that this overlay is extending.",
            title="Topology",
        ),
    ]
    uiDescription: Annotated[
        Optional[str],
        Field(
            description="A description of the overlay to expose in the UI",
            title="UI Description",
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the description of the overlay to expose in the UI",
            title="UI Description Key",
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description="The name of the overlay to expose in the UI", title="UI Name"
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the name of the overlay to expose in the UI",
            title="UI Name Key",
        ),
    ] = None


TrafficRateOverlayDeletedResourceEntry = DeviationOverlayDeletedResourceEntry


class TrafficRateOverlayDeletedResources(
    RootModel[List[TrafficRateOverlayDeletedResourceEntry]]
):
    root: List[TrafficRateOverlayDeletedResourceEntry]


TrafficRateOverlayMetadata = DeviationOverlayMetadata


class AppGroup(BaseModel):
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None
    preferredVersion: Optional[AppGroupVersion] = None
    versions: Optional[List[AppGroupVersion]] = None


class ResourceHistory(RootModel[List[ResourceHistoryEntry]]):
    root: List[ResourceHistoryEntry]


class Status(BaseModel):
    apiVersion: Optional[str] = None
    details: Optional[StatusDetails] = None
    kind: Optional[str] = None
    string: Optional[str] = None


class TopoElemMetadata(BaseModel):
    attributes: Optional[Dict[str, TopoAttrMetadata]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    subtitle: Optional[str] = None
    subtitle_key: Optional[str] = None


class TopoOverlayEndpoint(BaseModel):
    attributes: Optional[Dict[str, Dict[str, Any]]] = None
    cr_name: Optional[str] = None
    labels: Optional[Dict[str, str]] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    overlays: Optional[Dict[str, TopoOverlayEndpointState]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    state: Optional[int] = None
    ui_name: Optional[str] = None


class TopoOverlayLink(BaseModel):
    attributes: Optional[Dict[str, Dict[str, Any]]] = None
    cr_name: Optional[str] = None
    endpoint_a: Optional[TopoLinkEndpoint] = None
    endpoint_a_details: Optional[TopoOverlayEndpoint] = None
    endpoint_b: Optional[TopoLinkEndpoint] = None
    endpoint_b_details: Optional[TopoOverlayEndpoint] = None
    key: Optional[str] = None
    labels: Optional[Dict[str, str]] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    overlays: Optional[Dict[str, TopoOverlayLinkState]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    state: Optional[int] = None
    ui_name: Optional[str] = None


class TopoOverlayNode(BaseModel):
    attributes: Optional[Dict[str, Dict[str, Any]]] = None
    badges: Optional[List[int]] = None
    cr_name: Optional[str] = None
    grouping: Optional[TopoNodeGrouping] = None
    key: Optional[str] = None
    labels: Optional[Dict[str, str]] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    overlays: Optional[Dict[str, TopoOverlayNodeState]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    state: Optional[int] = None
    ui_name: Optional[str] = None


class Topology(BaseModel):
    """
    Topology is the Schema for the topologies API
    """

    apiVersion: Annotated[
        str, Field(pattern="^topologies\\.eda\\.nokia\\.com/v1alpha1$")
    ]
    kind: Annotated[str, Field(pattern="^Topology$")]
    metadata: TopologyMetadata
    spec: Annotated[
        TopologySpec,
        Field(
            description="TopologySpec defines the desired state of Topology",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="TopologyStatus defines the observed state of Topology",
            title="Status",
        ),
    ] = None


class DeviationOverlay(BaseModel):
    """
    DeviationOverlay is the Schema for the deviationoverlays API
    """

    apiVersion: Annotated[
        str, Field(pattern="^topologies\\.eda\\.nokia\\.com/v1alpha1$")
    ]
    kind: Annotated[str, Field(pattern="^DeviationOverlay$")]
    metadata: DeviationOverlayMetadata
    spec: Annotated[
        DeviationOverlaySpec,
        Field(
            description="DeviationOverlaySpec defines the desired state of DeviationOverlay",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="DeviationOverlayStatus defines the observed state of DeviationOverlay",
            title="Status",
        ),
    ] = None


class DeviationOverlayList(BaseModel):
    """
    DeviationOverlayList is a list of deviationoverlays
    """

    apiVersion: str
    items: Optional[List[DeviationOverlay]] = None
    kind: str


class LldpOverlay(BaseModel):
    """
    LldpOverlay is the Schema for the lldpoverlays API
    """

    apiVersion: Annotated[
        str, Field(pattern="^topologies\\.eda\\.nokia\\.com/v1alpha1$")
    ]
    kind: Annotated[str, Field(pattern="^LldpOverlay$")]
    metadata: LldpOverlayMetadata
    spec: Annotated[
        LldpOverlaySpec,
        Field(
            description="LldpOverlaySpec defines the desired state of lldp",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="LldpOverlayStatus defines the observed state of LldpOverlay",
            title="Status",
        ),
    ] = None


class LldpOverlayList(BaseModel):
    """
    LldpOverlayList is a list of lldpoverlays
    """

    apiVersion: str
    items: Optional[List[LldpOverlay]] = None
    kind: str


class TopologyGrouping(BaseModel):
    """
    TopologyGrouping is the Schema for the topologygroupings API
    """

    apiVersion: Annotated[
        str, Field(pattern="^topologies\\.eda\\.nokia\\.com/v1alpha1$")
    ]
    kind: Annotated[str, Field(pattern="^TopologyGrouping$")]
    metadata: TopologyGroupingMetadata
    spec: Annotated[
        TopologyGroupingSpec,
        Field(
            description="TopologyGroupingSpec defines the desired state of TopologyGrouping",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="TopologyGroupingStatus defines the observed state of TopologyGrouping",
            title="Status",
        ),
    ] = None


class TopologyGroupingList(BaseModel):
    """
    TopologyGroupingList is a list of topologygroupings
    """

    apiVersion: str
    items: Optional[List[TopologyGrouping]] = None
    kind: str


class TopologyList(BaseModel):
    """
    TopologyList is a list of topologies
    """

    apiVersion: str
    items: Optional[List[Topology]] = None
    kind: str


class TrafficRateOverlay(BaseModel):
    """
    TrafficRateOverlay is the Schema for the trafficrateoverlays API
    """

    apiVersion: Annotated[
        str, Field(pattern="^topologies\\.eda\\.nokia\\.com/v1alpha1$")
    ]
    kind: Annotated[str, Field(pattern="^TrafficRateOverlay$")]
    metadata: TrafficRateOverlayMetadata
    spec: Annotated[
        TrafficRateOverlaySpec,
        Field(
            description="TrafficRateOverlaySpec defines the desired state of TrafficRateOverlay",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="TrafficRateOverlayStatus defines the observed state of TrafficRateOverlay",
            title="Status",
        ),
    ] = None


class TrafficRateOverlayList(BaseModel):
    """
    TrafficRateOverlayList is a list of trafficrateoverlays
    """

    apiVersion: str
    items: Optional[List[TrafficRateOverlay]] = None
    kind: str


class OverlayState(BaseModel):
    links: Optional[Dict[str, TopoOverlayLink]] = None
    nodes: Optional[Dict[str, TopoOverlayNode]] = None


class ResourceTopology(BaseModel):
    topology: Optional[OverlayState] = None
    topologyMetadata: Optional[Topology] = None
