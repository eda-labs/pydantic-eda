# generated by datamodel-codegen:
#   filename:  aaa.json

from __future__ import annotations
from typing import Annotated, Any, Dict, List, Literal, Optional
from pydantic import BaseModel, Field, RootModel


class AppGroup(BaseModel):
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None
    preferredVersion: Optional[AppGroupVersion] = None
    versions: Optional[List[AppGroupVersion]] = None


class AppGroupVersion(BaseModel):
    groupVersion: Optional[str] = None
    version: Optional[str] = None


class ErrorIndex(BaseModel):
    index: Optional[int] = None


class ErrorItem(BaseModel):
    error: Optional[Dict[str, Any]] = None
    type: Optional[str] = None


class ErrorResponse(BaseModel):
    """
    Generic error response for REST APIs
    """

    code: Annotated[
        int, Field(description="the numeric HTTP error code for the response.")
    ]
    details: Annotated[
        Optional[str], Field(description="The optional details of the error response.")
    ] = None
    dictionary: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Dictionary/map of associated data/information relevant to the error.\nThe error "message" may contain {{name}} escapes that should be substituted\nwith information from this dictionary.'
        ),
    ] = None
    errors: Annotated[
        Optional[List[ErrorItem]],
        Field(
            description="Collection of errors in cases where more than one exists. This needs to be\nflexible so we can support multiple formats"
        ),
    ] = None
    index: Optional[ErrorIndex] = None
    internal: Annotated[
        Optional[int],
        Field(
            description="Internal error code in cases where we don't have an array of errors"
        ),
    ] = None
    message: Annotated[
        str, Field(description="The basic text error message for the error response.")
    ]
    ref: Annotated[
        Optional[str],
        Field(
            description="Reference to the error source. Should typically be the URI of the request"
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description="URI pointing at a document that describes the error and mitigation steps\nIf there is no document, point to the RFC for the HTTP error code"
        ),
    ] = None


class K8SPatchOp(BaseModel):
    from_: Annotated[Optional[str], Field(alias="from")] = None
    op: str
    path: str
    value: Optional[Dict[str, Any]] = None
    x_permissive: Annotated[Optional[bool], Field(alias="x-permissive")] = None


class NodeGroup(BaseModel):
    """
    NodeGroup is the Schema for the nodegroups API
    """

    apiVersion: str
    kind: str
    metadata: NodeGroupMetadata
    spec: Annotated[
        NodeGroupSpec,
        Field(
            description="NodeGroup is a representation of a group on a node, including the services it has access to, any RBAC, and TACACS configuration.\nNodeGroups are deployed to nodes by NodeUser or other permission-consuming resources.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[NodeGroupStatus],
        Field(description="Deployment status of this NodeGroup.", title="Status"),
    ] = None


class NodeGroupDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class NodeGroupDeletedResources(RootModel[List[NodeGroupDeletedResourceEntry]]):
    root: List[NodeGroupDeletedResourceEntry]


class NodeGroupList(BaseModel):
    """
    NodeGroupList is a list of nodegroups
    """

    apiVersion: str
    items: Optional[List[NodeGroup]] = None
    kind: str


class NodeGroupMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]
    namespace: str


class NodeGroupSpec(BaseModel):
    """
    NodeGroup is a representation of a group on a node, including the services it has access to, any RBAC, and TACACS configuration.
    NodeGroups are deployed to nodes by NodeUser or other permission-consuming resources.
    """

    groupName: Annotated[
        Optional[str],
        Field(
            description="Set the local name for this group. If not provided, the resource name will be used.",
            title="Group Name",
        ),
    ] = None
    rules: Annotated[
        Optional[List[NodeGroupSpecRule]],
        Field(description="Rules for this group.", title="Rules"),
    ] = None
    services: Annotated[
        List[
            Literal[
                "CLI",
                "FTP",
                "GNMI",
                "GNOI",
                "GNSI",
                "GRIBI",
                "Reflection",
                "JSON-RPC",
                "NETCONF",
            ]
        ],
        Field(description="Enabled services for this group", title="Services"),
    ]
    superuser: Annotated[
        Optional[bool],
        Field(description="Make members of this group superusers.", title="Superuser"),
    ] = None
    tacacs: Annotated[
        Optional[NodeGroupSpecTacacs],
        Field(description="TACACS configuration.", title="TACACS"),
    ] = None


class NodeGroupSpecRule(BaseModel):
    action: Annotated[
        Literal["Deny", "ReadWrite", "Read"],
        Field(description="Set the action for this entry.", title="Action"),
    ]
    match: Annotated[
        Optional[str],
        Field(
            description='Set the match for this entry. This is a string to match input against - for example "interface" for srl or "configure port" for sros.\nRules here should be specified in the target specific format.',
            title="Match",
        ),
    ] = None
    operatingSystem: Annotated[
        Literal["srl", "sros"],
        Field(
            description="Operating system to match against for this rule.\nOperating system to deploy this rule to.",
            title="Operating System",
        ),
    ]


class NodeGroupSpecTacacs(BaseModel):
    """
    TACACS configuration.
    """

    privilegeLevel: Annotated[
        Optional[int],
        Field(
            description="Set the privilege level for this group.",
            ge=0,
            le=15,
            title="Privilege Level",
        ),
    ] = None


class NodeGroupStatus(BaseModel):
    """
    Deployment status of this NodeGroup.
    """

    nodes: Annotated[
        Optional[List[str]],
        Field(
            description="List of TopoNodes group has been deployed to.", title="Nodes"
        ),
    ] = None


class Patch(RootModel[List[K8SPatchOp]]):
    root: List[K8SPatchOp]


class Resource(BaseModel):
    kind: Optional[str] = None
    name: Optional[str] = None
    namespaced: Optional[bool] = None
    readOnly: Optional[bool] = None
    singularName: Optional[str] = None
    uiCategory: Optional[str] = None


class ResourceHistory(RootModel[List[ResourceHistoryEntry]]):
    root: List[ResourceHistoryEntry]


class ResourceHistoryEntry(BaseModel):
    author: Optional[str] = None
    changeType: Optional[str] = None
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    message: Optional[str] = None
    transactionId: Optional[int] = None


class ResourceList(BaseModel):
    apiVersion: Optional[str] = None
    groupVersion: Optional[str] = None
    kind: Optional[str] = None
    resources: Optional[List[Resource]] = None


class Status(BaseModel):
    apiVersion: Optional[str] = None
    details: Optional[StatusDetails] = None
    kind: Optional[str] = None
    string: Optional[str] = None


class StatusDetails(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None


class UIResult(RootModel[str]):
    root: str
