# generated by datamodel-codegen:
#   filename:  services.json

from __future__ import annotations

from typing import Annotated, Any, Dict, List, Literal, Optional

from pydantic import AwareDatetime, BaseModel, Field, RootModel


class AppGroupVersion(BaseModel):
    groupVersion: Optional[str] = None
    version: Optional[str] = None


class ErrorIndex(BaseModel):
    index: Optional[int] = None


class ErrorItem(BaseModel):
    error: Optional[Dict[str, Any]] = None
    type: Optional[str] = None


class ErrorResponse(BaseModel):
    """
    Generic error response for REST APIs
    """

    code: Annotated[
        int, Field(description="the numeric HTTP error code for the response.")
    ]
    details: Annotated[
        Optional[str], Field(description="The optional details of the error response.")
    ] = None
    dictionary: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Dictionary/map of associated data/information relevant to the error.\nThe error "message" may contain {{name}} escapes that should be substituted\nwith information from this dictionary.'
        ),
    ] = None
    domain: Annotated[
        Optional[str],
        Field(
            description='The "domain" for the error.  If empty, it is an EDA\ncore error.  Alternatively it can be an EDA application\n"apiVersion" value (e.g. interfaces.eda.nokia.com/v1alpha1)\nindicating that the error is specific to that application.\nThe domain gives the receiver information that they can use\nto help them interpret the "internal" error code value, or\nto find an internationalization translation for the message.'
        ),
    ] = None
    errors: Annotated[
        Optional[List[ErrorItem]],
        Field(
            description="Collection of errors in cases where more than one exists. This needs to be\nflexible so we can support multiple formats"
        ),
    ] = None
    index: Optional[ErrorIndex] = None
    internal: Annotated[
        Optional[int],
        Field(
            description="Internal error code in cases where we don't have an array of errors"
        ),
    ] = None
    message: Annotated[
        str, Field(description="The basic text error message for the error response.")
    ]
    ref: Annotated[
        Optional[str],
        Field(
            description="Reference to the error source. Should typically be the URI of the request"
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description="URI pointing at a document that describes the error and mitigation steps\nIf there is no document, point to the RFC for the HTTP error code"
        ),
    ] = None


class K8SPatchOp(BaseModel):
    from_: Annotated[Optional[str], Field(alias="from")] = None
    op: str
    path: str
    value: Optional[Dict[str, Any]] = None
    x_permissive: Annotated[Optional[bool], Field(alias="x-permissive")] = None


class Patch(RootModel[List[K8SPatchOp]]):
    root: List[K8SPatchOp]


class Resource(BaseModel):
    kind: Optional[str] = None
    name: Optional[str] = None
    namespaced: Optional[bool] = None
    readOnly: Optional[bool] = None
    singularName: Optional[str] = None
    uiCategory: Optional[str] = None


class ResourceHistoryEntry(BaseModel):
    author: Optional[str] = None
    changeType: Optional[str] = None
    commitTime: Optional[AwareDatetime] = None
    hash: Optional[str] = None
    message: Optional[str] = None
    transactionId: Optional[int] = None


class ResourceList(BaseModel):
    apiVersion: Optional[str] = None
    groupVersion: Optional[str] = None
    kind: Optional[str] = None
    resources: Optional[List[Resource]] = None


class StatusDetails(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None


class TopoAttrMetadata(BaseModel):
    type: Optional[str] = None
    ui_description: Optional[str] = None
    ui_description_key: Optional[str] = None
    ui_name: Optional[str] = None
    ui_name_key: Optional[str] = None


class TopoLinkEndpoint(BaseModel):
    endpoint: Optional[str] = None
    node: Optional[str] = None
    node_key: Optional[str] = None


class TopoNodeGrouping(BaseModel):
    group: Optional[str] = None
    tier: Optional[int] = None


class TopoOverlayEndpointState(BaseModel):
    state: Optional[int] = None


TopoOverlayLinkState = TopoOverlayEndpointState


class TopoOverlayNodeState(BaseModel):
    badges: Optional[List[int]] = None
    state: Optional[int] = None


class TopoSchema(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    version: Optional[str] = None


class UIResult(RootModel[str]):
    root: str


class WorkflowGetInputsRespElem(BaseModel):
    ackPrompt: Optional[str] = None
    group: str
    kind: str
    name: str
    namespace: Optional[str] = None
    schemaPrompt: Optional[Dict[str, Any]] = None
    version: str


class WorkflowId(BaseModel):
    id: Annotated[
        Optional[int],
        Field(
            description="A workflow identifier; these are assigned by the system to a posted workflow."
        ),
    ] = None


class WorkflowIdentifier(BaseModel):
    group: str
    kind: str
    name: str
    namespace: Optional[str] = None
    version: str


class WorkflowInputDataElem(BaseModel):
    ack: Annotated[
        Optional[bool], Field(description="acknowledge or reject the input request")
    ] = None
    input: Annotated[
        Optional[Dict[str, Any]],
        Field(description="provide a json blob to the workflow"),
    ] = None
    subflow: Optional[WorkflowIdentifier] = None


class BridgeDomainSpecL2proxyARPNDDynamicLearning(BaseModel):
    ageTime: Annotated[
        Optional[int],
        Field(
            description="Aging timer value for the proxy entries in seconds. If not set, this indicates that the entries are never flushed.",
            ge=60,
            le=86400,
            title="Age Time",
        ),
    ] = None
    enabled: Annotated[
        Optional[bool],
        Field(description="Enables or disables Dynamic Learning.", title="Enabled"),
    ] = False
    sendRefresh: Annotated[
        Optional[int],
        Field(
            description="The interval determines the frequency at which the system generates three ARP Requests or Neighbor Solicitations with the intent to refresh the proxy entry. The refresh is sent within the age-time window.",
            ge=120,
            le=86400,
            title="Send Refresh Interval",
        ),
    ] = None


class BridgeDomainSpecL2proxyARPNDIpDuplication(BaseModel):
    enabled: Annotated[
        Optional[bool],
        Field(description="Enables or disables IP Duplication.", title="Enabled"),
    ] = False
    holdDownTime: Annotated[
        Optional[int],
        Field(
            description="Time to wait in minutes from the moment an IP is declared duplicate to the time the IP is removed from the proxy ARP/ND table.",
            ge=2,
            le=60,
            title="Hold Down Time",
        ),
    ] = 9
    monitoringWindow: Annotated[
        Optional[int],
        Field(
            description="Monitoring window for detecting duplication on a given IP address in the proxy ARP/ND table.",
            ge=1,
            le=15,
            title="Monitoring Window",
        ),
    ] = 3
    numMoves: Annotated[
        Optional[int],
        Field(
            description="Number of moves in the proxy ARP/ND table that an IP is allowed within the monitoring-window.",
            ge=3,
            le=10,
            title="Number of Moves",
        ),
    ] = 5


class BridgeDomainSpecL2proxyARPND(BaseModel):
    """
    Enables / Disabled Proxy ARP / Proxy ND.
    """

    dynamicLearning: Annotated[
        Optional[BridgeDomainSpecL2proxyARPNDDynamicLearning],
        Field(title="Dynamic Learning"),
    ] = None
    ipDuplication: Annotated[
        Optional[BridgeDomainSpecL2proxyARPNDIpDuplication],
        Field(title="L2 Proxy ARP/ND IP Duplication Detection"),
    ] = None
    proxyARP: Annotated[
        Optional[bool], Field(description="Enables proxy ARP.", title="Proxy ARP")
    ] = False
    proxyND: Annotated[
        Optional[bool], Field(description="Enables proxy ND.", title="Proxy ND")
    ] = False
    tableSize: Annotated[
        Optional[int],
        Field(
            description="Maximum number of entries allowed in the proxy table of the bridge domain.",
            ge=1,
            le=8192,
            title="L2 Proxy ARP/ND Table Size",
        ),
    ] = 250


class BridgeDomainSpecMacDuplicationDetection(BaseModel):
    """
    Enable or disable MAC duplication detection and resolution mechanisms.
    """

    action: Annotated[
        Optional[Literal["Blackhole", "OperDown", "StopLearning"]],
        Field(
            description="Action to take on the subinterface upon detecting at least one mac addresses as duplicate on the subinterface.",
            title="Action",
        ),
    ] = "StopLearning"
    enabled: Annotated[
        Optional[bool],
        Field(
            description="Enables or disables Mac Duplication Detection.",
            title="Enabled",
        ),
    ] = False
    holdDownTime: Annotated[
        Optional[int],
        Field(
            description="Time to wait in minutes from the moment a mac is declared duplicate to the mac is flushed from the bridge table.",
            ge=2,
            le=60,
            title="Hold Down Time",
        ),
    ] = 9
    monitoringWindow: Annotated[
        Optional[int],
        Field(
            description="Monitoring window in minutes for detecting duplication on a given mac address.",
            ge=1,
            le=15,
            title="Monitoring Window",
        ),
    ] = 3
    numMoves: Annotated[
        Optional[int],
        Field(
            description="Number of moves a mac is allowed within the monitoring-window, before it is declared duplicate.",
            ge=3,
            title="Number of Moves",
        ),
    ] = 5


class BridgeDomainSpec(BaseModel):
    """
    The BridgeDomain enables the configuration and management of Layer 2 virtual networks. It includes settings for VNI, EVI, route targets for import and export, and tunnel index allocation. Additionally, the specification allows for advanced features such as MAC address table limits, aging, Proxy ARP and detection of MAC and IP duplication.
    """

    description: Annotated[
        Optional[str],
        Field(description="The description of the BridgeDomain.", title="Description"),
    ] = None
    evi: Annotated[
        Optional[int],
        Field(
            description="EVI to use for this BridgeDomain, can be optionally left blank to have it automatically allocated using the EVI Pool.",
            ge=1,
            le=65535,
            title="EVI",
        ),
    ] = None
    eviPool: Annotated[
        Optional[str],
        Field(
            description="Reference to an EVI pool to use for allocations if EVI is left blank.",
            title="EVI Allocation Pool",
        ),
    ] = "evi-pool"
    exportTarget: Annotated[
        Optional[str],
        Field(
            description="Export route target in 'target:N:N' format, if not specified, the default value taken as \"target:1:<evi>\".",
            pattern="^target.*$",
            title="Export Target",
        ),
    ] = None
    importTarget: Annotated[
        Optional[str],
        Field(
            description="Import route target in 'target:N:N' format, if not specified, the default value taken as \"target:1:<evi>\".",
            pattern="^target.*$",
            title="Import Target",
        ),
    ] = None
    l2proxyARPND: Annotated[
        Optional[BridgeDomainSpecL2proxyARPND],
        Field(
            description="Enables / Disabled Proxy ARP / Proxy ND.",
            title="L2 Proxy ARP/ND",
        ),
    ] = None
    macAging: Annotated[
        Optional[int],
        Field(
            description="Configurable aging time for dynamically learned mac addresses.",
            ge=60,
            le=86400,
            title="MAC Aging",
        ),
    ] = 300
    macDuplicationDetection: Annotated[
        Optional[BridgeDomainSpecMacDuplicationDetection],
        Field(
            description="Enable or disable MAC duplication detection and resolution mechanisms.",
            title="MAC Duplication Detection",
        ),
    ] = None
    macLearning: Annotated[
        Optional[bool],
        Field(
            description="Enable MAC learning for this BridgeDomain.",
            title="MAC Learning",
        ),
    ] = True
    macLimit: Annotated[
        Optional[int],
        Field(
            description="Sets the maximum number of MAC entries accepted in the bridge table.",
            ge=1,
            title="MAC Limit",
        ),
    ] = None
    tunnelIndexPool: Annotated[
        Optional[str],
        Field(
            description="Reference to a tunnel index pool to use for allocations.",
            title="Tunnel Index Allocation Pool",
        ),
    ] = "tunnel-index-pool"
    type: Annotated[
        Optional[Literal["SIMPLE", "EVPNVXLAN"]],
        Field(
            description="Select the type of BridgeDomain.  Simple doesn't include any overlay control plane or dataplane properties (EVPN/VXLAN). EVPNVXLAN includes the properties needed to provision this BridgeDomain over an IP Fabric.",
            title="Type",
        ),
    ] = "EVPNVXLAN"
    vni: Annotated[
        Optional[int],
        Field(
            description="VNI to use for this BridgeDomain, can be optionally left blank to have it allocated using the VNI Pool.",
            ge=1,
            le=16777215,
            title="VNI",
        ),
    ] = None
    vniPool: Annotated[
        Optional[str],
        Field(
            description="Reference to a VNI pool to use for allocations if VNI is left blank.",
            title="VNI Allocation Pool",
        ),
    ] = "vni-pool"


class BridgeDomainStatus(BaseModel):
    """
    BridgeDomainStatus defines the observed state of BridgeDomain
    """

    evi: Annotated[
        Optional[int],
        Field(description="EVI in use for this bridge domain.", title="EVI"),
    ] = None
    exportTarget: Annotated[
        Optional[str],
        Field(
            description="Export route target for this bridge domain.",
            title="Export Target",
        ),
    ] = None
    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the VNET.", title="Health Score"
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    importTarget: Annotated[
        Optional[str],
        Field(
            description="Import route target for this bridge domain.",
            title="Import Target",
        ),
    ] = None
    lastChange: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The time when the state of the resource last changed.",
            title="Last Change",
        ),
    ] = None
    nodes: Annotated[
        Optional[List[str]],
        Field(
            description="Nodes which have the BridgeDomain configured (min 1 sub-interface).",
            title="Nodes",
        ),
    ] = None
    numNodes: Annotated[
        Optional[int],
        Field(
            description="Number of nodes which have the BridgeDomain configured (min 1 sub-interface).",
            title="Number of Nodes",
        ),
    ] = None
    numSubInterfaces: Annotated[
        Optional[int],
        Field(
            description="Number of sub-interfaces attached to the BridgeDomain.",
            title="Number of Sub-Interfaces",
        ),
    ] = None
    numSubInterfacesOperDown: Annotated[
        Optional[int],
        Field(
            description="Number of oper-down sub-interfaces attached to the BridgeDomain.",
            title="Number of Operational Down Sub-Interfaces",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(description="Operational state of the VNET.", title="Operational State"),
    ] = None
    tunnelIndex: Annotated[
        Optional[int],
        Field(description="Vxlan tunnel index in use.", title="Tunnel Index"),
    ] = None
    vni: Annotated[
        Optional[int],
        Field(description="VNI in use for this bridge domain.", title="VNI"),
    ] = None


class BridgeDomainDeletedResourceEntry(BaseModel):
    commitTime: Optional[AwareDatetime] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class BridgeDomainDeletedResources(RootModel[List[BridgeDomainDeletedResourceEntry]]):
    root: List[BridgeDomainDeletedResourceEntry]


class BridgeDomainMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]
    namespace: str


class BridgeInterfaceSpecEgress(BaseModel):
    """
    Manages actions on traffic at Egress.
    """

    filters: Annotated[
        Optional[List[str]],
        Field(
            description="List of Filter references to use at egress.", title="Filters"
        ),
    ] = None
    qosPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="List of QoS Egress policy references to use at egress.",
            title="QoS Egress Policy",
        ),
    ] = None


class BridgeInterfaceSpecIngress(BaseModel):
    """
    Manages actions on traffic at Ingress.
    """

    filters: Annotated[
        Optional[List[str]],
        Field(
            description="List of Filter references to use at ingress.", title="Filters"
        ),
    ] = None
    qosPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="List of QoS Ingress policy references to use at ingress.",
            title="QoS Ingress Policy",
        ),
    ] = None


class BridgeInterfaceSpecUplinkEgress(BaseModel):
    """
    Manages actions on traffic at Egress of the Local enpoint of the Uplink.
    """

    filters: Annotated[
        Optional[List[str]],
        Field(
            description="List of Filter references to use at egress.", title="Filters"
        ),
    ] = None
    qosPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="List of QoS Egress policy references to use at egress.",
            title="QoS Egress Policy",
        ),
    ] = None


class BridgeInterfaceSpecUplinkIngress(BaseModel):
    """
    Manages actions on traffic at Ingress of the Local enpoint of the Uplink.
    """

    filters: Annotated[
        Optional[List[str]],
        Field(
            description="List of Filter references to use at ingress.", title="Filters"
        ),
    ] = None
    qosPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="List of QoS Ingress policy references to use at ingress.",
            title="QoS Ingress Policy",
        ),
    ] = None


class BridgeInterfaceSpecUplink(BaseModel):
    """
    The Uplink between your access breakout switch and your leaf switch.
    """

    egress: Annotated[
        Optional[BridgeInterfaceSpecUplinkEgress],
        Field(
            description="Manages actions on traffic at Egress of the Local enpoint of the Uplink.",
            title="Egress",
        ),
    ] = None
    ingress: Annotated[
        Optional[BridgeInterfaceSpecUplinkIngress],
        Field(
            description="Manages actions on traffic at Ingress of the Local enpoint of the Uplink.",
            title="Ingress",
        ),
    ] = None
    uplinkSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Selects TopoLinks which connect a leaf switch to a breakout switch. This is the uplink between your access breakout switch and your leaf switch.  There can only be a single TopoLink between the access breakout switch and the leaf switch, if more than one TopoLink is present between two devices the transaction will fail.",
            title="Uplink Selector",
        ),
    ] = None
    uplinkVLANID: Annotated[
        Optional[str],
        Field(
            description="The VLAN ID to be utilized to isolate traffic from the VLAN on the access breakout switch to the leaf switch on the selected uplink TopoLink.",
            title="Uplink VLAN ID",
        ),
    ] = "pool"
    uplinkVLANPool: Annotated[
        Optional[str],
        Field(
            description="A VLAN from this pool will be utilized to isolate traffic from the VLAN on the access breakout switch to the leaf switch on the selected uplink TopoLink.",
            title="Uplink VLAN Pool",
        ),
    ] = None


class BridgeInterfaceSpec(BaseModel):
    """
    The BridgeInterface enables the attachment of network interfaces to a Bridge Domain. It includes settings for VLAN ID allocation, interface attachment, and actions on ingress and egress traffic. The specification supports integration with other network resources, such as Bridge Domains and Interfaces, and provides advanced features like MAC Duplication Detection with configurable actions.
    """

    bridgeDomain: Annotated[
        str,
        Field(
            description="Reference to a BridgeDomain in which to attach the BridgeInterface.",
            title="Bridge Domain",
        ),
    ]
    description: Annotated[
        Optional[str],
        Field(
            description="The description of the BridgeInterface.", title="Description"
        ),
    ] = None
    egress: Annotated[
        Optional[BridgeInterfaceSpecEgress],
        Field(
            description="Manages actions on traffic at Egress.", title="Egress Actions"
        ),
    ] = None
    ingress: Annotated[
        Optional[BridgeInterfaceSpecIngress],
        Field(
            description="Manages actions on traffic at Ingress.",
            title="Ingress Actions",
        ),
    ] = None
    interface: Annotated[
        str,
        Field(
            description="Reference to an Interface resource to attach this BridgeInterface.",
            title="Interface",
        ),
    ]
    l2MTU: Annotated[
        Optional[int],
        Field(
            description="L2 MTU specifies the maximum sized Ethernet frame that can be transmitted on the subinterface. If a frame exceeds this size it is discarded. If the l2-mtu of the subinterface exceeds the port-mtu of the associated interface, the subinterface will remain operationally down.",
            ge=1450,
            le=9500,
            title="L2 MTU",
        ),
    ] = None
    macDuplicationDetectionAction: Annotated[
        Optional[
            Literal["Blackhole", "OperDown", "StopLearning", "UseBridgeDomainAction"]
        ],
        Field(
            description="Override for Mac Duplication Detection action if enabled in the associated BridgeDomain.",
            title="MAC Duplication Detection Action",
        ),
    ] = None
    splitHorizonGroup: Annotated[
        Optional[str],
        Field(
            description="Split Horizon Group to be used for this BridgeInterface. The subinterface within this BridgeInterface will be a member of this Split Horizon Group.",
            title="Split Horizon Group",
        ),
    ] = None
    uplink: Annotated[
        Optional[BridgeInterfaceSpecUplink],
        Field(
            description="The Uplink between your access breakout switch and your leaf switch.",
            title="Uplink",
        ),
    ] = None
    vlanID: Annotated[
        str,
        Field(
            description="Single value between 1-4094 support, ranges supported in the format x-y,x-y, or the special keyword null, any, untagged or pool for auto allocation.",
            title="VLAN ID",
        ),
    ]


class BridgeInterfaceStatusSubInterface(BaseModel):
    enabled: Annotated[
        Optional[bool],
        Field(
            description="The administrative status of the SubInterface.",
            title="Enabled",
        ),
    ] = None
    interface: Annotated[
        str, Field(description="Normalized interface name.", title="Interface")
    ]
    interfaceResource: Annotated[
        str, Field(description="Eda interface resource.", title="Interface Resource")
    ]
    lastChange: Annotated[
        Optional[str],
        Field(
            description="Indicates when this SubInterface last changed state.",
            title="Last Change",
        ),
    ] = None
    node: Annotated[str, Field(description="Reference to Node object.", title="Node")]
    nodeInterface: Annotated[
        str, Field(description="Node specific interface name.", title="Node Interface")
    ]
    operatingSystem: Annotated[
        Optional[str],
        Field(description="Operating System of the Node.", title="Operating System"),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Indicates the current operational state of the SubInterface.",
            title="Operational State",
        ),
    ] = None
    subInterfaceIndex: Annotated[
        Optional[int],
        Field(
            description="Index allocated to the subinterface on the associated interface for the given VLAN.",
            title="Sub Interface Index",
        ),
    ] = None
    vlanID: Annotated[
        Optional[str],
        Field(description="vlan assigned to this subinterface.", title="VLAN ID"),
    ] = None


class BridgeInterfaceStatus(BaseModel):
    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the BridgeInterface.",
            title="Health Score",
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    lastChange: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The time when the state of the resource last changed.",
            title="Last Change",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Operational state of the BridgeInterface.",
            title="Operational State",
        ),
    ] = None
    subInterfaces: Annotated[
        Optional[List[BridgeInterfaceStatusSubInterface]],
        Field(
            description="Sub-interfaces status within the BridgeInterface.",
            title="Sub-Interfaces Status",
        ),
    ] = None


BridgeInterfaceDeletedResourceEntry = BridgeDomainDeletedResourceEntry


class BridgeInterfaceDeletedResources(
    RootModel[List[BridgeInterfaceDeletedResourceEntry]]
):
    root: List[BridgeInterfaceDeletedResourceEntry]


BridgeInterfaceMetadata = BridgeDomainMetadata


class DHCPRelaySpec(BaseModel):
    """
    The DHCPRelay enables the forwarding of DHCP requests and responses between clients and servers across different networks. This resource allows for the configuration of various DHCP relay sub-options, such as CircuitID, RemoteID, and ClientLinkLayerAddress, to provide detailed client information. It also includes settings for specifying the router to reach the DHCP server, the list of DHCP servers to forward requests to, and selectors for Routed and IRB interfaces where the relay will be configured. Additionally, the GI Address option can be set to derive the Gateway IP address from the selected interface, ensuring correct routing of DHCP messages.
    """

    giAddress: Annotated[
        Optional[bool],
        Field(
            description="Set GI Address to the IP derived from the IRBInterface or RoutedInterface on which the DHCP relay is configured.",
            title="Use GI Address",
        ),
    ] = None
    irbInterfaceSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Label selector to select the IRBInterface on which to configure the DHCP relay.",
            title="IRB Interface Selector",
        ),
    ] = None
    routedInterfaceSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Label selector to select the RoutedInterface on which to configure the DHCP relay.",
            title="Routed Interface Selector",
        ),
    ] = None
    router: Annotated[
        Optional[str],
        Field(
            description="Router to be used to reach the DHCP server, if not specified the Router under which the source IRBInterface or RoutedInterface resides will be used.",
            title="Router",
        ),
    ] = None
    servers: Annotated[
        List[str],
        Field(
            description="List of servers to send the DHCP relayed packet to. These can be IP addresses or FQDN.",
            min_length=1,
            title="Servers",
        ),
    ]
    subOptions: Annotated[
        Optional[List[str]],
        Field(
            description="DHCP Relay sub-options; available options are CircuitID, RemoteID, and ClientLinkLayerAddress.",
            title="Sub Options",
        ),
    ] = None


DHCPRelayDeletedResourceEntry = BridgeDomainDeletedResourceEntry


class DHCPRelayDeletedResources(RootModel[List[DHCPRelayDeletedResourceEntry]]):
    root: List[DHCPRelayDeletedResourceEntry]


DHCPRelayMetadata = BridgeDomainMetadata


class EdgePingSpec(BaseModel):
    """
    EdgePingSpec defines the desired state of EdgePing
    """

    destination: Annotated[Optional[str], Field(title="destination")] = None
    interfaceResource: Annotated[Optional[str], Field(title="interfaceresource")] = None
    pingType: Annotated[Literal["gateway", "edgemesh", "edge"], Field(title="pingtype")]
    virtualNetwork: Annotated[Optional[str], Field(title="virtualnetwork")] = None
    vlanID: Annotated[Optional[int], Field(title="vlanid")] = None


class EdgePingStatus(BaseModel):
    """
    EdgePingStatus defines the observed state of EdgePing
    """

    id: Annotated[Optional[int], Field(description="Id", title="ID")] = None
    result: Annotated[
        Optional[str], Field(description="Aggregate result of the Flow", title="Result")
    ] = None


EdgePingMetadata = BridgeDomainMetadata


class IRBInterfaceSpecBfd(BaseModel):
    """
    Enable BFD on the IRBInterface.
    """

    desiredMinTransmitInt: Annotated[
        Optional[int],
        Field(
            description="The minimum interval in microseconds between transmission of BFD control packets.",
            ge=10000,
            le=100000000,
            title="Transmit Interval",
        ),
    ] = 1000000
    detectionMultiplier: Annotated[
        Optional[int],
        Field(
            description="The number of packets that must be missed to declare this session as down.",
            ge=3,
            le=20,
            title="Multiplier",
        ),
    ] = 3
    enabled: Annotated[
        bool, Field(description="Enables Biforward Detection.", title="Enabled")
    ]
    minEchoReceiveInterval: Annotated[
        Optional[int],
        Field(
            description="The minimum interval between echo packets the local node can receive.",
            ge=0,
            le=100000000,
            title="Minimum Echo Receive Interval",
        ),
    ] = 0
    requiredMinReceive: Annotated[
        Optional[int],
        Field(
            description="The minimum interval in microseconds between received BFD control packets that this system should support.",
            ge=10000,
            le=100000000,
            title="Receive Interval",
        ),
    ] = 1000000
    ttl: Annotated[
        Optional[int],
        Field(
            description="Sets custom IP TTL or Hop Limit for multi-hop BFD sessions packets. Not appllicable to single-hop BFD sessions.",
            ge=2,
            le=255,
            title="IP TTL/Hop Limit",
        ),
    ] = None


IRBInterfaceSpecEgress = BridgeInterfaceSpecEgress


class IRBInterfaceSpecEvpnRouteAdvertisementType(BaseModel):
    """
    Controls the type of ARP/ND entries to advertise.
    """

    arpDynamic: Annotated[
        Optional[bool],
        Field(
            description="Advertise dynamic ARP entries.", title="Advertise Dynamic ARP"
        ),
    ] = False
    arpStatic: Annotated[
        Optional[bool],
        Field(
            description="Advertise static ARP entries.", title="Advertise Static ARP"
        ),
    ] = False
    ndDynamic: Annotated[
        Optional[bool],
        Field(
            description="Advertise dynamic ND entries.", title="Advertise Dynamic ND"
        ),
    ] = False
    ndStatic: Annotated[
        Optional[bool],
        Field(description="Advertise static ND entries.", title="Advertise Static ND"),
    ] = False


class IRBInterfaceSpecHostRoutePopulate(BaseModel):
    """
    Configures host route population based on ARP entries.
    """

    dynamic: Annotated[
        Optional[bool],
        Field(
            description="Create host routes out of dynamic ARP entries.",
            title="Dynamic ARP Entries",
        ),
    ] = True
    evpn: Annotated[
        Optional[bool],
        Field(
            description="Create host routes out of EVPN learned ARP entries.",
            title="EVPN Learned ARP Entries",
        ),
    ] = False
    static: Annotated[
        Optional[bool],
        Field(
            description="Create host routes out of static ARP entries.",
            title="Static ARP Entries",
        ),
    ] = True


IRBInterfaceSpecIngress = BridgeInterfaceSpecIngress


class IRBInterfaceSpecIpAddressIpv4Address(BaseModel):
    """
    IPv4 address in IP/mask form, e.g., 192.168.0.1/24.
    """

    ipPrefix: Annotated[
        str, Field(description="Address and mask to use", title="IP Prefix")
    ]
    primary: Annotated[
        Optional[bool],
        Field(
            description="Indicates which address to use as primary for broadcast",
            title="Primary",
        ),
    ] = None


class IRBInterfaceSpecIpAddressIpv6Address(BaseModel):
    """
    IPv6 address in IP/mask form, e.g., fc00::1/120.
    """

    ipPrefix: Annotated[
        str, Field(description="Address and mask to use", title="IP Prefix")
    ]
    primary: Annotated[
        Optional[bool],
        Field(
            description="Indicates which address to use as primary for broadcast",
            title="Primary",
        ),
    ] = None


class IRBInterfaceSpecIpAddress(BaseModel):
    ipv4Address: Annotated[
        Optional[IRBInterfaceSpecIpAddressIpv4Address],
        Field(
            description="IPv4 address in IP/mask form, e.g., 192.168.0.1/24.",
            title="IPv4 Addresses",
        ),
    ] = None
    ipv6Address: Annotated[
        Optional[IRBInterfaceSpecIpAddressIpv6Address],
        Field(
            description="IPv6 address in IP/mask form, e.g., fc00::1/120.",
            title="IPv6 Addresses",
        ),
    ] = None
    node: Annotated[
        Optional[str],
        Field(
            description="Reference to a TopoNode resource, if not specified the IP address will be assigned to all nodes on which the IRB is deployed.  If specified the IP address will be assigned to the specified node.",
            title="Node",
        ),
    ] = None


class IRBInterfaceSpecIpv4Parameters(BaseModel):
    directedBroadcast: Annotated[
        Optional[bool],
        Field(
            description="Allow receiving and forwarding of directed broadcast packets. Enabled when set to true.",
            title="Directed Broadcast",
        ),
    ] = None


class IRBInterfaceSpecIpv6RouterAdvertisementPrefix(BaseModel):
    """
    IPv6Prefix defines the configuration for an IPv6 prefix advertisement.
    """

    autonomousFlag: Annotated[
        Optional[bool],
        Field(
            description="When this is set in the prefix information option hosts can use the prefix for stateless address autoconfiguration (SLAAC).",
            title="Autonomous Flag",
        ),
    ] = True
    onLinkFlag: Annotated[
        Optional[bool],
        Field(
            description="When this is set in the prefix information option hosts can use the prefix for on-link determination.",
            title="On-Link Flag",
        ),
    ] = True
    preferredLifetime: Annotated[
        Optional[int],
        Field(
            description="The length of time in seconds (relative to the time the packet is sent) that addresses generated from the prefix via stateless address autoconfiguration remain preferred.",
            ge=0,
            le=4294967295,
            title="Preferred Lifetime",
        ),
    ] = 604800
    prefix: Annotated[
        str,
        Field(
            description="An IPv6 global unicast address prefix.", title="IPv6 Prefix"
        ),
    ]
    validLifetime: Annotated[
        Optional[int],
        Field(
            description="The length of time in seconds (relative to the time the packet is sent) that the prefix is valid for the purpose of on-link determination.",
            ge=0,
            le=4294967295,
            title="Valid Lifetime",
        ),
    ] = 2592000


class IRBInterfaceSpecIpv6RouterAdvertisement(BaseModel):
    currentHopLimit: Annotated[
        int,
        Field(
            description="The current hop limit to advertise in the router advertisement messages.",
            ge=0,
            le=255,
            title="Current Hop Limit",
        ),
    ]
    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable IPv6 router advertisements.",
            title="Enable Router Advertisements",
        ),
    ]
    ipMTU: Annotated[
        Optional[int],
        Field(
            description="The IP MTU to advertise in the router advertisement messages.",
            ge=1280,
            le=9486,
            title="IP MTU",
        ),
    ] = None
    managedConfigurationFlag: Annotated[
        bool,
        Field(
            description="Enable DHCPv6 for address configuration (M-bit).",
            title="Managed Configuration Flag",
        ),
    ]
    maxAdvertisementInterval: Annotated[
        int,
        Field(
            description="Maximum time between router advertisements (in seconds).",
            ge=4,
            le=1800,
            title="Maximum Advertisement Interval",
        ),
    ]
    minAdvertisementInterval: Annotated[
        int,
        Field(
            description="Minimum time between router advertisements (in seconds).",
            ge=3,
            le=1350,
            title="Minimum Advertisement Interval",
        ),
    ]
    otherConfigurationFlag: Annotated[
        bool,
        Field(
            description="Enable DHCPv6 for other configuration (O-bit).",
            title="Other Configuration Flag",
        ),
    ]
    prefixes: Annotated[
        Optional[List[IRBInterfaceSpecIpv6RouterAdvertisementPrefix]],
        Field(
            description="IPv6 prefixes to advertise in router advertisements.",
            title="Prefixes",
        ),
    ] = None
    reachableTime: Annotated[
        Optional[int],
        Field(
            description="Time in milliseconds for Neighbor Unreachability Detection.",
            ge=0,
            le=3600000,
            title="Reachable Time",
        ),
    ] = 0
    retransmitTime: Annotated[
        int,
        Field(
            description="Time in milliseconds between retransmitted NS messages.",
            ge=0,
            le=1800000,
            title="Retransmit Time",
        ),
    ]
    routerLifetime: Annotated[
        int,
        Field(
            description="Router lifetime in seconds for default gateway.",
            ge=0,
            le=9000,
            title="Router Lifetime",
        ),
    ]


class IRBInterfaceSpecL3ProxyARPND(BaseModel):
    """
    L3 Proxy ARP and ND configuration.
    """

    proxyARP: Annotated[
        Optional[bool],
        Field(
            description="Select whether Proxy ARP should be enabled.",
            title="Proxy ARP Enabled",
        ),
    ] = False
    proxyND: Annotated[
        Optional[bool],
        Field(
            description="Select whether Proxy ND should be enabled.",
            title="Proxy ND Enabled",
        ),
    ] = False


class IRBInterfaceSpecVirtualIPDiscoveryItem(BaseModel):
    address: Annotated[str, Field(description="Virtual IP Address.", title="Address")]
    allowedMAC: Annotated[
        Optional[List[str]],
        Field(
            description="List of allowed MAC addresses for a discovered virtual IP address.",
            title="Allowed MAC Addresses",
        ),
    ] = None
    bridgeInterfaceToProbe: Annotated[
        Optional[List[str]],
        Field(
            description="List of BridgeInterfaces on the associated MAC-VRF to which the ARP probes are sent. If left blank, the probes are sent on all BridgeInterfaces associated with the BridgeDomain.",
            title="Bridge Interfaces to Probe",
        ),
    ] = None
    probeInterval: Annotated[
        Optional[int],
        Field(
            description="ARP probe interval in seconds.",
            ge=0,
            le=86400,
            title="Probe Interval",
        ),
    ] = 0
    vlanToProbe: Annotated[
        Optional[List[str]],
        Field(
            description="List of VLANs on the associated BridgeDomain to which the ARP probes are sent.  If left blank, the probes are sent on all VLANs associated with the BridgeDomain.",
            title="VLANs to Probe",
        ),
    ] = None


class IRBInterfaceSpec(BaseModel):
    """
    The IRBInterface enables the configuration and management of Layer 3 interfaces associated with a BridgeDomain. This resource allows for the specification of various parameters, including IP MTU, learning of unsolicited ARPs, IPv4 and IPv6 addresses, and unnumbered interface settings. It also supports advanced features such as BFD configuration, Virtual IP discovery, and ARP/ND-related settings like Proxy ARP/ND and EVPN route advertisement.
    """

    anycastGatewayMAC: Annotated[
        Optional[str],
        Field(
            description="The gateway MAC to use on the anycast address, if left empty the node will automatically assign one.",
            title="Anycast GW MAC",
        ),
    ] = None
    arpTimeout: Annotated[
        Optional[int],
        Field(
            description="Duration of time that dynamic ARP entries remain in the ARP cache before they expire.",
            title="ARP Timeout",
        ),
    ] = 14400
    bfd: Annotated[
        Optional[IRBInterfaceSpecBfd],
        Field(description="Enable BFD on the IRBInterface.", title="BFD Configuration"),
    ] = None
    bridgeDomain: Annotated[
        str, Field(description="Reference to a BridgeDomain.", title="Bridge Domain")
    ]
    description: Annotated[
        Optional[str],
        Field(description="The description of the IRBInterface.", title="Description"),
    ] = None
    egress: Annotated[
        Optional[IRBInterfaceSpecEgress],
        Field(
            description="Manages actions on traffic at Egress.", title="Egress Actions"
        ),
    ] = None
    evpnRouteAdvertisementType: Annotated[
        Optional[IRBInterfaceSpecEvpnRouteAdvertisementType],
        Field(
            description="Controls the type of ARP/ND entries to advertise.",
            title="EVPN Route Advertisement Type",
        ),
    ] = None
    hostRoutePopulate: Annotated[
        Optional[IRBInterfaceSpecHostRoutePopulate],
        Field(
            description="Configures host route population based on ARP entries.",
            title="Host Route Population",
        ),
    ] = None
    ingress: Annotated[
        Optional[IRBInterfaceSpecIngress],
        Field(
            description="Manages actions on traffic at Ingress.",
            title="Ingress Actions",
        ),
    ] = None
    ipAddresses: Annotated[
        Optional[List[IRBInterfaceSpecIpAddress]], Field(title="IP Addresses")
    ] = None
    ipMTU: Annotated[
        Optional[int],
        Field(
            description="IP MTU for the IRBInterface [default=1500].",
            ge=1280,
            le=9486,
            title="IP MTU",
        ),
    ] = 1500
    ipv4Parameters: Annotated[
        Optional[IRBInterfaceSpecIpv4Parameters],
        Field(title="IPv4-specific Parameters"),
    ] = None
    ipv6RouterAdvertisement: Annotated[
        Optional[IRBInterfaceSpecIpv6RouterAdvertisement],
        Field(title="IPv6 Router Advertisement"),
    ] = None
    l3ProxyARPND: Annotated[
        Optional[IRBInterfaceSpecL3ProxyARPND],
        Field(
            description="L3 Proxy ARP and ND configuration.", title="L3 Proxy ARP/ND"
        ),
    ] = None
    learnUnsolicited: Annotated[
        Optional[Literal["BOTH", "GLOBAL", "LINK-LOCAL", "NONE"]],
        Field(
            description="Enable or disable learning of unsolicited ARPs.",
            title="Learn Unsolicited ARPs",
        ),
    ] = "NONE"
    router: Annotated[str, Field(description="Reference to a Router.", title="Router")]
    unnumbered: Annotated[
        Optional[Literal["IPV6"]],
        Field(
            description="Enables the use of unnumbered interfaces on the IRBInterface.  If IPv6 is specified, no IP address are configured on the sub-interface and only the link local address will be used.  If any IP addresses are specified for either IPv4 or IPv6 that will take precedence and IPs will be assigned to the interfaces.(Deprecated, Use IPv6RouterAdvertisement)",
            title="Unnumbered",
        ),
    ] = None
    virtualIPDiscovery: Annotated[
        Optional[List[IRBInterfaceSpecVirtualIPDiscoveryItem]],
        Field(
            description="Configuration for Virtual IP discovery on the interface.",
            title="Virtual IP Discovery",
        ),
    ] = None


class IRBInterfaceStatusInterfaceIpv4Address(BaseModel):
    ipPrefix: Annotated[
        str, Field(description="Address and mask to use", title="IP Prefix")
    ]
    primary: Annotated[
        Optional[bool],
        Field(
            description="Indicates which address to use as primary for broadcast",
            title="Primary",
        ),
    ] = None


IRBInterfaceStatusInterfaceIpv6Address = IRBInterfaceStatusInterfaceIpv4Address


class IRBInterfaceStatusInterface(BaseModel):
    enabled: Annotated[
        Optional[bool],
        Field(
            description="Administrative status of the SubInterface.", title="Enabled"
        ),
    ] = None
    ipv4Addresses: Annotated[
        Optional[List[IRBInterfaceStatusInterfaceIpv4Address]],
        Field(description="List of IPv4 addresses", title="IPv4 Addresses"),
    ] = None
    ipv6Addresses: Annotated[
        Optional[List[IRBInterfaceStatusInterfaceIpv6Address]],
        Field(description="List of IPv6 addresses", title="IPv6 Addresses"),
    ] = None
    lastChange: Annotated[
        Optional[str],
        Field(
            description="Timestamp of when this SubInterface last changed state.",
            title="Last Change",
        ),
    ] = None
    node: Annotated[str, Field(description="Reference to Node object.", title="Node")]
    nodeInterface: Annotated[
        str, Field(description="Node specific interface name.", title="Node Interface")
    ]
    operatingSystem: Annotated[
        Optional[str],
        Field(description="Operating System of the Node.", title="Operating System"),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Current operational state of the SubInterface.",
            title="Operational State",
        ),
    ] = None


class IRBInterfaceStatus(BaseModel):
    """
    IRBInterfaceStatus defines the observed state of IRBInterface
    """

    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the VNET.", title="Health Score"
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Explains the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    interfaces: Annotated[
        Optional[List[IRBInterfaceStatusInterface]],
        Field(
            description="Details of the interfaces associated with the IRB.",
            title="Interface Statuses",
        ),
    ] = None
    lastChange: Annotated[
        Optional[AwareDatetime],
        Field(description="Timestamp of the last state change.", title="Last Change"),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(description="Operational state of the VNET.", title="Operational State"),
    ] = None


IRBInterfaceDeletedResourceEntry = BridgeDomainDeletedResourceEntry


class IRBInterfaceDeletedResources(RootModel[List[IRBInterfaceDeletedResourceEntry]]):
    root: List[IRBInterfaceDeletedResourceEntry]


IRBInterfaceMetadata = BridgeDomainMetadata


class RoutedInterfaceSpecBfd(BaseModel):
    """
    Enables BFD on the RoutedInterface.
    """

    desiredMinTransmitInt: Annotated[
        Optional[int],
        Field(
            description="The minimum interval in microseconds between transmission of BFD control packets.",
            ge=10000,
            le=100000000,
            title="Transmit Interval",
        ),
    ] = 1000000
    detectionMultiplier: Annotated[
        Optional[int],
        Field(
            description="The number of packets that must be missed to declare this session as down.",
            ge=3,
            le=20,
            title="Multiplier",
        ),
    ] = 3
    enabled: Annotated[
        bool, Field(description="Enables Biforward Detection.", title="Enabled")
    ]
    minEchoReceiveInterval: Annotated[
        Optional[int],
        Field(
            description="The minimum interval between echo packets the local node can receive.",
            ge=0,
            le=100000000,
            title="Minimum Echo Receive Interval",
        ),
    ] = 0
    requiredMinReceive: Annotated[
        Optional[int],
        Field(
            description="The minimum interval in microseconds between received BFD control packets that this system should support.",
            ge=10000,
            le=100000000,
            title="Receive Interval",
        ),
    ] = 1000000
    ttl: Annotated[
        Optional[int],
        Field(
            description="Sets custom IP TTL or Hop Limit for multi-hop BFD sessions packets. Not appllicable to single-hop BFD sessions.",
            ge=2,
            le=255,
            title="IP TTL/Hop Limit",
        ),
    ] = None


RoutedInterfaceSpecEgress = BridgeInterfaceSpecEgress


RoutedInterfaceSpecIngress = BridgeInterfaceSpecIngress


RoutedInterfaceSpecIpv4Address = IRBInterfaceStatusInterfaceIpv4Address


RoutedInterfaceSpecIpv4Parameters = IRBInterfaceSpecIpv4Parameters


RoutedInterfaceSpecIpv6Address = IRBInterfaceStatusInterfaceIpv4Address


RoutedInterfaceSpecIpv6RouterAdvertisementPrefix = (
    IRBInterfaceSpecIpv6RouterAdvertisementPrefix
)


class RoutedInterfaceSpecIpv6RouterAdvertisement(BaseModel):
    currentHopLimit: Annotated[
        int,
        Field(
            description="The current hop limit to advertise in the router advertisement messages.",
            ge=0,
            le=255,
            title="Current Hop Limit",
        ),
    ]
    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable IPv6 router advertisements.",
            title="Enable Router Advertisements",
        ),
    ]
    ipMTU: Annotated[
        Optional[int],
        Field(
            description="The IP MTU to advertise in the router advertisement messages.",
            ge=1280,
            le=9486,
            title="IP MTU",
        ),
    ] = None
    managedConfigurationFlag: Annotated[
        bool,
        Field(
            description="Enable DHCPv6 for address configuration (M-bit).",
            title="Managed Configuration Flag",
        ),
    ]
    maxAdvertisementInterval: Annotated[
        int,
        Field(
            description="Maximum time between router advertisements (in seconds).",
            ge=4,
            le=1800,
            title="Maximum Advertisement Interval",
        ),
    ]
    minAdvertisementInterval: Annotated[
        int,
        Field(
            description="Minimum time between router advertisements (in seconds).",
            ge=3,
            le=1350,
            title="Minimum Advertisement Interval",
        ),
    ]
    otherConfigurationFlag: Annotated[
        bool,
        Field(
            description="Enable DHCPv6 for other configuration (O-bit).",
            title="Other Configuration Flag",
        ),
    ]
    prefixes: Annotated[
        Optional[List[RoutedInterfaceSpecIpv6RouterAdvertisementPrefix]],
        Field(
            description="IPv6 prefixes to advertise in router advertisements.",
            title="Prefixes",
        ),
    ] = None
    reachableTime: Annotated[
        Optional[int],
        Field(
            description="Time in milliseconds for Neighbor Unreachability Detection.",
            ge=0,
            le=3600000,
            title="Reachable Time",
        ),
    ] = 0
    retransmitTime: Annotated[
        int,
        Field(
            description="Time in milliseconds between retransmitted NS messages.",
            ge=0,
            le=1800000,
            title="Retransmit Time",
        ),
    ]
    routerLifetime: Annotated[
        int,
        Field(
            description="Router lifetime in seconds for default gateway.",
            ge=0,
            le=9000,
            title="Router Lifetime",
        ),
    ]


RoutedInterfaceSpecL3ProxyARPND = IRBInterfaceSpecL3ProxyARPND


class RoutedInterfaceSpec(BaseModel):
    """
    The RoutedInterface enables the configuration and management of Layer 3 interfaces for routing traffic between different networks. This resource allows for specifying an underlying Interface and Router, configuring VLAN IDs, and setting the IP MTU. It also supports the learning of unsolicited ARPs, defining both IPv4 and IPv6 addresses, and enabling unnumbered interfaces. Advanced features such as BFD configuration, Proxy ARP/ND, and ARP timeout settings are included to ensure robust and efficient routing.
    """

    arpTimeout: Annotated[
        Optional[int],
        Field(
            description="Duration of time that dynamic ARP entries remain in the ARP cache before they expire.",
            title="ARP Timeout",
        ),
    ] = 14400
    bfd: Annotated[
        Optional[RoutedInterfaceSpecBfd],
        Field(
            description="Enables BFD on the RoutedInterface.", title="BFD Configuration"
        ),
    ] = None
    description: Annotated[
        Optional[str],
        Field(
            description="The description of the RoutedInterface.", title="Description"
        ),
    ] = None
    egress: Annotated[
        Optional[RoutedInterfaceSpecEgress],
        Field(
            description="Manages actions on traffic at Egress.", title="Egress Actions"
        ),
    ] = None
    ingress: Annotated[
        Optional[RoutedInterfaceSpecIngress],
        Field(
            description="Manages actions on traffic at Ingress.",
            title="Ingress Actions",
        ),
    ] = None
    interface: Annotated[
        str,
        Field(
            description="Reference to an Interface to use for attachment.",
            title="Interface",
        ),
    ]
    ipMTU: Annotated[
        Optional[int],
        Field(
            description="IP MTU for the RoutedInterface.",
            ge=1280,
            le=9486,
            title="IP MTU",
        ),
    ] = 1500
    ipv4Addresses: Annotated[
        Optional[List[RoutedInterfaceSpecIpv4Address]],
        Field(
            description="List of IPv4 addresses in IP/mask form, e.g., 192.168.0.1/24.",
            title="IPv4 Addresses",
        ),
    ] = None
    ipv4Parameters: Annotated[
        Optional[RoutedInterfaceSpecIpv4Parameters],
        Field(title="IPv4-specific Parameters"),
    ] = None
    ipv6Addresses: Annotated[
        Optional[List[RoutedInterfaceSpecIpv6Address]],
        Field(
            description="List of IPv6 addresses in IP/mask form, e.g., fc00::1/120.",
            title="IPv6 Addresses",
        ),
    ] = None
    ipv6RouterAdvertisement: Annotated[
        Optional[RoutedInterfaceSpecIpv6RouterAdvertisement],
        Field(title="IPv6 Router Advertisement"),
    ] = None
    l3ProxyARPND: Annotated[
        Optional[RoutedInterfaceSpecL3ProxyARPND],
        Field(
            description="L3 Proxy ARP and ND configuration.", title="L3 Proxy ARP/ND"
        ),
    ] = None
    learnUnsolicited: Annotated[
        Optional[Literal["BOTH", "GLOBAL", "LINK-LOCAL", "NONE"]],
        Field(
            description="Enable or disable learning of unsolicited ARPs.",
            title="Learn Unsolicited ARPs",
        ),
    ] = "NONE"
    router: Annotated[str, Field(description="Reference to a Router.", title="Router")]
    unnumbered: Annotated[
        Optional[Literal["IPV6"]],
        Field(
            description="Enables the use of unnumbered interfaces on the IRBInterface.  If IPv6 is specified, no IP address are configured on the sub-interface and only the link local address will be used.  If any IP addresses are specified for either IPv4 or IPv6 that will take precedence and IPs will be assigned to the interfaces. (Deprecated, Use IPv6RouterAdvertisement)",
            title="Unnumbered",
        ),
    ] = None
    vlanID: Annotated[
        Optional[str],
        Field(
            description="Single value between 1-4094 support, ranges supported in the format x-y,x-y, or the special keyword null, any, untagged or pool for auto allocation.",
            title="VLAN ID",
        ),
    ] = "pool"
    vlanPool: Annotated[
        Optional[str],
        Field(
            description="Reference to a VLAN pool to use for allocations.",
            title="VLAN Pool",
        ),
    ] = "vlan-pool"


RoutedInterfaceStatusInterface = BridgeInterfaceStatusSubInterface


class RoutedInterfaceStatus(BaseModel):
    """
    RoutedInterfaceStatus defines the observed state of RoutedInterface
    """

    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the RoutedInterface.",
            title="Health Score",
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    interfaces: Annotated[
        Optional[List[RoutedInterfaceStatusInterface]],
        Field(
            description="Sub-interface status within the RoutedInterface.",
            title="Sub-Interfaces Status",
        ),
    ] = None
    lastChange: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The time when the state of the resource last changed.",
            title="Last Change",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Operational state of the RoutedInterface.",
            title="Operational State",
        ),
    ] = None


RoutedInterfaceDeletedResourceEntry = BridgeDomainDeletedResourceEntry


class RoutedInterfaceDeletedResources(
    RootModel[List[RoutedInterfaceDeletedResourceEntry]]
):
    root: List[RoutedInterfaceDeletedResourceEntry]


RoutedInterfaceMetadata = BridgeDomainMetadata


class RouterSpecBgpIpAliasNexthop(BaseModel):
    esi: Annotated[
        Optional[str],
        Field(
            description="10 byte Ethernet Segment Identifier, if not set a type 0 ESI is generated.",
            title="ESI",
        ),
    ] = "auto"
    nextHop: Annotated[
        str,
        Field(
            description="The nexthop IP address to track for the IP alias.",
            title="IP Alias Address",
        ),
    ]
    preferredActiveNode: Annotated[
        Optional[str],
        Field(
            description="When not set the ES is used in an all active mode. This references the ToppNode object and when set, the DF algorithm is configured to type preference and the selected Node is set with a higher preference value. All other Nodes have a lower value configured.",
            title="Preferred Active Node",
        ),
    ] = None


class RouterSpecBgpIpv4UnicastMultipath(BaseModel):
    """
    Enable multipath.
    """

    allowMultipleAS: Annotated[
        bool,
        Field(
            description="When set to true, BGP is allowed to build a multipath set using BGP routes with different neighbor AS (most recent AS in the AS_PATH), When set to false, BGP is only allowed to use non-best paths for ECMP if they meet the multipath criteria and they have the same neighbor AS as the best path.",
            title="Allow Multiple Autonomous Systems Per Path",
        ),
    ]
    maxAllowedPaths: Annotated[
        int,
        Field(
            description="The maximum number of BGP ECMP next-hops for BGP routes with an NLRI belonging to the address family of this configuration context.",
            ge=1,
            le=256,
            title="Maximum Number of Paths",
        ),
    ]


class RouterSpecBgpIpv4Unicast(BaseModel):
    """
    Parameters relating to the IPv4 unicast AFI/SAFI.
    """

    advertiseIPV6NextHops: Annotated[
        Optional[bool],
        Field(
            description="Enables advertisement of IPv4 Unicast routes with IPv6 next-hops to peers.",
            title="Advertise IPv6 Next Hops",
        ),
    ] = None
    enabled: Annotated[
        bool, Field(description="Enables the IPv4 unicast AFISAFI.", title="Enabled")
    ]
    multipath: Annotated[
        Optional[RouterSpecBgpIpv4UnicastMultipath],
        Field(description="Enable multipath.", title="Multipath"),
    ] = None
    receiveIPV6NextHops: Annotated[
        Optional[bool],
        Field(
            description="Enables the advertisement of the RFC 5549 capability to receive IPv4 routes with IPv6 next-hops.",
            title="Receive IPv6 Next Hops",
        ),
    ] = None


class RouterSpecBgpIpv6UnicastMultipath(BaseModel):
    """
    Enable multipath
    """

    allowMultipleAS: Annotated[
        bool,
        Field(
            description="When set to true, BGP is allowed to build a multipath set using BGP routes with different neighbor AS (most recent AS in the AS_PATH), When set to false, BGP is only allowed to use non-best paths for ECMP if they meet the multipath criteria and they have the same neighbor AS as the best path.",
            title="Allow Multiple Autonomous Systems Per Path",
        ),
    ]
    maxAllowedPaths: Annotated[
        int,
        Field(
            description="The maximum number of BGP ECMP next-hops for BGP routes with an NLRI belonging to the address family of this configuration context.",
            ge=1,
            le=256,
            title="Maximum Number of Paths",
        ),
    ]


class RouterSpecBgpIpv6Unicast(BaseModel):
    """
    Parameters relating to the IPv6 unicast AFI/SAFI.
    """

    enabled: Annotated[
        bool, Field(description="Enables the IPv6 unicast AFISAFI", title="Enabled")
    ]
    multipath: Annotated[
        Optional[RouterSpecBgpIpv6UnicastMultipath],
        Field(description="Enable multipath", title="Multipath"),
    ] = None


class RouterSpecBgp(BaseModel):
    """
    BGP configuration.
    """

    autonomousSystem: Annotated[
        Optional[int],
        Field(
            description="Autonomous System number for BGP.",
            ge=1,
            le=4294967295,
            title="Autonomous System",
        ),
    ] = None
    ebgpPreference: Annotated[
        Optional[int],
        Field(
            description="Preference to be set for eBGP [default=170].",
            ge=1,
            le=255,
            title="eBGP Preference",
        ),
    ] = 170
    enabled: Annotated[
        Optional[bool], Field(description="Enable or disable BGP.", title="Enable BGP")
    ] = False
    ibgpPreference: Annotated[
        Optional[int],
        Field(
            description="Preference to be set for iBGP [default=170].",
            ge=1,
            le=255,
            title="iBGP Preference",
        ),
    ] = 170
    ipAliasNexthops: Annotated[
        Optional[List[RouterSpecBgpIpAliasNexthop]],
        Field(description="IP aliasing configuration.", title="IP Alias Nexthops"),
    ] = None
    ipv4Unicast: Annotated[
        Optional[RouterSpecBgpIpv4Unicast],
        Field(
            description="Parameters relating to the IPv4 unicast AFI/SAFI.",
            title="IPv4 Unicast",
        ),
    ] = None
    ipv6Unicast: Annotated[
        Optional[RouterSpecBgpIpv6Unicast],
        Field(
            description="Parameters relating to the IPv6 unicast AFI/SAFI.",
            title="IPv6 Unicast",
        ),
    ] = None
    keychain: Annotated[
        Optional[str],
        Field(description="Keychain to be used for authentication", title="Keychain"),
    ] = None
    minWaitToAdvertise: Annotated[
        Optional[int],
        Field(
            description="Minimum wait time before advertising routes post BGP restart.",
            ge=0,
            le=3600,
            title="Min Wait To Advertise Time",
        ),
    ] = 0
    rapidWithdrawl: Annotated[
        Optional[bool],
        Field(
            description="Enable rapid withdrawal in BGP.",
            title="Enable Rapid Withdrawal",
        ),
    ] = True
    waitForFIBInstall: Annotated[
        Optional[bool],
        Field(
            description="Wait for FIB installation before advertising routes.",
            title="Wait for FIB Installation",
        ),
    ] = False


class RouterSpecIpLoadBalancingPrefixItem(BaseModel):
    hashBucketsPerPath: Annotated[
        int,
        Field(
            description="The number of times each next-hop is repeated in the fill pattern if there are max-paths ECMP next-hops.",
            ge=1,
            le=32,
            title="Max Paths",
        ),
    ]
    maxECMP: Annotated[
        int,
        Field(
            description="The maximum number of ECMP next-hops per route associated with the resilient-hash prefix.",
            ge=1,
            le=64,
            title="Max ECMP",
        ),
    ]
    prefix: Annotated[
        str,
        Field(
            description="IPv4 or IPv6 prefix. Active routes in the FIB that exactly match this prefix or that are longer matches of this prefix are provided with resilient-hash programming.",
            title="Prefix",
        ),
    ]


class RouterSpecIpLoadBalancing(BaseModel):
    """
    IPv4 or IPv6 prefix. Active routes in the FIB that exactly match this prefix or that are longer matches of this prefix are provided with resilient-hash programming.
    """

    prefix: Annotated[
        Optional[List[RouterSpecIpLoadBalancingPrefixItem]],
        Field(
            description="IPv4 or IPv6 prefix. Active routes in the FIB that exactly match this prefix or that are longer matches of this prefix are provided with resilient-hash programming.",
            title="Prefix",
        ),
    ] = None


class RouterSpecRouteLeaking(BaseModel):
    """
    Route leaking controlled by routing policies in and out of the DefaultRouter.
    """

    exportPolicy: Annotated[
        Optional[str],
        Field(
            description="Reference to a Policy resource to use when evaluating route exports from the DefaultRouter.",
            title="Export Policy",
        ),
    ] = None
    importPolicy: Annotated[
        Optional[str],
        Field(
            description="Reference to a Policy resource to use when evaluating route imports into the DefaultRouter.",
            title="Import Policy",
        ),
    ] = None


class RouterSpec(BaseModel):
    """
    The Router enables the configuration and management of routing functions within a network. This resource allows for setting a unique Router ID, configuring VNIs and EVIs with options for automatic allocation, and defining import and export route targets. It also includes advanced configuration options such as BGP settings, including autonomous system numbers, AFI/SAFI options, and route advertisement preferences. Node selectors can be used to constrain the deployment of the router to specific nodes within the network.
    """

    bgp: Annotated[
        Optional[RouterSpecBgp],
        Field(description="BGP configuration.", title="BGP Configuration"),
    ] = None
    description: Annotated[
        Optional[str],
        Field(description="The description of the Router.", title="Description"),
    ] = None
    evi: Annotated[
        Optional[int],
        Field(
            description="EVI for the Router; leave blank for auto-allocation from EVI pool.",
            ge=1,
            le=65535,
            title="EVI",
        ),
    ] = None
    eviPool: Annotated[
        Optional[str],
        Field(
            description="Reference to EVI pool for auto-allocation.",
            title="EVI Allocation Pool",
        ),
    ] = "evi-pool"
    exportTarget: Annotated[
        Optional[str],
        Field(
            description="Export route target in 'target:N:N' format, if not specified, the default value taken as \"target:1:<evi>\".",
            pattern="^target.*$",
            title="Export Target",
        ),
    ] = None
    importTarget: Annotated[
        Optional[str],
        Field(
            description="Import route target in 'target:N:N' format, if not specified, the default value taken as \"target:1:<evi>\".",
            pattern="^target.*$",
            title="Import Target",
        ),
    ] = None
    ipLoadBalancing: Annotated[
        Optional[RouterSpecIpLoadBalancing],
        Field(
            description="IPv4 or IPv6 prefix. Active routes in the FIB that exactly match this prefix or that are longer matches of this prefix are provided with resilient-hash programming.",
            title="Prefix",
        ),
    ] = None
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Node selectors for deployment constraints.  If Nodes are selected, the Router will only be deployed on the Nodes selected, if left blank it will be deployed on all Nodes for which there are IRB or RoutedInterfaces referencing this Router.",
            title="Node Selector",
        ),
    ] = None
    routeLeaking: Annotated[
        Optional[RouterSpecRouteLeaking],
        Field(
            description="Route leaking controlled by routing policies in and out of the DefaultRouter.",
            title="Route Leaking",
        ),
    ] = None
    routerID: Annotated[
        Optional[str], Field(description="Router ID.", title="Router ID")
    ] = None
    tunnelIndexPool: Annotated[
        Optional[str],
        Field(
            description="Reference to tunnel index allocation pool.",
            title="Tunnel Index Pool",
        ),
    ] = "tunnel-index-pool"
    type: Annotated[
        Optional[Literal["SIMPLE", "EVPNVXLAN"]],
        Field(
            description="Select the type of Router.  Simple doesn't include any overlay control plane or dataplane properties (EVPN/VXLAN). EVPNVXLAN includes the properties needed to provision this Router over an IP Fabric.",
            title="Type",
        ),
    ] = "EVPNVXLAN"
    vni: Annotated[
        Optional[int],
        Field(
            description="VNI for the Router; leave blank for auto-allocation from VNI pool.",
            ge=1,
            le=16777215,
            title="VNI",
        ),
    ] = None
    vniPool: Annotated[
        Optional[str],
        Field(
            description="Reference to VNI pool for auto-allocation.",
            title="VNI Allocation Pool",
        ),
    ] = "vni-pool"


class RouterStatus(BaseModel):
    """
    RouterStatus defines the observed state of Router
    """

    bgpPeers: Annotated[
        Optional[List[str]],
        Field(
            description="List of BGPPeers attached to the router.", title="BGP Peers"
        ),
    ] = None
    evi: Annotated[
        Optional[int], Field(description="EVI in use for this Router.", title="EVI")
    ] = None
    exportTarget: Annotated[
        Optional[str],
        Field(
            description="Export route target for this Router.", title="Export Target"
        ),
    ] = None
    health: Annotated[
        Optional[int],
        Field(
            description="Indicates the health score of the Router.",
            title="Health Score",
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Explains the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    importTarget: Annotated[
        Optional[str],
        Field(
            description="Import route target for this Router.", title="Import Target"
        ),
    ] = None
    irbInterfaces: Annotated[
        Optional[List[str]],
        Field(
            description="List of IRBInterfaces attached to the router.",
            title="IRB Interfaces",
        ),
    ] = None
    lastChange: Annotated[
        Optional[AwareDatetime],
        Field(description="Timestamp of the last state change.", title="Last Change"),
    ] = None
    nodes: Annotated[
        Optional[List[str]],
        Field(
            description="List of nodes on which the Router is deployed.", title="Nodes"
        ),
    ] = None
    numNodes: Annotated[
        Optional[int],
        Field(
            description="Number of nodes on which the Router is configured.",
            title="Number of Nodes",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description="Operational state of the Router.", title="Operational State"
        ),
    ] = None
    routedInterfaces: Annotated[
        Optional[List[str]],
        Field(
            description="List of RoutedInterfaces attached to the router.",
            title="Routed Interfaces",
        ),
    ] = None
    tunnelIndex: Annotated[
        Optional[int],
        Field(description="Vxlan tunnel index in use.", title="Tunnel Index"),
    ] = None
    vni: Annotated[
        Optional[int], Field(description="VNI in use for this Router.", title="VNI")
    ] = None


RouterDeletedResourceEntry = BridgeDomainDeletedResourceEntry


class RouterDeletedResources(RootModel[List[RouterDeletedResourceEntry]]):
    root: List[RouterDeletedResourceEntry]


RouterMetadata = BridgeDomainMetadata


VLANSpecEgress = BridgeInterfaceSpecEgress


VLANSpecIngress = BridgeInterfaceSpecIngress


VLANSpecUplinkEgress = BridgeInterfaceSpecUplinkEgress


VLANSpecUplinkIngress = BridgeInterfaceSpecUplinkIngress


class VLANSpecUplink(BaseModel):
    """
    The Uplink between your access breakout switch and your leaf switch.
    """

    egress: Annotated[
        Optional[VLANSpecUplinkEgress],
        Field(
            description="Manages actions on traffic at Egress of the Local enpoint of the Uplink.",
            title="Egress",
        ),
    ] = None
    ingress: Annotated[
        Optional[VLANSpecUplinkIngress],
        Field(
            description="Manages actions on traffic at Ingress of the Local enpoint of the Uplink.",
            title="Ingress",
        ),
    ] = None
    uplinkSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Selects TopoLinks which connect a leaf switch to a breakout switch. This is the uplink between your access breakout switch and your leaf switch.  There can only be a single TopoLink between the access breakout switch and the leaf switch, if more than one TopoLink is present between two devices the transaction will fail.",
            title="Uplink Selector",
        ),
    ] = None
    uplinkVLANID: Annotated[
        Optional[str],
        Field(
            description="The VLAN ID to be utilized to isolate traffic from the VLAN on the access breakout switch to the leaf switch on the selected uplink TopoLink.",
            title="Uplink VLAN ID",
        ),
    ] = "pool"
    uplinkVLANPool: Annotated[
        Optional[str],
        Field(
            description="A VLAN from this pool will be utilized to isolate traffic from the VLAN on the access breakout switch to the leaf switch on the selected uplink TopoLink.",
            title="Uplink VLAN Pool",
        ),
    ] = None


class VLANSpec(BaseModel):
    """
    The VLAN enables the configuration and management of VLAN and their association with BridgeDomains. This resource allows for specifying the associated BridgeDomain, selecting interfaces based on label selectors, and configuring VLAN IDs with options for auto-allocation from a VLAN pool. It also supports advanced configurations such as ingress and egress traffic management, and overrides for MAC Duplication Detection actions when enabled in the associated BridgeDomain.
    """

    bridgeDomain: Annotated[
        str,
        Field(
            description="Reference to a BridgeDomain or SimpleBridgeDomain.",
            title="Bridge Domain",
        ),
    ]
    description: Annotated[
        Optional[str],
        Field(description="The description of the VLAN.", title="Description"),
    ] = None
    egress: Annotated[
        Optional[VLANSpecEgress],
        Field(description="Manages actions on traffic at Egress.", title="Egress"),
    ] = None
    ingress: Annotated[
        Optional[VLANSpecIngress],
        Field(description="Manages actions on traffic at Ingress.", title="Ingress"),
    ] = None
    interfaceSelector: Annotated[
        List[str],
        Field(
            description="Interfaces to use for attachment to this VLAN based on the label selector.  Selects Interfaces based on their associated labels.",
            title="Interface Selector",
        ),
    ]
    l2MTU: Annotated[
        Optional[int],
        Field(
            description="L2 MTU specifies the maximum sized Ethernet frame that can be transmitted on the subinterface. If a frame exceeds this size it is discarded. If the l2-mtu of the subinterface exceeds the port-mtu of the associated interface, the subinterface will remain operationally down.",
            ge=1450,
            le=9500,
            title="L2 MTU",
        ),
    ] = None
    macDuplicationDetectionAction: Annotated[
        Optional[
            Literal["Blackhole", "OperDown", "StopLearning", "UseBridgeDomainAction"]
        ],
        Field(
            description="If Mac Duplication Detection is enabled on the associated Bridge Domain, this property will override the MDD action set in the BridgeDomain.",
            title="MAC Duplication Detection Action",
        ),
    ] = None
    splitHorizonGroup: Annotated[
        Optional[str],
        Field(
            description="Name of the Split Horizon Group to be used for this VLAN.  All subinterfaces within this VLAN will be members of this Split Horizon Group.",
            title="Split Horizon Group",
        ),
    ] = None
    uplink: Annotated[
        Optional[VLANSpecUplink],
        Field(
            description="The Uplink between your access breakout switch and your leaf switch.",
            title="Uplink",
        ),
    ] = None
    vlanID: Annotated[
        Optional[str],
        Field(
            description="Single value between 1-4094 support, ranges supported in the format x-y,x-y, or the special keyword null, any, untagged or pool for auto allocation.",
            title="VLAN ID",
        ),
    ] = "pool"
    vlanPool: Annotated[
        Optional[str],
        Field(
            description='Reference to a VLAN pool to use for allocations. [default="vlan-pool"]',
            title="VLAN Pool",
        ),
    ] = None


VLANStatusSubInterface = BridgeInterfaceStatusSubInterface


class VLANStatus(BaseModel):
    health: Annotated[
        Optional[int],
        Field(description="Indicates the health score of the VNET.", title="Health"),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    lastChange: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The time when the state of the resource last changed.",
            title="Last Change",
        ),
    ] = None
    numSubInterfaces: Annotated[
        Optional[int],
        Field(
            description="Total number of sub-interfaces configured by the VNET.",
            title="Number of Sub Interfaces",
        ),
    ] = None
    numSubInterfacesOperDown: Annotated[
        Optional[int],
        Field(
            description="Total number of sub-interfaces configured by the VNET which are oper-down.",
            title="Number of Sub Interfaces Oper Down",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(description="Operational state of the VNET.", title="Operational State"),
    ] = None
    subInterfaces: Annotated[
        Optional[List[VLANStatusSubInterface]],
        Field(description="List of members in this Interface.", title="Sub Interfaces"),
    ] = None


VLANDeletedResourceEntry = BridgeDomainDeletedResourceEntry


class VLANDeletedResources(RootModel[List[VLANDeletedResourceEntry]]):
    root: List[VLANDeletedResourceEntry]


VLANMetadata = BridgeDomainMetadata


VirtualNetworkSpecBridgeDomainSpecL2proxyARPNDDynamicLearning = (
    BridgeDomainSpecL2proxyARPNDDynamicLearning
)


VirtualNetworkSpecBridgeDomainSpecL2proxyARPNDIpDuplication = (
    BridgeDomainSpecL2proxyARPNDIpDuplication
)


class VirtualNetworkSpecBridgeDomainSpecL2proxyARPND(BaseModel):
    """
    Enables / Disabled Proxy ARP / Proxy ND.
    """

    dynamicLearning: Annotated[
        Optional[VirtualNetworkSpecBridgeDomainSpecL2proxyARPNDDynamicLearning],
        Field(title="Dynamic Learning"),
    ] = None
    ipDuplication: Annotated[
        Optional[VirtualNetworkSpecBridgeDomainSpecL2proxyARPNDIpDuplication],
        Field(title="L2 Proxy ARP/ND IP Duplication Detection"),
    ] = None
    proxyARP: Annotated[
        Optional[bool], Field(description="Enables proxy ARP.", title="Proxy ARP")
    ] = False
    proxyND: Annotated[
        Optional[bool], Field(description="Enables proxy ND.", title="Proxy ND")
    ] = False
    tableSize: Annotated[
        Optional[int],
        Field(
            description="Maximum number of entries allowed in the proxy table of the bridge domain.",
            ge=1,
            le=8192,
            title="L2 Proxy ARP/ND Table Size",
        ),
    ] = 250


VirtualNetworkSpecBridgeDomainSpecMacDuplicationDetection = (
    BridgeDomainSpecMacDuplicationDetection
)


class VirtualNetworkSpecBridgeDomainSpec(BaseModel):
    """
    Specification of the BridgeDomain
    """

    description: Annotated[
        Optional[str],
        Field(description="The description of the BridgeDomain.", title="Description"),
    ] = None
    evi: Annotated[
        Optional[int],
        Field(
            description="EVI to use for this BridgeDomain, can be optionally left blank to have it automatically allocated using the EVI Pool.",
            ge=1,
            le=65535,
            title="EVI",
        ),
    ] = None
    eviPool: Annotated[
        Optional[str],
        Field(
            description="Reference to an EVI pool to use for allocations if EVI is left blank.",
            title="EVI Allocation Pool",
        ),
    ] = "evi-pool"
    exportTarget: Annotated[
        Optional[str],
        Field(
            description="Export route target in 'target:N:N' format, if not specified, the default value taken as \"target:1:<evi>\".",
            pattern="^target.*$",
            title="Export Target",
        ),
    ] = None
    importTarget: Annotated[
        Optional[str],
        Field(
            description="Import route target in 'target:N:N' format, if not specified, the default value taken as \"target:1:<evi>\".",
            pattern="^target.*$",
            title="Import Target",
        ),
    ] = None
    l2proxyARPND: Annotated[
        Optional[VirtualNetworkSpecBridgeDomainSpecL2proxyARPND],
        Field(
            description="Enables / Disabled Proxy ARP / Proxy ND.",
            title="L2 Proxy ARP/ND",
        ),
    ] = None
    macAging: Annotated[
        Optional[int],
        Field(
            description="Configurable aging time for dynamically learned mac addresses.",
            ge=60,
            le=86400,
            title="MAC Aging",
        ),
    ] = 300
    macDuplicationDetection: Annotated[
        Optional[VirtualNetworkSpecBridgeDomainSpecMacDuplicationDetection],
        Field(
            description="Enable or disable MAC duplication detection and resolution mechanisms.",
            title="MAC Duplication Detection",
        ),
    ] = None
    macLearning: Annotated[
        Optional[bool],
        Field(
            description="Enable MAC learning for this BridgeDomain.",
            title="MAC Learning",
        ),
    ] = True
    macLimit: Annotated[
        Optional[int],
        Field(
            description="Sets the maximum number of MAC entries accepted in the bridge table.",
            ge=1,
            title="MAC Limit",
        ),
    ] = None
    tunnelIndexPool: Annotated[
        Optional[str],
        Field(
            description="Reference to a tunnel index pool to use for allocations.",
            title="Tunnel Index Allocation Pool",
        ),
    ] = "tunnel-index-pool"
    type: Annotated[
        Optional[Literal["SIMPLE", "EVPNVXLAN"]],
        Field(
            description="Select the type of BridgeDomain.  Simple doesn't include any overlay control plane or dataplane properties (EVPN/VXLAN). EVPNVXLAN includes the properties needed to provision this BridgeDomain over an IP Fabric.",
            title="Type",
        ),
    ] = "EVPNVXLAN"
    vni: Annotated[
        Optional[int],
        Field(
            description="VNI to use for this BridgeDomain, can be optionally left blank to have it allocated using the VNI Pool.",
            ge=1,
            le=16777215,
            title="VNI",
        ),
    ] = None
    vniPool: Annotated[
        Optional[str],
        Field(
            description="Reference to a VNI pool to use for allocations if VNI is left blank.",
            title="VNI Allocation Pool",
        ),
    ] = "vni-pool"


class VirtualNetworkSpecBridgeDomain(BaseModel):
    name: Annotated[
        str,
        Field(description="The name of the BridgeDomain.", title="Bridge Domain Name"),
    ]
    spec: Annotated[
        VirtualNetworkSpecBridgeDomainSpec,
        Field(
            description="Specification of the BridgeDomain", title="Bridge Domain Spec"
        ),
    ]


VirtualNetworkSpecBridgeInterfaceSpecEgress = BridgeInterfaceSpecEgress


VirtualNetworkSpecBridgeInterfaceSpecIngress = BridgeInterfaceSpecIngress


VirtualNetworkSpecBridgeInterfaceSpecUplinkEgress = BridgeInterfaceSpecUplinkEgress


VirtualNetworkSpecBridgeInterfaceSpecUplinkIngress = BridgeInterfaceSpecUplinkIngress


class VirtualNetworkSpecBridgeInterfaceSpecUplink(BaseModel):
    """
    The Uplink between your access breakout switch and your leaf switch.
    """

    egress: Annotated[
        Optional[VirtualNetworkSpecBridgeInterfaceSpecUplinkEgress],
        Field(
            description="Manages actions on traffic at Egress of the Local enpoint of the Uplink.",
            title="Egress",
        ),
    ] = None
    ingress: Annotated[
        Optional[VirtualNetworkSpecBridgeInterfaceSpecUplinkIngress],
        Field(
            description="Manages actions on traffic at Ingress of the Local enpoint of the Uplink.",
            title="Ingress",
        ),
    ] = None
    uplinkSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Selects TopoLinks which connect a leaf switch to a breakout switch. This is the uplink between your access breakout switch and your leaf switch.  There can only be a single TopoLink between the access breakout switch and the leaf switch, if more than one TopoLink is present between two devices the transaction will fail.",
            title="Uplink Selector",
        ),
    ] = None
    uplinkVLANID: Annotated[
        Optional[str],
        Field(
            description="The VLAN ID to be utilized to isolate traffic from the VLAN on the access breakout switch to the leaf switch on the selected uplink TopoLink.",
            title="Uplink VLAN ID",
        ),
    ] = "pool"
    uplinkVLANPool: Annotated[
        Optional[str],
        Field(
            description="A VLAN from this pool will be utilized to isolate traffic from the VLAN on the access breakout switch to the leaf switch on the selected uplink TopoLink.",
            title="Uplink VLAN Pool",
        ),
    ] = None


class VirtualNetworkSpecBridgeInterfaceSpec(BaseModel):
    """
    Specification of the BridgeInterface
    """

    bridgeDomain: Annotated[
        str,
        Field(
            description="Reference to a BridgeDomain in which to attach the BridgeInterface.",
            title="Bridge Domain",
        ),
    ]
    description: Annotated[
        Optional[str],
        Field(
            description="The description of the BridgeInterface.", title="Description"
        ),
    ] = None
    egress: Annotated[
        Optional[VirtualNetworkSpecBridgeInterfaceSpecEgress],
        Field(
            description="Manages actions on traffic at Egress.", title="Egress Actions"
        ),
    ] = None
    ingress: Annotated[
        Optional[VirtualNetworkSpecBridgeInterfaceSpecIngress],
        Field(
            description="Manages actions on traffic at Ingress.",
            title="Ingress Actions",
        ),
    ] = None
    interface: Annotated[
        str,
        Field(
            description="Reference to an Interface resource to attach this BridgeInterface.",
            title="Interface",
        ),
    ]
    l2MTU: Annotated[
        Optional[int],
        Field(
            description="L2 MTU specifies the maximum sized Ethernet frame that can be transmitted on the subinterface. If a frame exceeds this size it is discarded. If the l2-mtu of the subinterface exceeds the port-mtu of the associated interface, the subinterface will remain operationally down.",
            ge=1450,
            le=9500,
            title="L2 MTU",
        ),
    ] = None
    macDuplicationDetectionAction: Annotated[
        Optional[
            Literal["Blackhole", "OperDown", "StopLearning", "UseBridgeDomainAction"]
        ],
        Field(
            description="Override for Mac Duplication Detection action if enabled in the associated BridgeDomain.",
            title="MAC Duplication Detection Action",
        ),
    ] = None
    splitHorizonGroup: Annotated[
        Optional[str],
        Field(
            description="Split Horizon Group to be used for this BridgeInterface. The subinterface within this BridgeInterface will be a member of this Split Horizon Group.",
            title="Split Horizon Group",
        ),
    ] = None
    uplink: Annotated[
        Optional[VirtualNetworkSpecBridgeInterfaceSpecUplink],
        Field(
            description="The Uplink between your access breakout switch and your leaf switch.",
            title="Uplink",
        ),
    ] = None
    vlanID: Annotated[
        str,
        Field(
            description="Single value between 1-4094 support, ranges supported in the format x-y,x-y, or the special keyword null, any, untagged or pool for auto allocation.",
            title="VLAN ID",
        ),
    ]


class VirtualNetworkSpecBridgeInterface(BaseModel):
    name: Annotated[
        str,
        Field(
            description="The name of the BridgeInterface.",
            title="Bridge Interface Name",
        ),
    ]
    spec: Annotated[
        VirtualNetworkSpecBridgeInterfaceSpec,
        Field(
            description="Specification of the BridgeInterface",
            title="Bridge Interface Spec",
        ),
    ]


VirtualNetworkSpecIrbInterfaceSpecBfd = IRBInterfaceSpecBfd


VirtualNetworkSpecIrbInterfaceSpecEgress = BridgeInterfaceSpecEgress


VirtualNetworkSpecIrbInterfaceSpecEvpnRouteAdvertisementType = (
    IRBInterfaceSpecEvpnRouteAdvertisementType
)


VirtualNetworkSpecIrbInterfaceSpecHostRoutePopulate = IRBInterfaceSpecHostRoutePopulate


VirtualNetworkSpecIrbInterfaceSpecIngress = BridgeInterfaceSpecIngress


VirtualNetworkSpecIrbInterfaceSpecIpAddressIpv4Address = (
    IRBInterfaceSpecIpAddressIpv4Address
)


VirtualNetworkSpecIrbInterfaceSpecIpAddressIpv6Address = (
    IRBInterfaceSpecIpAddressIpv6Address
)


class VirtualNetworkSpecIrbInterfaceSpecIpAddress(BaseModel):
    ipv4Address: Annotated[
        Optional[VirtualNetworkSpecIrbInterfaceSpecIpAddressIpv4Address],
        Field(
            description="IPv4 address in IP/mask form, e.g., 192.168.0.1/24.",
            title="IPv4 Addresses",
        ),
    ] = None
    ipv6Address: Annotated[
        Optional[VirtualNetworkSpecIrbInterfaceSpecIpAddressIpv6Address],
        Field(
            description="IPv6 address in IP/mask form, e.g., fc00::1/120.",
            title="IPv6 Addresses",
        ),
    ] = None
    node: Annotated[
        Optional[str],
        Field(
            description="Reference to a TopoNode resource, if not specified the IP address will be assigned to all nodes on which the IRB is deployed.  If specified the IP address will be assigned to the specified node.",
            title="Node",
        ),
    ] = None


VirtualNetworkSpecIrbInterfaceSpecIpv4Parameters = IRBInterfaceSpecIpv4Parameters


VirtualNetworkSpecIrbInterfaceSpecIpv6RouterAdvertisementPrefix = (
    IRBInterfaceSpecIpv6RouterAdvertisementPrefix
)


class VirtualNetworkSpecIrbInterfaceSpecIpv6RouterAdvertisement(BaseModel):
    currentHopLimit: Annotated[
        int,
        Field(
            description="The current hop limit to advertise in the router advertisement messages.",
            ge=0,
            le=255,
            title="Current Hop Limit",
        ),
    ]
    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable IPv6 router advertisements.",
            title="Enable Router Advertisements",
        ),
    ]
    ipMTU: Annotated[
        Optional[int],
        Field(
            description="The IP MTU to advertise in the router advertisement messages.",
            ge=1280,
            le=9486,
            title="IP MTU",
        ),
    ] = None
    managedConfigurationFlag: Annotated[
        bool,
        Field(
            description="Enable DHCPv6 for address configuration (M-bit).",
            title="Managed Configuration Flag",
        ),
    ]
    maxAdvertisementInterval: Annotated[
        int,
        Field(
            description="Maximum time between router advertisements (in seconds).",
            ge=4,
            le=1800,
            title="Maximum Advertisement Interval",
        ),
    ]
    minAdvertisementInterval: Annotated[
        int,
        Field(
            description="Minimum time between router advertisements (in seconds).",
            ge=3,
            le=1350,
            title="Minimum Advertisement Interval",
        ),
    ]
    otherConfigurationFlag: Annotated[
        bool,
        Field(
            description="Enable DHCPv6 for other configuration (O-bit).",
            title="Other Configuration Flag",
        ),
    ]
    prefixes: Annotated[
        Optional[List[VirtualNetworkSpecIrbInterfaceSpecIpv6RouterAdvertisementPrefix]],
        Field(
            description="IPv6 prefixes to advertise in router advertisements.",
            title="Prefixes",
        ),
    ] = None
    reachableTime: Annotated[
        Optional[int],
        Field(
            description="Time in milliseconds for Neighbor Unreachability Detection.",
            ge=0,
            le=3600000,
            title="Reachable Time",
        ),
    ] = 0
    retransmitTime: Annotated[
        int,
        Field(
            description="Time in milliseconds between retransmitted NS messages.",
            ge=0,
            le=1800000,
            title="Retransmit Time",
        ),
    ]
    routerLifetime: Annotated[
        int,
        Field(
            description="Router lifetime in seconds for default gateway.",
            ge=0,
            le=9000,
            title="Router Lifetime",
        ),
    ]


VirtualNetworkSpecIrbInterfaceSpecL3ProxyARPND = IRBInterfaceSpecL3ProxyARPND


VirtualNetworkSpecIrbInterfaceSpecVirtualIPDiscoveryItem = (
    IRBInterfaceSpecVirtualIPDiscoveryItem
)


class VirtualNetworkSpecIrbInterfaceSpec(BaseModel):
    """
    Specification of the IrbInterface
    """

    anycastGatewayMAC: Annotated[
        Optional[str],
        Field(
            description="The gateway MAC to use on the anycast address, if left empty the node will automatically assign one.",
            title="Anycast GW MAC",
        ),
    ] = None
    arpTimeout: Annotated[
        Optional[int],
        Field(
            description="Duration of time that dynamic ARP entries remain in the ARP cache before they expire.",
            title="ARP Timeout",
        ),
    ] = 14400
    bfd: Annotated[
        Optional[VirtualNetworkSpecIrbInterfaceSpecBfd],
        Field(description="Enable BFD on the IRBInterface.", title="BFD Configuration"),
    ] = None
    bridgeDomain: Annotated[
        str, Field(description="Reference to a BridgeDomain.", title="Bridge Domain")
    ]
    description: Annotated[
        Optional[str],
        Field(description="The description of the IRBInterface.", title="Description"),
    ] = None
    egress: Annotated[
        Optional[VirtualNetworkSpecIrbInterfaceSpecEgress],
        Field(
            description="Manages actions on traffic at Egress.", title="Egress Actions"
        ),
    ] = None
    evpnRouteAdvertisementType: Annotated[
        Optional[VirtualNetworkSpecIrbInterfaceSpecEvpnRouteAdvertisementType],
        Field(
            description="Controls the type of ARP/ND entries to advertise.",
            title="EVPN Route Advertisement Type",
        ),
    ] = None
    hostRoutePopulate: Annotated[
        Optional[VirtualNetworkSpecIrbInterfaceSpecHostRoutePopulate],
        Field(
            description="Configures host route population based on ARP entries.",
            title="Host Route Population",
        ),
    ] = None
    ingress: Annotated[
        Optional[VirtualNetworkSpecIrbInterfaceSpecIngress],
        Field(
            description="Manages actions on traffic at Ingress.",
            title="Ingress Actions",
        ),
    ] = None
    ipAddresses: Annotated[
        Optional[List[VirtualNetworkSpecIrbInterfaceSpecIpAddress]],
        Field(title="IP Addresses"),
    ] = None
    ipMTU: Annotated[
        Optional[int],
        Field(
            description="IP MTU for the IRBInterface [default=1500].",
            ge=1280,
            le=9486,
            title="IP MTU",
        ),
    ] = 1500
    ipv4Parameters: Annotated[
        Optional[VirtualNetworkSpecIrbInterfaceSpecIpv4Parameters],
        Field(title="IPv4-specific Parameters"),
    ] = None
    ipv6RouterAdvertisement: Annotated[
        Optional[VirtualNetworkSpecIrbInterfaceSpecIpv6RouterAdvertisement],
        Field(title="IPv6 Router Advertisement"),
    ] = None
    l3ProxyARPND: Annotated[
        Optional[VirtualNetworkSpecIrbInterfaceSpecL3ProxyARPND],
        Field(
            description="L3 Proxy ARP and ND configuration.", title="L3 Proxy ARP/ND"
        ),
    ] = None
    learnUnsolicited: Annotated[
        Optional[Literal["BOTH", "GLOBAL", "LINK-LOCAL", "NONE"]],
        Field(
            description="Enable or disable learning of unsolicited ARPs.",
            title="Learn Unsolicited ARPs",
        ),
    ] = "NONE"
    router: Annotated[str, Field(description="Reference to a Router.", title="Router")]
    unnumbered: Annotated[
        Optional[Literal["IPV6"]],
        Field(
            description="Enables the use of unnumbered interfaces on the IRBInterface.  If IPv6 is specified, no IP address are configured on the sub-interface and only the link local address will be used.  If any IP addresses are specified for either IPv4 or IPv6 that will take precedence and IPs will be assigned to the interfaces.(Deprecated, Use IPv6RouterAdvertisement)",
            title="Unnumbered",
        ),
    ] = None
    virtualIPDiscovery: Annotated[
        Optional[List[VirtualNetworkSpecIrbInterfaceSpecVirtualIPDiscoveryItem]],
        Field(
            description="Configuration for Virtual IP discovery on the interface.",
            title="Virtual IP Discovery",
        ),
    ] = None


class VirtualNetworkSpecIrbInterface(BaseModel):
    name: Annotated[
        str,
        Field(description="The name of the IrbInterface.", title="IRB Interface Name"),
    ]
    spec: Annotated[
        VirtualNetworkSpecIrbInterfaceSpec,
        Field(
            description="Specification of the IrbInterface", title="IRB Interface Spec"
        ),
    ]


class VirtualNetworkSpecProtocolsBgpBgpGroupSpecAsPathOptionsRemovePrivateAS(BaseModel):
    """
    Options for removing private AS numbers (2-byte and 4-byte) from the advertised AS path towards all peers.
    """

    ignorePeerAS: Annotated[
        bool,
        Field(
            description="If set to true then do not delete or replace a private AS number that is the same as the peer AS number.",
            title="Ignore Peer AS",
        ),
    ]
    leadingOnly: Annotated[
        bool,
        Field(
            description="If set to true then only delete or replace private AS numbers that appear before the first occurrence of a non-private ASN in the sequence of most recent ASNs in the AS path.",
            title="Leading Only",
        ),
    ]
    removePrivateASMode: Annotated[
        Literal["DISABLED", "REPLACE", "DELETE"],
        Field(
            description="The method by which private AS numbers are removed from the advertised AS_PATH attribute.",
            title="Remove Private AS Mode",
        ),
    ]


class VirtualNetworkSpecProtocolsBgpBgpGroupSpecAsPathOptions(BaseModel):
    """
    AS Path Options
    """

    allowOwnAS: Annotated[
        int,
        Field(
            description="The maximum number of times the global AS number or a local AS number of the BGP instance can appear in any received AS_PATH before it is considered a loop and considered invalid.",
            ge=0,
            le=255,
            title="Allow Own AS",
        ),
    ]
    removePrivateAS: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsBgpBgpGroupSpecAsPathOptionsRemovePrivateAS
        ],
        Field(
            description="Options for removing private AS numbers (2-byte and 4-byte) from the advertised AS path towards all peers.",
            title="Remove Private AS",
        ),
    ] = None


class VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv4UnicastPrefixLimitPrefixLimitAccepted(
    BaseModel
):
    logOnly: Annotated[
        Optional[bool],
        Field(
            description="Defines the action to take when the maximum number of prefixes is exceeded. Session is reset if set to false, otherwise only a warning is logged.",
            title="Log Only",
        ),
    ] = None
    maxReceivedRoutes: Annotated[
        Optional[int],
        Field(
            description="Maximum number of prefixes allowed to be received from the neighbor, counting only accepted routes.",
            ge=1,
            le=4294967295,
            title="Max Received Routes",
        ),
    ] = None
    warningThreshold: Annotated[
        Optional[int],
        Field(
            description="A percentage of the maximum number of prefixes that can be accepted before a warning is logged.",
            ge=1,
            le=100,
            title="Warning Threshold Percentage",
        ),
    ] = None


class VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv4UnicastPrefixLimitPrefixLimitReceived(
    BaseModel
):
    logOnly: Annotated[
        Optional[bool],
        Field(
            description="Defines the action to take when the maximum number of prefixes is exceeded. Session is reset if set to false, otherwise only a warning is logged.",
            title="Log Only",
        ),
    ] = None
    maxReceivedRoutes: Annotated[
        Optional[int],
        Field(
            description="Maximum number of prefixes allowed to be received from the neighbor, counting all routes (accepted and rejected by import policies).",
            ge=1,
            le=4294967295,
            title="Max Received Routes",
        ),
    ] = None
    warningThreshold: Annotated[
        Optional[int],
        Field(
            description="A percentage of the maximum number of prefixes that can be received before a warning is logged.",
            ge=1,
            le=100,
            title="Warning Threshold Percentage",
        ),
    ] = None


class VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv4UnicastPrefixLimit(BaseModel):
    prefixLimitAccepted: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv4UnicastPrefixLimitPrefixLimitAccepted
        ],
        Field(title="Prefix Limit Accepted"),
    ] = None
    prefixLimitReceived: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv4UnicastPrefixLimitPrefixLimitReceived
        ],
        Field(title="Prefix Limit Received"),
    ] = None


class VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv4Unicast(BaseModel):
    """
    Parameters relating to the IPv4 unicast AFI/SAFI.
    """

    advertiseIPV6NextHops: Annotated[
        Optional[bool],
        Field(
            description="Enables advertisement of IPv4 Unicast routes with IPv6 next-hops to peers.",
            title="Advertise IPv6 Next Hops",
        ),
    ] = None
    enabled: Annotated[
        Optional[bool],
        Field(description="Enables the IPv4 unicast AFISAFI.", title="Enabled"),
    ] = None
    prefixLimit: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv4UnicastPrefixLimit],
        Field(title="Prefix Limit"),
    ] = None
    receiveIPV6NextHops: Annotated[
        Optional[bool],
        Field(
            description="Enables the advertisement of the RFC 5549 capability to receive IPv4 routes with IPv6 next-hops.",
            title="Receive IPv6 Next Hops",
        ),
    ] = None


VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv6UnicastPrefixLimitPrefixLimitAccepted = (
    VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv4UnicastPrefixLimitPrefixLimitAccepted
)


VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv6UnicastPrefixLimitPrefixLimitReceived = (
    VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv4UnicastPrefixLimitPrefixLimitReceived
)


class VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv6UnicastPrefixLimit(BaseModel):
    prefixLimitAccepted: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv6UnicastPrefixLimitPrefixLimitAccepted
        ],
        Field(title="Prefix Limit Accepted"),
    ] = None
    prefixLimitReceived: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv6UnicastPrefixLimitPrefixLimitReceived
        ],
        Field(title="Prefix Limit Received"),
    ] = None


class VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv6Unicast(BaseModel):
    """
    Parameters relating to the IPv6 unicast AFI/SAFI.
    """

    enabled: Annotated[
        Optional[bool],
        Field(description="Enables the IPv6 unicast AFISAFI", title="Enabled"),
    ] = None
    prefixLimit: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv6UnicastPrefixLimit],
        Field(title="Prefix Limit"),
    ] = None


class VirtualNetworkSpecProtocolsBgpBgpGroupSpecLocalAS(BaseModel):
    """
    The local autonomous system number advertised to peers.
    """

    autonomousSystem: Annotated[
        int,
        Field(
            description="Local Autonomous System number.",
            ge=1,
            le=4294967295,
            title="Local Autonomous System",
        ),
    ]
    prependGlobalAS: Annotated[
        Optional[bool],
        Field(
            description="When set to true, the global ASN value is prepended to the AS path in outbound routes towards each BGP peer.",
            title="Prepend Global Autonomous System",
        ),
    ] = None
    prependLocalAS: Annotated[
        Optional[bool],
        Field(
            description="When set to true, the local AS value is prepended to the AS path of inbound routes from each EBGP peer.",
            title="Prepend Local Autonomous System",
        ),
    ] = None


class VirtualNetworkSpecProtocolsBgpBgpGroupSpecPeerAS(BaseModel):
    """
    The autonomous system number expected from peers.
    """

    autonomousSystem: Annotated[
        int,
        Field(
            description="Local Autonomous System number.",
            ge=1,
            le=4294967295,
            title="Peer Autonomous System",
        ),
    ]


class VirtualNetworkSpecProtocolsBgpBgpGroupSpecSendDefaultRoute(BaseModel):
    """
    Options for controlling the generation of default routes towards BGP peers.
    """

    addressFamily: Annotated[
        List[Literal["IPV4-UNICAST", "IPV6-UNICAST"]],
        Field(
            description="Enables the sending of a synthetically generated default IPv4 or IPV6 route to each peer.",
            title="Address Families",
        ),
    ]
    exportPolicy: Annotated[
        Optional[str],
        Field(
            description="Reference to a Policy that should be applied to the advertised default routes, in order to set their attributes to non-default values.",
            title="Export Policy",
        ),
    ] = None


class VirtualNetworkSpecProtocolsBgpBgpGroupSpecTimers(BaseModel):
    """
    Timer configurations
    """

    connectRetry: Annotated[
        Optional[int],
        Field(
            description="The time interval in seconds between successive attempts to establish a session with a peer.",
            ge=1,
            le=65535,
            title="Connect Retry",
        ),
    ] = None
    holdTime: Annotated[
        Optional[int],
        Field(
            description="The hold-time interval in seconds that the router proposes to the peer in its OPEN message.",
            ge=0,
            le=65535,
            title="Hold Time",
        ),
    ] = None
    keepAlive: Annotated[
        Optional[int],
        Field(
            description="The interval in seconds between successive keepalive messages sent to the peer.",
            ge=0,
            le=21845,
            title="Keep Alive",
        ),
    ] = None
    minimumAdvertisementInterval: Annotated[
        Optional[int],
        Field(
            description="The value assigned to the MinRouteAdvertisementIntervalTimer of RFC 4271, for both EBGP and IBGP sessions.",
            ge=1,
            le=255,
            title="Minimum Advertisement Interval",
        ),
    ] = None


class VirtualNetworkSpecProtocolsBgpBgpGroupSpec(BaseModel):
    """
    Specification of the BgpGroup
    """

    asPathOptions: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpGroupSpecAsPathOptions],
        Field(description="AS Path Options", title="AS Path Options"),
    ] = None
    bfd: Annotated[
        Optional[bool],
        Field(
            description="Enable or disable Bi-forward Forwarding Detection (BFD) with fast failover.",
            title="BFD",
        ),
    ] = None
    client: Annotated[
        Optional[bool],
        Field(
            description="When set to true, all configured and dynamic BGP peers are considered RR clients.",
            title="Route Reflector Client",
        ),
    ] = None
    clusterID: Annotated[
        Optional[str],
        Field(
            description="Enables route reflect client and sets the cluster ID.",
            title="Cluster ID",
        ),
    ] = None
    description: Annotated[
        Optional[str],
        Field(
            description="Sets the description on the BGP group.", title="Description"
        ),
    ] = None
    exportPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes advertised to peers.",
            title="Export Policy",
        ),
    ] = None
    grStaleRouteTime: Annotated[
        Optional[int],
        Field(
            description="Enables Graceful Restart on the peer and sets the stale route time.",
            ge=1,
            le=3600,
            title="GR Stale Route Time",
        ),
    ] = None
    importPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes received from peers.",
            title="Import Policy",
        ),
    ] = None
    ipv4Unicast: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv4Unicast],
        Field(
            description="Parameters relating to the IPv4 unicast AFI/SAFI.",
            title="IPv4 Unicast",
        ),
    ] = None
    ipv6Unicast: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv6Unicast],
        Field(
            description="Parameters relating to the IPv6 unicast AFI/SAFI.",
            title="IPv6 Unicast",
        ),
    ] = None
    keychain: Annotated[
        Optional[str],
        Field(
            description="Reference to a Keychain resource that will be used for authentication with the BGP peer.",
            title="Keychain",
        ),
    ] = None
    localAS: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpGroupSpecLocalAS],
        Field(
            description="The local autonomous system number advertised to peers.",
            title="Local AS",
        ),
    ] = None
    localPreference: Annotated[
        Optional[int],
        Field(
            description="Local Preference attribute added to received routes from the BGP peers, also sets local preference for generated routes.",
            ge=0,
            le=4294967295,
            title="Local Preference",
        ),
    ] = None
    multiHopMaxHop: Annotated[
        Optional[int],
        Field(
            description="Enable multihop for eBGP peers and sets the maximum number of hops allowed.",
            ge=1,
            le=255,
            title="Multihop Max Hop Count",
        ),
    ] = None
    nextHopSelf: Annotated[
        Optional[bool],
        Field(
            description="When set to true, the next-hop in all IPv4-unicast, IPv6-unicast and EVPN BGP routes advertised to the peer is set to the local-address.",
            title="Next Hop Self",
        ),
    ] = None
    peerAS: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpGroupSpecPeerAS],
        Field(
            description="The autonomous system number expected from peers.",
            title="Peer AS",
        ),
    ] = None
    sendCommunityLarge: Annotated[
        Optional[bool],
        Field(
            description="When false, all large (12 byte) BGP communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Large",
        ),
    ] = None
    sendCommunityStandard: Annotated[
        Optional[bool],
        Field(
            description="When false, all standard (4 byte) communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Standard",
        ),
    ] = None
    sendDefaultRoute: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpGroupSpecSendDefaultRoute],
        Field(
            description="Options for controlling the generation of default routes towards BGP peers.",
            title="Send Default Route",
        ),
    ] = None
    timers: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpGroupSpecTimers],
        Field(description="Timer configurations", title="Timers"),
    ] = None


class VirtualNetworkSpecProtocolsBgpBgpGroup(BaseModel):
    name: Annotated[
        str, Field(description="The name of the BgpGroup.", title="BGP Group Name")
    ]
    spec: Annotated[
        VirtualNetworkSpecProtocolsBgpBgpGroupSpec,
        Field(description="Specification of the BgpGroup", title="BGP Group Spec"),
    ]


VirtualNetworkSpecProtocolsBgpBgpPeerSpecAsPathOptionsRemovePrivateAS = (
    VirtualNetworkSpecProtocolsBgpBgpGroupSpecAsPathOptionsRemovePrivateAS
)


class VirtualNetworkSpecProtocolsBgpBgpPeerSpecAsPathOptions(BaseModel):
    """
    AS Path Options
    """

    allowOwnAS: Annotated[
        int,
        Field(
            description="The maximum number of times the global AS number or a local AS number of the BGP instance can appear in any received AS_PATH before it is considered a loop and considered invalid.",
            ge=0,
            le=255,
            title="Allow Own AS",
        ),
    ]
    removePrivateAS: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpPeerSpecAsPathOptionsRemovePrivateAS],
        Field(
            description="Options for removing private AS numbers (2-byte and 4-byte) from the advertised AS path towards all peers.",
            title="Remove Private AS",
        ),
    ] = None


VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv4UnicastPrefixLimitPrefixLimitAccepted = (
    VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv4UnicastPrefixLimitPrefixLimitAccepted
)


VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv4UnicastPrefixLimitPrefixLimitReceived = (
    VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv4UnicastPrefixLimitPrefixLimitReceived
)


class VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv4UnicastPrefixLimit(BaseModel):
    prefixLimitAccepted: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv4UnicastPrefixLimitPrefixLimitAccepted
        ],
        Field(title="Prefix Limit Accepted"),
    ] = None
    prefixLimitReceived: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv4UnicastPrefixLimitPrefixLimitReceived
        ],
        Field(title="Prefix Limit Received"),
    ] = None


class VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv4Unicast(BaseModel):
    """
    Parameters relating to the IPv4 unicast AFI/SAFI.
    """

    advertiseIPV6NextHops: Annotated[
        Optional[bool],
        Field(
            description="Enables advertisement of IPv4 Unicast routes with IPv6 next-hops to peers.",
            title="Advertise IPv6 Next Hops",
        ),
    ] = None
    enabled: Annotated[
        Optional[bool],
        Field(description="Enables the IPv4 unicast AFISAFI.", title="Enabled"),
    ] = None
    prefixLimit: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv4UnicastPrefixLimit],
        Field(title="Prefix Limit"),
    ] = None
    receiveIPV6NextHops: Annotated[
        Optional[bool],
        Field(
            description="Enables the advertisement of the RFC 5549 capability to receive IPv4 routes with IPv6 next-hops.",
            title="Receive IPv6 Next Hops",
        ),
    ] = None


VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv6UnicastPrefixLimitPrefixLimitAccepted = (
    VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv4UnicastPrefixLimitPrefixLimitAccepted
)


VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv6UnicastPrefixLimitPrefixLimitReceived = (
    VirtualNetworkSpecProtocolsBgpBgpGroupSpecIpv4UnicastPrefixLimitPrefixLimitReceived
)


class VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv6UnicastPrefixLimit(BaseModel):
    prefixLimitAccepted: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv6UnicastPrefixLimitPrefixLimitAccepted
        ],
        Field(title="Prefix Limit Accepted"),
    ] = None
    prefixLimitReceived: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv6UnicastPrefixLimitPrefixLimitReceived
        ],
        Field(title="Prefix Limit Received"),
    ] = None


class VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv6Unicast(BaseModel):
    """
    Parameters relating to the IPv6 unicast AFI/SAFI.
    """

    enabled: Annotated[
        Optional[bool],
        Field(description="Enables the IPv6 unicast AFISAFI", title="Enabled"),
    ] = None
    prefixLimit: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv6UnicastPrefixLimit],
        Field(title="Prefix Limit"),
    ] = None


VirtualNetworkSpecProtocolsBgpBgpPeerSpecLocalAS = (
    VirtualNetworkSpecProtocolsBgpBgpGroupSpecLocalAS
)


VirtualNetworkSpecProtocolsBgpBgpPeerSpecPeerAS = (
    VirtualNetworkSpecProtocolsBgpBgpGroupSpecPeerAS
)


VirtualNetworkSpecProtocolsBgpBgpPeerSpecSendDefaultRoute = (
    VirtualNetworkSpecProtocolsBgpBgpGroupSpecSendDefaultRoute
)


VirtualNetworkSpecProtocolsBgpBgpPeerSpecTimers = (
    VirtualNetworkSpecProtocolsBgpBgpGroupSpecTimers
)


class VirtualNetworkSpecProtocolsBgpBgpPeerSpec(BaseModel):
    """
    Specification of the BgpPeer
    """

    asPathOptions: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpPeerSpecAsPathOptions],
        Field(description="AS Path Options", title="AS Path Options"),
    ] = None
    bfd: Annotated[
        Optional[bool],
        Field(
            description="Enable or disable Bi-forward Forwarding Detection (BFD) with fast failover.",
            title="BFD",
        ),
    ] = None
    client: Annotated[
        Optional[bool],
        Field(
            description="When set to true, all configured and dynamic BGP peers are considered RR clients.",
            title="Route Reflector Client",
        ),
    ] = None
    clusterID: Annotated[
        Optional[str],
        Field(
            description="Enables route reflect client and sets the cluster ID.",
            title="Cluster ID",
        ),
    ] = None
    description: Annotated[
        Optional[str],
        Field(description="Sets the description on the BGP peer", title="Description"),
    ] = None
    dynamicNeighbor: Annotated[
        Optional[bool],
        Field(
            description="When set to true the Interface is added to the dynamic-neighbor list for dynamic peering.",
            title="Dynamic Neighbor",
        ),
    ] = False
    dynamicNeighborAllowedPeerAS: Annotated[
        Optional[List[int]],
        Field(
            description="The autonomous system numbers allowed from peers if dynamic peering is enabled.",
            title="Dynamic Neighbor Allowed Peer AS",
        ),
    ] = None
    exportPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes advertised to peers.",
            title="Export Policy",
        ),
    ] = None
    grStaleRouteTime: Annotated[
        Optional[int],
        Field(
            description="Enables Graceful Restart on the peer and sets the stale route time.",
            ge=1,
            le=3600,
            title="GR Stale Route Time",
        ),
    ] = None
    group: Annotated[
        str,
        Field(
            description="Reference to a BGPGroup. When present this BGP peer will be added to the BGP group",
            title="Group",
        ),
    ]
    importPolicy: Annotated[
        Optional[List[str]],
        Field(
            description="Reference to a Policy CR that will be used to filter routes received from peers.",
            title="Import Policy",
        ),
    ] = None
    interface: Annotated[
        str,
        Field(
            description="Reference to a RoutedInterface or IrbInterface resource whose IP will be used as a source IP for the BGP session.",
            title="Interface Reference",
        ),
    ]
    interfaceKind: Annotated[
        Literal["ROUTEDINTERFACE", "IRBINTERFACE"],
        Field(
            description="InterfaceReference type defines whether the provided Reference is a RoutedInterface or IrbInterface.",
            title="Interface Reference Type",
        ),
    ]
    ipv4Unicast: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv4Unicast],
        Field(
            description="Parameters relating to the IPv4 unicast AFI/SAFI.",
            title="IPv4 Unicast",
        ),
    ] = None
    ipv6Unicast: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpPeerSpecIpv6Unicast],
        Field(
            description="Parameters relating to the IPv6 unicast AFI/SAFI.",
            title="IPv6 Unicast",
        ),
    ] = None
    keychain: Annotated[
        Optional[str],
        Field(
            description="Reference to a Keychain resource that will be used for authentication with the BGP peer.",
            title="Keychain",
        ),
    ] = None
    localAS: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpPeerSpecLocalAS],
        Field(
            description="The local autonomous system number advertised to peers.",
            title="Local AS",
        ),
    ] = None
    localPreference: Annotated[
        Optional[int],
        Field(
            description="Local Preference attribute added to received routes from the BGP peers, also sets local preference for generated routes.",
            ge=0,
            le=4294967295,
            title="Local Preference",
        ),
    ] = None
    multiHopMaxHop: Annotated[
        Optional[int],
        Field(
            description="Enable multihop for eBGP peers and sets the maximum number of hops allowed.",
            ge=1,
            le=255,
            title="Multihop Max Hop Count",
        ),
    ] = None
    nextHopSelf: Annotated[
        Optional[bool],
        Field(
            description="When set to true, the next-hop in all IPv4-unicast, IPv6-unicast and EVPN BGP routes advertised to the peer is set to the local-address.",
            title="Next Hop Self",
        ),
    ] = None
    node: Annotated[
        Optional[str],
        Field(
            description="Node on which to configure the BGP peer. This node must be one of the nodes on which the IRBInterface is configured.  When left blank or if the node is not part of the IRBInterface, the peer will not be deployed. Ignored for RoutedInterfaces.",
            title="Node",
        ),
    ] = None
    peerAS: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpPeerSpecPeerAS],
        Field(
            description="The autonomous system number expected from peers.",
            title="Peer AS",
        ),
    ] = None
    peerIP: Annotated[
        Optional[str],
        Field(
            description="Peer IP to which the peering session will be established.",
            title="Peer IP",
        ),
    ] = None
    sendCommunityLarge: Annotated[
        Optional[bool],
        Field(
            description="When false, all large (12 byte) BGP communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Large",
        ),
    ] = None
    sendCommunityStandard: Annotated[
        Optional[bool],
        Field(
            description="When false, all standard (4 byte) communities from all outbound routes advertised to the peer are stripped.",
            title="Send Community Standard",
        ),
    ] = None
    sendDefaultRoute: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpPeerSpecSendDefaultRoute],
        Field(
            description="Options for controlling the generation of default routes towards BGP peers.",
            title="Send Default Route",
        ),
    ] = None
    timers: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgpBgpPeerSpecTimers],
        Field(description="Timer configurations", title="Timers"),
    ] = None


class VirtualNetworkSpecProtocolsBgpBgpPeer(BaseModel):
    name: Annotated[
        str, Field(description="The name of the BgpPeer.", title="BGP Peer Name")
    ]
    spec: Annotated[
        VirtualNetworkSpecProtocolsBgpBgpPeerSpec,
        Field(description="Specification of the BgpPeer", title="BGP Peer Spec"),
    ]


class VirtualNetworkSpecProtocolsBgp(BaseModel):
    """
    BGP Protocol.
    """

    bgpGroups: Annotated[
        Optional[List[VirtualNetworkSpecProtocolsBgpBgpGroup]],
        Field(description="List of BgpGroups. [emits=BGPGroup]", title="BGP Groups"),
    ] = None
    bgpPeers: Annotated[
        Optional[List[VirtualNetworkSpecProtocolsBgpBgpPeer]],
        Field(description="List of BgpPeers [emits=BGPPeer]", title="BGP Peers"),
    ] = None


class VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecDefaultActionBgpCommunitySet(
    BaseModel
):
    """
    Modify BGP communities associated with the route using hybrid Community Sets.
    """

    add: Annotated[
        Optional[List[str]],
        Field(
            description="List of community sets to add to the route.",
            max_length=1,
            title="Add Communities",
        ),
    ] = None
    remove: Annotated[
        Optional[List[str]],
        Field(
            description="List of community sets to remove from the route.",
            max_length=1,
            title="Remove Communities",
        ),
    ] = None
    replace: Annotated[
        Optional[List[str]],
        Field(
            description="List of community sets to replace the existing communities with. Cannot be combined with Add or Remove.",
            max_length=1,
            title="Replace Communities",
        ),
    ] = None


class VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecDefaultActionBgpMed(
    BaseModel
):
    """
    Set a new MED value.
    """

    numericalValue: Annotated[
        Optional[int],
        Field(
            description="Fixed numerical value to set or add/subtract.",
            ge=0,
            le=4294967295,
            title="MED Value",
        ),
    ] = None
    operation: Annotated[
        Optional[Literal["Set", "Add", "Subtract"]],
        Field(
            description="The operation to perform on the MED value.", title="Operation"
        ),
    ] = None
    valueType: Annotated[
        Optional[Literal["Fixed", "IGP"]],
        Field(
            description="Use a fixed value or an IGP metric to adjust the MED.",
            title="Value Type",
        ),
    ] = None


class VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecDefaultActionBgp(BaseModel):
    """
    Actions related to the BGP protocol.
    """

    asPathPrepend: Annotated[
        Optional[int],
        Field(
            description="AS number to prepend to the AS Path attributes.",
            ge=1,
            le=4294967295,
            title="AS Path Prepend",
        ),
    ] = None
    asPathRemove: Annotated[
        Optional[bool],
        Field(
            description="Clear the AS path to make it empty.", title="AS Path Remove"
        ),
    ] = None
    asPathReplace: Annotated[
        Optional[List[int]],
        Field(
            description="Replace the existing AS path with a new AS_SEQUENCE containing the listed AS numbers.",
            title="AS Path Replace",
        ),
    ] = None
    communitySet: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecDefaultActionBgpCommunitySet
        ],
        Field(
            description="Modify BGP communities associated with the route using hybrid Community Sets.",
            title="Modify Communities",
        ),
    ] = None
    localPreference: Annotated[
        Optional[int],
        Field(
            description="Set a new LOCAL_PREF value for matching BGP routes.",
            ge=0,
            le=4294967295,
            title="Set Local Preference",
        ),
    ] = None
    med: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecDefaultActionBgpMed
        ],
        Field(description="Set a new MED value.", title="Set MED"),
    ] = None
    setOrigin: Annotated[
        Optional[Literal["egp", "igp", "incomplete"]],
        Field(
            description="Set a new ORIGIN attribute for matching BGP routes.",
            title="Set Origin",
        ),
    ] = None


class VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecDefaultAction(BaseModel):
    """
    The default action to apply if no other actions are defined.
    """

    bgp: Annotated[
        Optional[VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecDefaultActionBgp],
        Field(description="Actions related to the BGP protocol.", title="BGP"),
    ] = None
    policyResult: Annotated[
        Optional[Literal["accept", "reject", "NextPolicy", "NextStatement"]],
        Field(description="Final disposition for the route.", title="Policy Result"),
    ] = None


VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItemActionBgpCommunitySet = VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecDefaultActionBgpCommunitySet


VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItemActionBgpMed = (
    VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecDefaultActionBgpMed
)


class VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItemActionBgp(
    BaseModel
):
    """
    Actions related to the BGP protocol.
    """

    asPathPrepend: Annotated[
        Optional[int],
        Field(
            description="AS number to prepend to the AS Path attributes.",
            ge=1,
            le=4294967295,
            title="AS Path Prepend",
        ),
    ] = None
    asPathRemove: Annotated[
        Optional[bool],
        Field(
            description="Clear the AS path to make it empty.", title="AS Path Remove"
        ),
    ] = None
    asPathReplace: Annotated[
        Optional[List[int]],
        Field(
            description="Replace the existing AS path with a new AS_SEQUENCE containing the listed AS numbers.",
            title="AS Path Replace",
        ),
    ] = None
    communitySet: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItemActionBgpCommunitySet
        ],
        Field(
            description="Modify BGP communities associated with the route using hybrid Community Sets.",
            title="Modify Communities",
        ),
    ] = None
    localPreference: Annotated[
        Optional[int],
        Field(
            description="Set a new LOCAL_PREF value for matching BGP routes.",
            ge=0,
            le=4294967295,
            title="Set Local Preference",
        ),
    ] = None
    med: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItemActionBgpMed
        ],
        Field(description="Set a new MED value.", title="Set MED"),
    ] = None
    setOrigin: Annotated[
        Optional[Literal["egp", "igp", "incomplete"]],
        Field(
            description="Set a new ORIGIN attribute for matching BGP routes.",
            title="Set Origin",
        ),
    ] = None


class VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItemAction(
    BaseModel
):
    """
    Actions for routes that match the policy statement.
    """

    bgp: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItemActionBgp
        ],
        Field(description="Actions related to the BGP protocol.", title="BGP"),
    ] = None
    policyResult: Annotated[
        Optional[Literal["accept", "reject", "NextPolicy", "NextStatement"]],
        Field(description="Final disposition for the route.", title="Policy Result"),
    ] = None


class VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItemMatchBgpAsPathMatch(
    BaseModel
):
    """
    AS Path match criteria.
    """

    asPathExpression: Annotated[
        Optional[str],
        Field(
            description="A singular regular expression string to match against AS_PATH objects. Mutually exclusive with the ASPathSet reference.",
            title="AS Path Expression",
        ),
    ] = None
    asPathSet: Annotated[
        Optional[str],
        Field(
            description="Reference to an ASPathSet resource. Mutually exclusive with the ASPathExpression.",
            title="AS Path Set",
        ),
    ] = None
    matchSetOptions: Annotated[
        Optional[Literal["Any", "All", "Invert"]],
        Field(
            description="The matching criteria that applies to the members in the referenced set.",
            title="Match Set Options",
        ),
    ] = None


class VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItemMatchBgp(
    BaseModel
):
    """
    Configuration for BGP-specific policy match criteria.
    """

    asPathMatch: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItemMatchBgpAsPathMatch
        ],
        Field(description="AS Path match criteria.", title="AS Path"),
    ] = None
    communitySet: Annotated[
        Optional[str],
        Field(
            description="Match conditions for BGP communities.", title="BGP Community"
        ),
    ] = None
    evpnRouteType: Annotated[
        Optional[List[int]],
        Field(
            description="Match conditions for EVPN route types.",
            title="EVPN Route Type",
        ),
    ] = None


class VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItemMatch(BaseModel):
    """
    Match conditions of the policy statement.
    """

    bgp: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItemMatchBgp
        ],
        Field(
            description="Configuration for BGP-specific policy match criteria.",
            title="BGP",
        ),
    ] = None
    family: Annotated[
        Optional[List[str]],
        Field(
            description="Address families that the route belongs to.", title="Family"
        ),
    ] = None
    prefixSet: Annotated[
        Optional[str],
        Field(description="Reference to a PrefixSet resource.", title="Prefix Set"),
    ] = None
    protocol: Annotated[
        Optional[
            Literal[
                "AGGREGATE",
                "ARP_ND",
                "BGP",
                "BGP_EVPN",
                "DHCP",
                "GRIBI",
                "HOST",
                "ISIS",
                "LOCAL",
                "LINUX",
                "NDK1",
                "NDK2",
                "OSPFV2",
                "OSPFV3",
                "STATIC",
            ]
        ],
        Field(description="The route protocol type to match.", title="Protocol"),
    ] = None


class VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItem(BaseModel):
    action: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItemAction
        ],
        Field(
            description="Actions for routes that match the policy statement.",
            title="Action",
        ),
    ] = None
    match: Annotated[
        Optional[
            VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItemMatch
        ],
        Field(description="Match conditions of the policy statement.", title="Match"),
    ] = None
    name: Annotated[
        str, Field(description="Name of the policy statement.", title="Name")
    ]


class VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpec(BaseModel):
    """
    A policy
    """

    defaultAction: Annotated[
        Optional[VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecDefaultAction],
        Field(
            description="The default action to apply if no other actions are defined.",
            title="Default Action",
        ),
    ] = None
    statement: Annotated[
        Optional[
            List[VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpecStatementItem]
        ],
        Field(description="List of policy statements.", title="Statements"),
    ] = None


class VirtualNetworkSpecProtocolsRoutingPoliciesPolicy(BaseModel):
    name: Annotated[str, Field(description="Name of the Policy.", title="Policy Name")]
    spec: Annotated[
        Optional[VirtualNetworkSpecProtocolsRoutingPoliciesPolicySpec],
        Field(description="A policy", title="Policy Spec"),
    ] = None


class VirtualNetworkSpecProtocolsRoutingPoliciesPrefixSetSpecPrefixItem(BaseModel):
    endRange: Annotated[
        Optional[int],
        Field(
            description="The end range when using a range to match prefixes.",
            ge=0,
            le=128,
            title="End Range",
        ),
    ] = None
    exact: Annotated[
        Optional[bool],
        Field(
            description="Indicates if it is an exact match. Ignores the StartRange and EndRange if this param is set.",
            title="Exact",
        ),
    ] = None
    prefix: Annotated[
        str,
        Field(
            description="The IPv4 or IPv6 prefix in CIDR notation with mask.",
            title="Prefix",
        ),
    ]
    startRange: Annotated[
        Optional[int],
        Field(
            description="If specifying a range, this is the start of the range.",
            ge=0,
            le=128,
            title="Start Range",
        ),
    ] = None


class VirtualNetworkSpecProtocolsRoutingPoliciesPrefixSetSpec(BaseModel):
    """
    A PrefixSets
    """

    prefix: Annotated[
        List[VirtualNetworkSpecProtocolsRoutingPoliciesPrefixSetSpecPrefixItem],
        Field(
            description="List of IPv4 or IPv6 prefixes in CIDR notation.",
            title="Prefixes",
        ),
    ]


class VirtualNetworkSpecProtocolsRoutingPoliciesPrefixSet(BaseModel):
    name: Annotated[
        str, Field(description="Name of the PrefixSet.", title="Prefix Set Name")
    ]
    spec: Annotated[
        Optional[VirtualNetworkSpecProtocolsRoutingPoliciesPrefixSetSpec],
        Field(description="A PrefixSets", title="Prefix Set Spec"),
    ] = None


class VirtualNetworkSpecProtocolsRoutingPolicies(BaseModel):
    """
    Routing Policies.
    """

    policies: Annotated[
        Optional[List[VirtualNetworkSpecProtocolsRoutingPoliciesPolicy]],
        Field(description="List of Policies.  [emits=Policy]", title="Policies"),
    ] = None
    prefixSets: Annotated[
        Optional[List[VirtualNetworkSpecProtocolsRoutingPoliciesPrefixSet]],
        Field(description="List of PrefixSet [emits=PrefixSet]", title="Prefix Sets"),
    ] = None


class VirtualNetworkSpecProtocolsStaticRouteSpecNexthopGroupBfd(BaseModel):
    """
    Enables BFD to the next-hops in the group. Local and Remote discriminator parameters have been deprecated at this level. Use Nexthop to set these parameters.
    """

    enabled: Annotated[
        Optional[bool],
        Field(
            description="Defines whether BFD should be enabled towards the nexthops.",
            title="Enabled",
        ),
    ] = False
    localAddress: Annotated[
        Optional[str],
        Field(
            description="Defines the local address to use when establishing the BFD session with the nexthop.",
            title="Local Address",
        ),
    ] = None


class VirtualNetworkSpecProtocolsStaticRouteSpecNexthopGroupNexthopBfd(BaseModel):
    """
    Enables BFD to the next-hops in the group. This overrides the configuration at the group.
    """

    enabled: Annotated[
        Optional[bool],
        Field(
            description="Defines whether BFD should be enabled towards the nexthops.",
            title="Enabled",
        ),
    ] = False
    localAddress: Annotated[
        Optional[str],
        Field(
            description="Defines the local address to use when establishing the BFD session with the nexthop.",
            title="Local Address",
        ),
    ] = None
    localDiscriminator: Annotated[
        Optional[int],
        Field(
            description="Defines the local discriminator.", title="Local Discriminator"
        ),
    ] = None
    remoteDiscriminator: Annotated[
        Optional[int],
        Field(
            description="Defines the remote discriminator.",
            title="Remote Discriminator",
        ),
    ] = None


class VirtualNetworkSpecProtocolsStaticRouteSpecNexthopGroupNexthop(BaseModel):
    bfd: Annotated[
        Optional[VirtualNetworkSpecProtocolsStaticRouteSpecNexthopGroupNexthopBfd],
        Field(
            description="Enables BFD to the next-hops in the group. This overrides the configuration at the group.",
            title="BFD",
        ),
    ] = None
    ipPrefix: Annotated[str, Field(description="Address to use.", title="IP Prefix")]
    resolve: Annotated[
        Optional[bool],
        Field(
            description="If set to true the next-hops can be destinations which are resolved in the route table. This overrides the configuration at the group.",
            title="Resolve",
        ),
    ] = False


class VirtualNetworkSpecProtocolsStaticRouteSpecNexthopGroup(BaseModel):
    """
    Group of nexthops for the list of prefixes.
    """

    bfd: Annotated[
        Optional[VirtualNetworkSpecProtocolsStaticRouteSpecNexthopGroupBfd],
        Field(
            description="Enables BFD to the next-hops in the group. Local and Remote discriminator parameters have been deprecated at this level. Use Nexthop to set these parameters.",
            title="BFD",
        ),
    ] = None
    blackhole: Annotated[
        Optional[bool],
        Field(
            description="If set to true all traffic destined to the prefixes will be blackholed.  If enabled, next-hops are ignored and this takes precedence.",
            title="Blackhole",
        ),
    ] = False
    blackholeSendICMP: Annotated[
        Optional[bool],
        Field(
            description="When enabled, the router will generate ICMP Unreachable messages for packets destined to the blackhole route.",
            title="Blackhole ICMP Generation",
        ),
    ] = None
    nexthops: Annotated[
        Optional[List[VirtualNetworkSpecProtocolsStaticRouteSpecNexthopGroupNexthop]],
        Field(description="Ordered list of nexthops.", title="Nexthops"),
    ] = None
    resolve: Annotated[
        Optional[bool],
        Field(
            description="If set to true the next-hops can be destinations which are resolved in the route table.",
            title="Resolve",
        ),
    ] = False


class VirtualNetworkSpecProtocolsStaticRouteSpec(BaseModel):
    """
    A StaticRoutes
    """

    nexthopGroup: Annotated[
        VirtualNetworkSpecProtocolsStaticRouteSpecNexthopGroup,
        Field(
            description="Group of nexthops for the list of prefixes.",
            title="Nexthop Group",
        ),
    ]
    nodes: Annotated[
        Optional[List[str]],
        Field(
            description="List of nodes on which to configure the static routes. An AND operation is executed against the nodes in this list and the nodes on which the Router is configured to determine the Nodes on which to configure the static routes.",
            title="Nodes",
        ),
    ] = None
    preference: Annotated[
        Optional[int],
        Field(description="Defines the route preference.", title="Preference"),
    ] = None
    prefixes: Annotated[
        List[str],
        Field(
            description="List of destination prefixes and mask to use for the static routes.",
            title="Prefixes",
        ),
    ]
    router: Annotated[
        str,
        Field(
            description="Reference to a Router on which to configure the static routes.  If no Nodes are provided then the static routes will be provisioned on all Nodes on which the Router is provisioned.",
            title="Router",
        ),
    ]


class VirtualNetworkSpecProtocolsStaticRoute(BaseModel):
    name: Annotated[
        str, Field(description="Name of the StaticRoute.", title="Static Route Name")
    ]
    spec: Annotated[
        Optional[VirtualNetworkSpecProtocolsStaticRouteSpec],
        Field(description="A StaticRoutes", title="Static Route Spec"),
    ] = None


class VirtualNetworkSpecProtocols(BaseModel):
    """
    Protocols to configure.
    """

    bgp: Annotated[
        Optional[VirtualNetworkSpecProtocolsBgp],
        Field(description="BGP Protocol.", title="BGP"),
    ] = None
    routingPolicies: Annotated[
        Optional[VirtualNetworkSpecProtocolsRoutingPolicies],
        Field(description="Routing Policies.", title="Routing Policies"),
    ] = None
    staticRoutes: Annotated[
        Optional[List[VirtualNetworkSpecProtocolsStaticRoute]],
        Field(
            description="List of Static Routes within this VirtualNetwork. [emits=StaticRoute]",
            title="Static Routes",
        ),
    ] = None


VirtualNetworkSpecRoutedInterfaceSpecBfd = RoutedInterfaceSpecBfd


VirtualNetworkSpecRoutedInterfaceSpecEgress = BridgeInterfaceSpecEgress


VirtualNetworkSpecRoutedInterfaceSpecIngress = BridgeInterfaceSpecIngress


VirtualNetworkSpecRoutedInterfaceSpecIpv4Address = (
    IRBInterfaceStatusInterfaceIpv4Address
)


VirtualNetworkSpecRoutedInterfaceSpecIpv4Parameters = IRBInterfaceSpecIpv4Parameters


VirtualNetworkSpecRoutedInterfaceSpecIpv6Address = (
    IRBInterfaceStatusInterfaceIpv4Address
)


VirtualNetworkSpecRoutedInterfaceSpecIpv6RouterAdvertisementPrefix = (
    IRBInterfaceSpecIpv6RouterAdvertisementPrefix
)


class VirtualNetworkSpecRoutedInterfaceSpecIpv6RouterAdvertisement(BaseModel):
    currentHopLimit: Annotated[
        int,
        Field(
            description="The current hop limit to advertise in the router advertisement messages.",
            ge=0,
            le=255,
            title="Current Hop Limit",
        ),
    ]
    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable IPv6 router advertisements.",
            title="Enable Router Advertisements",
        ),
    ]
    ipMTU: Annotated[
        Optional[int],
        Field(
            description="The IP MTU to advertise in the router advertisement messages.",
            ge=1280,
            le=9486,
            title="IP MTU",
        ),
    ] = None
    managedConfigurationFlag: Annotated[
        bool,
        Field(
            description="Enable DHCPv6 for address configuration (M-bit).",
            title="Managed Configuration Flag",
        ),
    ]
    maxAdvertisementInterval: Annotated[
        int,
        Field(
            description="Maximum time between router advertisements (in seconds).",
            ge=4,
            le=1800,
            title="Maximum Advertisement Interval",
        ),
    ]
    minAdvertisementInterval: Annotated[
        int,
        Field(
            description="Minimum time between router advertisements (in seconds).",
            ge=3,
            le=1350,
            title="Minimum Advertisement Interval",
        ),
    ]
    otherConfigurationFlag: Annotated[
        bool,
        Field(
            description="Enable DHCPv6 for other configuration (O-bit).",
            title="Other Configuration Flag",
        ),
    ]
    prefixes: Annotated[
        Optional[
            List[VirtualNetworkSpecRoutedInterfaceSpecIpv6RouterAdvertisementPrefix]
        ],
        Field(
            description="IPv6 prefixes to advertise in router advertisements.",
            title="Prefixes",
        ),
    ] = None
    reachableTime: Annotated[
        Optional[int],
        Field(
            description="Time in milliseconds for Neighbor Unreachability Detection.",
            ge=0,
            le=3600000,
            title="Reachable Time",
        ),
    ] = 0
    retransmitTime: Annotated[
        int,
        Field(
            description="Time in milliseconds between retransmitted NS messages.",
            ge=0,
            le=1800000,
            title="Retransmit Time",
        ),
    ]
    routerLifetime: Annotated[
        int,
        Field(
            description="Router lifetime in seconds for default gateway.",
            ge=0,
            le=9000,
            title="Router Lifetime",
        ),
    ]


VirtualNetworkSpecRoutedInterfaceSpecL3ProxyARPND = IRBInterfaceSpecL3ProxyARPND


class VirtualNetworkSpecRoutedInterfaceSpec(BaseModel):
    """
    Specification of the RoutedInterface
    """

    arpTimeout: Annotated[
        Optional[int],
        Field(
            description="Duration of time that dynamic ARP entries remain in the ARP cache before they expire.",
            title="ARP Timeout",
        ),
    ] = 14400
    bfd: Annotated[
        Optional[VirtualNetworkSpecRoutedInterfaceSpecBfd],
        Field(
            description="Enables BFD on the RoutedInterface.", title="BFD Configuration"
        ),
    ] = None
    description: Annotated[
        Optional[str],
        Field(
            description="The description of the RoutedInterface.", title="Description"
        ),
    ] = None
    egress: Annotated[
        Optional[VirtualNetworkSpecRoutedInterfaceSpecEgress],
        Field(
            description="Manages actions on traffic at Egress.", title="Egress Actions"
        ),
    ] = None
    ingress: Annotated[
        Optional[VirtualNetworkSpecRoutedInterfaceSpecIngress],
        Field(
            description="Manages actions on traffic at Ingress.",
            title="Ingress Actions",
        ),
    ] = None
    interface: Annotated[
        str,
        Field(
            description="Reference to an Interface to use for attachment.",
            title="Interface",
        ),
    ]
    ipMTU: Annotated[
        Optional[int],
        Field(
            description="IP MTU for the RoutedInterface.",
            ge=1280,
            le=9486,
            title="IP MTU",
        ),
    ] = 1500
    ipv4Addresses: Annotated[
        Optional[List[VirtualNetworkSpecRoutedInterfaceSpecIpv4Address]],
        Field(
            description="List of IPv4 addresses in IP/mask form, e.g., 192.168.0.1/24.",
            title="IPv4 Addresses",
        ),
    ] = None
    ipv4Parameters: Annotated[
        Optional[VirtualNetworkSpecRoutedInterfaceSpecIpv4Parameters],
        Field(title="IPv4-specific Parameters"),
    ] = None
    ipv6Addresses: Annotated[
        Optional[List[VirtualNetworkSpecRoutedInterfaceSpecIpv6Address]],
        Field(
            description="List of IPv6 addresses in IP/mask form, e.g., fc00::1/120.",
            title="IPv6 Addresses",
        ),
    ] = None
    ipv6RouterAdvertisement: Annotated[
        Optional[VirtualNetworkSpecRoutedInterfaceSpecIpv6RouterAdvertisement],
        Field(title="IPv6 Router Advertisement"),
    ] = None
    l3ProxyARPND: Annotated[
        Optional[VirtualNetworkSpecRoutedInterfaceSpecL3ProxyARPND],
        Field(
            description="L3 Proxy ARP and ND configuration.", title="L3 Proxy ARP/ND"
        ),
    ] = None
    learnUnsolicited: Annotated[
        Optional[Literal["BOTH", "GLOBAL", "LINK-LOCAL", "NONE"]],
        Field(
            description="Enable or disable learning of unsolicited ARPs.",
            title="Learn Unsolicited ARPs",
        ),
    ] = "NONE"
    router: Annotated[str, Field(description="Reference to a Router.", title="Router")]
    unnumbered: Annotated[
        Optional[Literal["IPV6"]],
        Field(
            description="Enables the use of unnumbered interfaces on the IRBInterface.  If IPv6 is specified, no IP address are configured on the sub-interface and only the link local address will be used.  If any IP addresses are specified for either IPv4 or IPv6 that will take precedence and IPs will be assigned to the interfaces. (Deprecated, Use IPv6RouterAdvertisement)",
            title="Unnumbered",
        ),
    ] = None
    vlanID: Annotated[
        Optional[str],
        Field(
            description="Single value between 1-4094 support, ranges supported in the format x-y,x-y, or the special keyword null, any, untagged or pool for auto allocation.",
            title="VLAN ID",
        ),
    ] = "pool"
    vlanPool: Annotated[
        Optional[str],
        Field(
            description="Reference to a VLAN pool to use for allocations.",
            title="VLAN Pool",
        ),
    ] = "vlan-pool"


class VirtualNetworkSpecRoutedInterface(BaseModel):
    name: Annotated[
        str,
        Field(
            description="The name of the RoutedInterface.",
            title="Routed Interface Name",
        ),
    ]
    spec: Annotated[
        VirtualNetworkSpecRoutedInterfaceSpec,
        Field(
            description="Specification of the RoutedInterface",
            title="Routed Interface Spec",
        ),
    ]


VirtualNetworkSpecRouterSpecBgpIpAliasNexthop = RouterSpecBgpIpAliasNexthop


VirtualNetworkSpecRouterSpecBgpIpv4UnicastMultipath = RouterSpecBgpIpv4UnicastMultipath


class VirtualNetworkSpecRouterSpecBgpIpv4Unicast(BaseModel):
    """
    Parameters relating to the IPv4 unicast AFI/SAFI.
    """

    advertiseIPV6NextHops: Annotated[
        Optional[bool],
        Field(
            description="Enables advertisement of IPv4 Unicast routes with IPv6 next-hops to peers.",
            title="Advertise IPv6 Next Hops",
        ),
    ] = None
    enabled: Annotated[
        bool, Field(description="Enables the IPv4 unicast AFISAFI.", title="Enabled")
    ]
    multipath: Annotated[
        Optional[VirtualNetworkSpecRouterSpecBgpIpv4UnicastMultipath],
        Field(description="Enable multipath.", title="Multipath"),
    ] = None
    receiveIPV6NextHops: Annotated[
        Optional[bool],
        Field(
            description="Enables the advertisement of the RFC 5549 capability to receive IPv4 routes with IPv6 next-hops.",
            title="Receive IPv6 Next Hops",
        ),
    ] = None


VirtualNetworkSpecRouterSpecBgpIpv6UnicastMultipath = RouterSpecBgpIpv6UnicastMultipath


class VirtualNetworkSpecRouterSpecBgpIpv6Unicast(BaseModel):
    """
    Parameters relating to the IPv6 unicast AFI/SAFI.
    """

    enabled: Annotated[
        bool, Field(description="Enables the IPv6 unicast AFISAFI", title="Enabled")
    ]
    multipath: Annotated[
        Optional[VirtualNetworkSpecRouterSpecBgpIpv6UnicastMultipath],
        Field(description="Enable multipath", title="Multipath"),
    ] = None


class VirtualNetworkSpecRouterSpecBgp(BaseModel):
    """
    BGP configuration.
    """

    autonomousSystem: Annotated[
        Optional[int],
        Field(
            description="Autonomous System number for BGP.",
            ge=1,
            le=4294967295,
            title="Autonomous System",
        ),
    ] = None
    ebgpPreference: Annotated[
        Optional[int],
        Field(
            description="Preference to be set for eBGP [default=170].",
            ge=1,
            le=255,
            title="eBGP Preference",
        ),
    ] = 170
    enabled: Annotated[
        Optional[bool], Field(description="Enable or disable BGP.", title="Enable BGP")
    ] = False
    ibgpPreference: Annotated[
        Optional[int],
        Field(
            description="Preference to be set for iBGP [default=170].",
            ge=1,
            le=255,
            title="iBGP Preference",
        ),
    ] = 170
    ipAliasNexthops: Annotated[
        Optional[List[VirtualNetworkSpecRouterSpecBgpIpAliasNexthop]],
        Field(description="IP aliasing configuration.", title="IP Alias Nexthops"),
    ] = None
    ipv4Unicast: Annotated[
        Optional[VirtualNetworkSpecRouterSpecBgpIpv4Unicast],
        Field(
            description="Parameters relating to the IPv4 unicast AFI/SAFI.",
            title="IPv4 Unicast",
        ),
    ] = None
    ipv6Unicast: Annotated[
        Optional[VirtualNetworkSpecRouterSpecBgpIpv6Unicast],
        Field(
            description="Parameters relating to the IPv6 unicast AFI/SAFI.",
            title="IPv6 Unicast",
        ),
    ] = None
    keychain: Annotated[
        Optional[str],
        Field(description="Keychain to be used for authentication", title="Keychain"),
    ] = None
    minWaitToAdvertise: Annotated[
        Optional[int],
        Field(
            description="Minimum wait time before advertising routes post BGP restart.",
            ge=0,
            le=3600,
            title="Min Wait To Advertise Time",
        ),
    ] = 0
    rapidWithdrawl: Annotated[
        Optional[bool],
        Field(
            description="Enable rapid withdrawal in BGP.",
            title="Enable Rapid Withdrawal",
        ),
    ] = True
    waitForFIBInstall: Annotated[
        Optional[bool],
        Field(
            description="Wait for FIB installation before advertising routes.",
            title="Wait for FIB Installation",
        ),
    ] = False


VirtualNetworkSpecRouterSpecIpLoadBalancingPrefixItem = (
    RouterSpecIpLoadBalancingPrefixItem
)


class VirtualNetworkSpecRouterSpecIpLoadBalancing(BaseModel):
    """
    IPv4 or IPv6 prefix. Active routes in the FIB that exactly match this prefix or that are longer matches of this prefix are provided with resilient-hash programming.
    """

    prefix: Annotated[
        Optional[List[VirtualNetworkSpecRouterSpecIpLoadBalancingPrefixItem]],
        Field(
            description="IPv4 or IPv6 prefix. Active routes in the FIB that exactly match this prefix or that are longer matches of this prefix are provided with resilient-hash programming.",
            title="Prefix",
        ),
    ] = None


VirtualNetworkSpecRouterSpecRouteLeaking = RouterSpecRouteLeaking


class VirtualNetworkSpecRouterSpec(BaseModel):
    """
    Specification of the Router
    """

    bgp: Annotated[
        Optional[VirtualNetworkSpecRouterSpecBgp],
        Field(description="BGP configuration.", title="BGP Configuration"),
    ] = None
    description: Annotated[
        Optional[str],
        Field(description="The description of the Router.", title="Description"),
    ] = None
    evi: Annotated[
        Optional[int],
        Field(
            description="EVI for the Router; leave blank for auto-allocation from EVI pool.",
            ge=1,
            le=65535,
            title="EVI",
        ),
    ] = None
    eviPool: Annotated[
        Optional[str],
        Field(
            description="Reference to EVI pool for auto-allocation.",
            title="EVI Allocation Pool",
        ),
    ] = "evi-pool"
    exportTarget: Annotated[
        Optional[str],
        Field(
            description="Export route target in 'target:N:N' format, if not specified, the default value taken as \"target:1:<evi>\".",
            pattern="^target.*$",
            title="Export Target",
        ),
    ] = None
    importTarget: Annotated[
        Optional[str],
        Field(
            description="Import route target in 'target:N:N' format, if not specified, the default value taken as \"target:1:<evi>\".",
            pattern="^target.*$",
            title="Import Target",
        ),
    ] = None
    ipLoadBalancing: Annotated[
        Optional[VirtualNetworkSpecRouterSpecIpLoadBalancing],
        Field(
            description="IPv4 or IPv6 prefix. Active routes in the FIB that exactly match this prefix or that are longer matches of this prefix are provided with resilient-hash programming.",
            title="Prefix",
        ),
    ] = None
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Node selectors for deployment constraints.  If Nodes are selected, the Router will only be deployed on the Nodes selected, if left blank it will be deployed on all Nodes for which there are IRB or RoutedInterfaces referencing this Router.",
            title="Node Selector",
        ),
    ] = None
    routeLeaking: Annotated[
        Optional[VirtualNetworkSpecRouterSpecRouteLeaking],
        Field(
            description="Route leaking controlled by routing policies in and out of the DefaultRouter.",
            title="Route Leaking",
        ),
    ] = None
    routerID: Annotated[
        Optional[str], Field(description="Router ID.", title="Router ID")
    ] = None
    tunnelIndexPool: Annotated[
        Optional[str],
        Field(
            description="Reference to tunnel index allocation pool.",
            title="Tunnel Index Pool",
        ),
    ] = "tunnel-index-pool"
    type: Annotated[
        Optional[Literal["SIMPLE", "EVPNVXLAN"]],
        Field(
            description="Select the type of Router.  Simple doesn't include any overlay control plane or dataplane properties (EVPN/VXLAN). EVPNVXLAN includes the properties needed to provision this Router over an IP Fabric.",
            title="Type",
        ),
    ] = "EVPNVXLAN"
    vni: Annotated[
        Optional[int],
        Field(
            description="VNI for the Router; leave blank for auto-allocation from VNI pool.",
            ge=1,
            le=16777215,
            title="VNI",
        ),
    ] = None
    vniPool: Annotated[
        Optional[str],
        Field(
            description="Reference to VNI pool for auto-allocation.",
            title="VNI Allocation Pool",
        ),
    ] = "vni-pool"


class VirtualNetworkSpecRouter(BaseModel):
    name: Annotated[
        str, Field(description="The name of the Router.", title="Router Name")
    ]
    spec: Annotated[
        VirtualNetworkSpecRouterSpec,
        Field(description="Specification of the Router", title="Router Spec"),
    ]


VirtualNetworkSpecVlanSpecEgress = BridgeInterfaceSpecEgress


VirtualNetworkSpecVlanSpecIngress = BridgeInterfaceSpecIngress


VirtualNetworkSpecVlanSpecUplinkEgress = BridgeInterfaceSpecUplinkEgress


VirtualNetworkSpecVlanSpecUplinkIngress = BridgeInterfaceSpecUplinkIngress


class VirtualNetworkSpecVlanSpecUplink(BaseModel):
    """
    The Uplink between your access breakout switch and your leaf switch.
    """

    egress: Annotated[
        Optional[VirtualNetworkSpecVlanSpecUplinkEgress],
        Field(
            description="Manages actions on traffic at Egress of the Local enpoint of the Uplink.",
            title="Egress",
        ),
    ] = None
    ingress: Annotated[
        Optional[VirtualNetworkSpecVlanSpecUplinkIngress],
        Field(
            description="Manages actions on traffic at Ingress of the Local enpoint of the Uplink.",
            title="Ingress",
        ),
    ] = None
    uplinkSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Selects TopoLinks which connect a leaf switch to a breakout switch. This is the uplink between your access breakout switch and your leaf switch.  There can only be a single TopoLink between the access breakout switch and the leaf switch, if more than one TopoLink is present between two devices the transaction will fail.",
            title="Uplink Selector",
        ),
    ] = None
    uplinkVLANID: Annotated[
        Optional[str],
        Field(
            description="The VLAN ID to be utilized to isolate traffic from the VLAN on the access breakout switch to the leaf switch on the selected uplink TopoLink.",
            title="Uplink VLAN ID",
        ),
    ] = "pool"
    uplinkVLANPool: Annotated[
        Optional[str],
        Field(
            description="A VLAN from this pool will be utilized to isolate traffic from the VLAN on the access breakout switch to the leaf switch on the selected uplink TopoLink.",
            title="Uplink VLAN Pool",
        ),
    ] = None


class VirtualNetworkSpecVlanSpec(BaseModel):
    """
    Specification of the Vlan
    """

    bridgeDomain: Annotated[
        str,
        Field(
            description="Reference to a BridgeDomain or SimpleBridgeDomain.",
            title="Bridge Domain",
        ),
    ]
    description: Annotated[
        Optional[str],
        Field(description="The description of the VLAN.", title="Description"),
    ] = None
    egress: Annotated[
        Optional[VirtualNetworkSpecVlanSpecEgress],
        Field(description="Manages actions on traffic at Egress.", title="Egress"),
    ] = None
    ingress: Annotated[
        Optional[VirtualNetworkSpecVlanSpecIngress],
        Field(description="Manages actions on traffic at Ingress.", title="Ingress"),
    ] = None
    interfaceSelector: Annotated[
        List[str],
        Field(
            description="Interfaces to use for attachment to this VLAN based on the label selector.  Selects Interfaces based on their associated labels.",
            title="Interface Selector",
        ),
    ]
    l2MTU: Annotated[
        Optional[int],
        Field(
            description="L2 MTU specifies the maximum sized Ethernet frame that can be transmitted on the subinterface. If a frame exceeds this size it is discarded. If the l2-mtu of the subinterface exceeds the port-mtu of the associated interface, the subinterface will remain operationally down.",
            ge=1450,
            le=9500,
            title="L2 MTU",
        ),
    ] = None
    macDuplicationDetectionAction: Annotated[
        Optional[
            Literal["Blackhole", "OperDown", "StopLearning", "UseBridgeDomainAction"]
        ],
        Field(
            description="If Mac Duplication Detection is enabled on the associated Bridge Domain, this property will override the MDD action set in the BridgeDomain.",
            title="MAC Duplication Detection Action",
        ),
    ] = None
    splitHorizonGroup: Annotated[
        Optional[str],
        Field(
            description="Name of the Split Horizon Group to be used for this VLAN.  All subinterfaces within this VLAN will be members of this Split Horizon Group.",
            title="Split Horizon Group",
        ),
    ] = None
    uplink: Annotated[
        Optional[VirtualNetworkSpecVlanSpecUplink],
        Field(
            description="The Uplink between your access breakout switch and your leaf switch.",
            title="Uplink",
        ),
    ] = None
    vlanID: Annotated[
        Optional[str],
        Field(
            description="Single value between 1-4094 support, ranges supported in the format x-y,x-y, or the special keyword null, any, untagged or pool for auto allocation.",
            title="VLAN ID",
        ),
    ] = "pool"
    vlanPool: Annotated[
        Optional[str],
        Field(
            description='Reference to a VLAN pool to use for allocations. [default="vlan-pool"]',
            title="VLAN Pool",
        ),
    ] = None


class VirtualNetworkSpecVlan(BaseModel):
    name: Annotated[str, Field(description="The name of the VLAN.", title="VLAN Name")]
    spec: Annotated[
        VirtualNetworkSpecVlanSpec,
        Field(description="Specification of the Vlan", title="VLAN Spec"),
    ]


class VirtualNetworkSpec(BaseModel):
    """
    VirtualNetworkSpec defines the desired state of VirtualNetwork
    """

    bridgeDomains: Annotated[
        Optional[List[VirtualNetworkSpecBridgeDomain]],
        Field(
            description="List of Subnets. [emits=BridgeDomain]", title="Bridge Domains"
        ),
    ] = None
    bridgeInterfaces: Annotated[
        Optional[List[VirtualNetworkSpecBridgeInterface]],
        Field(
            description="List of BridgeInterfaces. [emits=BridgeInterface]",
            title="Bridge Interfaces",
        ),
    ] = None
    irbInterfaces: Annotated[
        Optional[List[VirtualNetworkSpecIrbInterface]],
        Field(
            description="List of IRBInterfaces. [emits=IRBInterface]",
            title="IRB Interfaces",
        ),
    ] = None
    protocols: Annotated[
        Optional[VirtualNetworkSpecProtocols],
        Field(description="Protocols to configure.", title="Protocols"),
    ] = None
    routedInterfaces: Annotated[
        Optional[List[VirtualNetworkSpecRoutedInterface]],
        Field(
            description="List of RoutedInterface. [emits=RoutedInterface]",
            title="Routed Interfaces",
        ),
    ] = None
    routers: Annotated[
        Optional[List[VirtualNetworkSpecRouter]],
        Field(description="List of Routers.[emits=Router]", title="Routers"),
    ] = None
    vlans: Annotated[
        Optional[List[VirtualNetworkSpecVlan]],
        Field(description="List of VLANs. [emits=VLAN]", title="VLAN"),
    ] = None


class VirtualNetworkStatus(BaseModel):
    health: Annotated[
        Optional[int],
        Field(description="Indicates the health score of the VNET.", title="Health"),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description="Indicates the reason for the health score.",
            title="Health Score Reason",
        ),
    ] = None
    lastChange: Annotated[
        Optional[AwareDatetime],
        Field(
            description="The time when the state of the resource last changed.",
            title="Last Change",
        ),
    ] = None
    nodes: Annotated[
        Optional[List[str]],
        Field(
            description="List of Nodes on which the Router is deployed.", title="Nodes"
        ),
    ] = None
    numBGPPeers: Annotated[
        Optional[int],
        Field(
            description="Total number of configured BGP Peers.",
            title="Number of BGP Peers",
        ),
    ] = None
    numBGPPeersOperDown: Annotated[
        Optional[int],
        Field(
            description="Total Number of BGP Peer operationally down.",
            title="Number of BGP Peers Oper Down",
        ),
    ] = None
    numIRBInterfaces: Annotated[
        Optional[int],
        Field(
            description="Total number of irb-interfaces configured by the VNET.",
            title="Number of IRB Interfaces",
        ),
    ] = None
    numIRBInterfacesOperDown: Annotated[
        Optional[int],
        Field(
            description="Total number of irb-interfaces configured by the VNET which are oper-down.",
            title="Number of IRB Interfaces Oper Down",
        ),
    ] = None
    numNodes: Annotated[
        Optional[int],
        Field(
            description="Total number of Nodes on which the VNET is configured.",
            title="Number of Nodes",
        ),
    ] = None
    numRoutedInterfaces: Annotated[
        Optional[int],
        Field(
            description="Total number of routed-interfaces configured by the VNET.",
            title="Number of Routed Interfaces",
        ),
    ] = None
    numRoutedInterfacesOperDown: Annotated[
        Optional[int],
        Field(
            description="Total number of routed-interfaces configured by the VNET which are oper-down.",
            title="Number of Routed Interfaces Oper Down",
        ),
    ] = None
    numSubInterfaces: Annotated[
        Optional[int],
        Field(
            description="Total number of sub-interfaces configured by the VNET.",
            title="Number of Sub Interfaces",
        ),
    ] = None
    numSubInterfacesOperDown: Annotated[
        Optional[int],
        Field(
            description="Total number of sub-interfaces configured by the VNET which are oper-down.",
            title="Number of Sub Interfaces Oper Down",
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(description="Operational state of the VNET.", title="Operational State"),
    ] = None


VirtualNetworkDeletedResourceEntry = BridgeDomainDeletedResourceEntry


class VirtualNetworkDeletedResources(
    RootModel[List[VirtualNetworkDeletedResourceEntry]]
):
    root: List[VirtualNetworkDeletedResourceEntry]


VirtualNetworkMetadata = BridgeDomainMetadata


class AppGroup(BaseModel):
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None
    preferredVersion: Optional[AppGroupVersion] = None
    versions: Optional[List[AppGroupVersion]] = None


class ResourceHistory(RootModel[List[ResourceHistoryEntry]]):
    root: List[ResourceHistoryEntry]


class Status(BaseModel):
    apiVersion: Optional[str] = None
    details: Optional[StatusDetails] = None
    kind: Optional[str] = None
    string: Optional[str] = None


class TopoElemMetadata(BaseModel):
    attributes: Optional[Dict[str, TopoAttrMetadata]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    subtitle: Optional[str] = None
    subtitle_key: Optional[str] = None


class TopoOverlayEndpoint(BaseModel):
    attributes: Optional[Dict[str, Dict[str, Any]]] = None
    cr_name: Optional[str] = None
    labels: Optional[Dict[str, str]] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    overlays: Optional[Dict[str, TopoOverlayEndpointState]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    state: Optional[int] = None
    ui_name: Optional[str] = None


class TopoOverlayLink(BaseModel):
    attributes: Optional[Dict[str, Dict[str, Any]]] = None
    cr_name: Optional[str] = None
    endpoint_a: Optional[TopoLinkEndpoint] = None
    endpoint_a_details: Optional[TopoOverlayEndpoint] = None
    endpoint_b: Optional[TopoLinkEndpoint] = None
    endpoint_b_details: Optional[TopoOverlayEndpoint] = None
    key: Optional[str] = None
    labels: Optional[Dict[str, str]] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    overlays: Optional[Dict[str, TopoOverlayLinkState]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    state: Optional[int] = None
    ui_name: Optional[str] = None


class TopoOverlayNode(BaseModel):
    attributes: Optional[Dict[str, Dict[str, Any]]] = None
    badges: Optional[List[int]] = None
    cr_name: Optional[str] = None
    grouping: Optional[TopoNodeGrouping] = None
    key: Optional[str] = None
    labels: Optional[Dict[str, str]] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    overlays: Optional[Dict[str, TopoOverlayNodeState]] = None
    schema_: Annotated[Optional[TopoSchema], Field(alias="schema")] = None
    state: Optional[int] = None
    ui_name: Optional[str] = None


class Topology(BaseModel):
    endpoints: Optional[TopoElemMetadata] = None
    group: Optional[str] = None
    grouping: Optional[TopoSchema] = None
    links: Optional[TopoElemMetadata] = None
    name: Optional[str] = None
    nodes: Optional[TopoElemMetadata] = None
    ui_description: Optional[str] = None
    ui_description_key: Optional[str] = None
    ui_name: Optional[str] = None
    ui_name_key: Optional[str] = None
    version: Optional[str] = None


class WorkflowInputData(RootModel[List[WorkflowInputDataElem]]):
    root: List[WorkflowInputDataElem]


class BridgeDomain(BaseModel):
    """
    BridgeDomain is the Schema for the bridgedomains API
    """

    apiVersion: Annotated[str, Field(pattern="^services\\.eda\\.nokia\\.com/v1$")]
    kind: Annotated[str, Field(pattern="^BridgeDomain$")]
    metadata: BridgeDomainMetadata
    spec: Annotated[
        BridgeDomainSpec,
        Field(
            description="The BridgeDomain enables the configuration and management of Layer 2 virtual networks. It includes settings for VNI, EVI, route targets for import and export, and tunnel index allocation. Additionally, the specification allows for advanced features such as MAC address table limits, aging, Proxy ARP and detection of MAC and IP duplication.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[BridgeDomainStatus],
        Field(
            description="BridgeDomainStatus defines the observed state of BridgeDomain",
            title="Status",
        ),
    ] = None


class BridgeDomainList(BaseModel):
    """
    BridgeDomainList is a list of bridgedomains
    """

    apiVersion: str
    items: Optional[List[BridgeDomain]] = None
    kind: str


class BridgeInterface(BaseModel):
    """
    BridgeInterface is the Schema for the bridgeinterfaces API
    """

    apiVersion: Annotated[str, Field(pattern="^services\\.eda\\.nokia\\.com/v1$")]
    kind: Annotated[str, Field(pattern="^BridgeInterface$")]
    metadata: BridgeInterfaceMetadata
    spec: Annotated[
        BridgeInterfaceSpec,
        Field(
            description="The BridgeInterface enables the attachment of network interfaces to a Bridge Domain. It includes settings for VLAN ID allocation, interface attachment, and actions on ingress and egress traffic. The specification supports integration with other network resources, such as Bridge Domains and Interfaces, and provides advanced features like MAC Duplication Detection with configurable actions.",
            title="Specification",
        ),
    ]
    status: Annotated[Optional[BridgeInterfaceStatus], Field(title="Status")] = None


class BridgeInterfaceList(BaseModel):
    """
    BridgeInterfaceList is a list of bridgeinterfaces
    """

    apiVersion: str
    items: Optional[List[BridgeInterface]] = None
    kind: str


class DHCPRelay(BaseModel):
    """
    DHCPRelay is the Schema for the dhcprelays API
    """

    apiVersion: Annotated[str, Field(pattern="^services\\.eda\\.nokia\\.com/v1$")]
    kind: Annotated[str, Field(pattern="^DHCPRelay$")]
    metadata: DHCPRelayMetadata
    spec: Annotated[
        DHCPRelaySpec,
        Field(
            description="The DHCPRelay enables the forwarding of DHCP requests and responses between clients and servers across different networks. This resource allows for the configuration of various DHCP relay sub-options, such as CircuitID, RemoteID, and ClientLinkLayerAddress, to provide detailed client information. It also includes settings for specifying the router to reach the DHCP server, the list of DHCP servers to forward requests to, and selectors for Routed and IRB interfaces where the relay will be configured. Additionally, the GI Address option can be set to derive the Gateway IP address from the selected interface, ensuring correct routing of DHCP messages.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="DHCPRelayStatus defines the observed state of DHCPRelay",
            title="Status",
        ),
    ] = None


class DHCPRelayList(BaseModel):
    """
    DHCPRelayList is a list of dhcprelays
    """

    apiVersion: str
    items: Optional[List[DHCPRelay]] = None
    kind: str


class EdgePing(BaseModel):
    """
    EdgePing is the Schema for the edgepings API
    """

    apiVersion: Annotated[str, Field(pattern="^services\\.eda\\.nokia\\.com/v1$")]
    kind: Annotated[str, Field(pattern="^EdgePing$")]
    metadata: EdgePingMetadata
    spec: Annotated[
        EdgePingSpec,
        Field(
            description="EdgePingSpec defines the desired state of EdgePing",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[EdgePingStatus],
        Field(
            description="EdgePingStatus defines the observed state of EdgePing",
            title="Status",
        ),
    ] = None


class EdgePingList(BaseModel):
    """
    EdgePingList is a list of edgepings
    """

    apiVersion: str
    items: Optional[List[EdgePing]] = None
    kind: str


class IRBInterface(BaseModel):
    """
    IRBInterface is the Schema for the irbinterfaces API
    """

    apiVersion: Annotated[str, Field(pattern="^services\\.eda\\.nokia\\.com/v1$")]
    kind: Annotated[str, Field(pattern="^IRBInterface$")]
    metadata: IRBInterfaceMetadata
    spec: Annotated[
        IRBInterfaceSpec,
        Field(
            description="The IRBInterface enables the configuration and management of Layer 3 interfaces associated with a BridgeDomain. This resource allows for the specification of various parameters, including IP MTU, learning of unsolicited ARPs, IPv4 and IPv6 addresses, and unnumbered interface settings. It also supports advanced features such as BFD configuration, Virtual IP discovery, and ARP/ND-related settings like Proxy ARP/ND and EVPN route advertisement.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[IRBInterfaceStatus],
        Field(
            description="IRBInterfaceStatus defines the observed state of IRBInterface",
            title="Status",
        ),
    ] = None


class IRBInterfaceList(BaseModel):
    """
    IRBInterfaceList is a list of irbinterfaces
    """

    apiVersion: str
    items: Optional[List[IRBInterface]] = None
    kind: str


class RoutedInterface(BaseModel):
    """
    RoutedInterface is the Schema for the routedinterfaces API
    """

    apiVersion: Annotated[str, Field(pattern="^services\\.eda\\.nokia\\.com/v1$")]
    kind: Annotated[str, Field(pattern="^RoutedInterface$")]
    metadata: RoutedInterfaceMetadata
    spec: Annotated[
        RoutedInterfaceSpec,
        Field(
            description="The RoutedInterface enables the configuration and management of Layer 3 interfaces for routing traffic between different networks. This resource allows for specifying an underlying Interface and Router, configuring VLAN IDs, and setting the IP MTU. It also supports the learning of unsolicited ARPs, defining both IPv4 and IPv6 addresses, and enabling unnumbered interfaces. Advanced features such as BFD configuration, Proxy ARP/ND, and ARP timeout settings are included to ensure robust and efficient routing.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[RoutedInterfaceStatus],
        Field(
            description="RoutedInterfaceStatus defines the observed state of RoutedInterface",
            title="Status",
        ),
    ] = None


class RoutedInterfaceList(BaseModel):
    """
    RoutedInterfaceList is a list of routedinterfaces
    """

    apiVersion: str
    items: Optional[List[RoutedInterface]] = None
    kind: str


class Router(BaseModel):
    """
    Router is the Schema for the routers API
    """

    apiVersion: Annotated[str, Field(pattern="^services\\.eda\\.nokia\\.com/v1$")]
    kind: Annotated[str, Field(pattern="^Router$")]
    metadata: RouterMetadata
    spec: Annotated[
        RouterSpec,
        Field(
            description="The Router enables the configuration and management of routing functions within a network. This resource allows for setting a unique Router ID, configuring VNIs and EVIs with options for automatic allocation, and defining import and export route targets. It also includes advanced configuration options such as BGP settings, including autonomous system numbers, AFI/SAFI options, and route advertisement preferences. Node selectors can be used to constrain the deployment of the router to specific nodes within the network.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[RouterStatus],
        Field(
            description="RouterStatus defines the observed state of Router",
            title="Status",
        ),
    ] = None


class RouterList(BaseModel):
    """
    RouterList is a list of routers
    """

    apiVersion: str
    items: Optional[List[Router]] = None
    kind: str


class VLAN(BaseModel):
    """
    VLAN is the Schema for the vlans API
    """

    apiVersion: Annotated[str, Field(pattern="^services\\.eda\\.nokia\\.com/v1$")]
    kind: Annotated[str, Field(pattern="^VLAN$")]
    metadata: VLANMetadata
    spec: Annotated[
        VLANSpec,
        Field(
            description="The VLAN enables the configuration and management of VLAN and their association with BridgeDomains. This resource allows for specifying the associated BridgeDomain, selecting interfaces based on label selectors, and configuring VLAN IDs with options for auto-allocation from a VLAN pool. It also supports advanced configurations such as ingress and egress traffic management, and overrides for MAC Duplication Detection actions when enabled in the associated BridgeDomain.",
            title="Specification",
        ),
    ]
    status: Annotated[Optional[VLANStatus], Field(title="Status")] = None


class VLANList(BaseModel):
    """
    VLANList is a list of vlans
    """

    apiVersion: str
    items: Optional[List[VLAN]] = None
    kind: str


class VirtualNetwork(BaseModel):
    """
    VirtualNetwork is the Schema for the virtualnetworks API
    """

    apiVersion: Annotated[str, Field(pattern="^services\\.eda\\.nokia\\.com/v1$")]
    kind: Annotated[str, Field(pattern="^VirtualNetwork$")]
    metadata: VirtualNetworkMetadata
    spec: Annotated[
        VirtualNetworkSpec,
        Field(
            description="VirtualNetworkSpec defines the desired state of VirtualNetwork",
            title="Specification",
        ),
    ]
    status: Annotated[Optional[VirtualNetworkStatus], Field(title="Status")] = None


class VirtualNetworkList(BaseModel):
    """
    VirtualNetworkList is a list of virtualnetworks
    """

    apiVersion: str
    items: Optional[List[VirtualNetwork]] = None
    kind: str


class OverlayState(BaseModel):
    links: Optional[Dict[str, TopoOverlayLink]] = None
    nodes: Optional[Dict[str, TopoOverlayNode]] = None


class ResourceTopology(BaseModel):
    topology: Optional[OverlayState] = None
    topologyMetadata: Optional[Topology] = None
