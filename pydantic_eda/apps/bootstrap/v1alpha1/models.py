# generated by datamodel-codegen:
#   filename:  bootstrap.json

from __future__ import annotations
from typing import Annotated, Any, Dict, List, Optional
from pydantic import BaseModel, Field, RootModel


class AppGroupVersion(BaseModel):
    groupVersion: Optional[str] = None
    version: Optional[str] = None


class ErrorIndex(BaseModel):
    index: Optional[int] = None


class ErrorItem(BaseModel):
    error: Optional[Dict[str, Any]] = None
    type: Optional[str] = None


class ErrorResponse(BaseModel):
    """
    Generic error response for REST APIs
    """

    code: Annotated[
        int, Field(description="the numeric HTTP error code for the response.")
    ]
    details: Annotated[
        Optional[str], Field(description="The optional details of the error response.")
    ] = None
    dictionary: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='Dictionary/map of associated data/information relevant to the error.\nThe error "message" may contain {{name}} escapes that should be substituted\nwith information from this dictionary.'
        ),
    ] = None
    errors: Annotated[
        Optional[List[ErrorItem]],
        Field(
            description="Collection of errors in cases where more than one exists. This needs to be\nflexible so we can support multiple formats"
        ),
    ] = None
    index: Optional[ErrorIndex] = None
    internal: Annotated[
        Optional[int],
        Field(
            description="Internal error code in cases where we don't have an array of errors"
        ),
    ] = None
    message: Annotated[
        str, Field(description="The basic text error message for the error response.")
    ]
    ref: Annotated[
        Optional[str],
        Field(
            description="Reference to the error source. Should typically be the URI of the request"
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(
            description="URI pointing at a document that describes the error and mitigation steps\nIf there is no document, point to the RFC for the HTTP error code"
        ),
    ] = None


class K8SPatchOp(BaseModel):
    from_: Annotated[Optional[str], Field(alias="from")] = None
    op: str
    path: str
    value: Optional[Dict[str, Any]] = None
    x_permissive: Annotated[Optional[bool], Field(alias="x-permissive")] = None


class Patch(RootModel[List[K8SPatchOp]]):
    root: List[K8SPatchOp]


class Resource(BaseModel):
    kind: Optional[str] = None
    name: Optional[str] = None
    namespaced: Optional[bool] = None
    readOnly: Optional[bool] = None
    singularName: Optional[str] = None
    uiCategory: Optional[str] = None


class ResourceHistoryEntry(BaseModel):
    author: Optional[str] = None
    changeType: Optional[str] = None
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    message: Optional[str] = None
    transactionId: Optional[int] = None


class ResourceList(BaseModel):
    apiVersion: Optional[str] = None
    groupVersion: Optional[str] = None
    kind: Optional[str] = None
    resources: Optional[List[Resource]] = None


class StatusDetails(BaseModel):
    group: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None


class UIResult(RootModel[str]):
    root: str


class InitSpecMgmtStaticRoute(BaseModel):
    nextHop: Annotated[
        Optional[str], Field(description="Static route next hop.", title="Next Hop")
    ] = None
    prefix: Annotated[
        Optional[str], Field(description="Static route prefix.", title="Prefix")
    ] = None


class InitSpecMgmt(BaseModel):
    """
    Optional management interface settings.
    Allows setting DHCP clients or static IPs as well as
    the IP MTU.
    """

    ipMTU: Annotated[
        Optional[int],
        Field(description="Set the management interface IP MTU.", title="IP MTU"),
    ] = None
    ipv4DHCP: Annotated[
        Optional[bool],
        Field(description="Enable IPv4 DHCP client.", title="IPv4 DHCP Client"),
    ] = None
    ipv6DHCP: Annotated[
        Optional[bool],
        Field(description="Enable IPv6 DHCP client.", title="IPv6 DHCP Client"),
    ] = None
    staticRoutes: Annotated[
        Optional[List[InitSpecMgmtStaticRoute]],
        Field(
            description="Optional list of static routes to add to the management network instance as part of the initial configuration.",
            title="Static Routes",
        ),
    ] = None


class InitSpec(BaseModel):
    """
    InitSpec defines the desired state of Init
    """

    commitSave: Annotated[
        Optional[bool],
        Field(
            description="Save a startup configuration after each commit.",
            title="Commit Save",
        ),
    ] = None
    mgmt: Annotated[
        Optional[InitSpecMgmt],
        Field(
            description="Optional management interface settings.\nAllows setting DHCP clients or static IPs as well as\nthe IP MTU.",
            title="Mgmt",
        ),
    ] = None
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Optional node selectors to perform initial configuration for.\nIf not provided initialization is performed for all nodes.",
            title="Node Selector",
        ),
    ] = None


class InitDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class InitDeletedResources(RootModel[List[InitDeletedResourceEntry]]):
    root: List[InitDeletedResourceEntry]


class InitMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]
    namespace: str


class ManagementRouterSpec(BaseModel):
    """
    ManagementRouterSpec defines the desired state of ManagementRouter
    """

    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Selects TopoNodes on which to configure the management VRF. When left empty, all TopoNodes are selected.",
            title="Node Selector",
        ),
    ] = None
    nodes: Annotated[
        Optional[List[str]],
        Field(
            description="List of TopoNodes on which to configure the management VRF. When left empty, all TopoNodes are selected.",
            title="Nodes",
        ),
    ] = None


ManagementRouterDeletedResourceEntry = InitDeletedResourceEntry


class ManagementRouterDeletedResources(
    RootModel[List[ManagementRouterDeletedResourceEntry]]
):
    root: List[ManagementRouterDeletedResourceEntry]


ManagementRouterMetadata = InitMetadata


class AppGroup(BaseModel):
    apiVersion: Optional[str] = None
    kind: Optional[str] = None
    name: Optional[str] = None
    preferredVersion: Optional[AppGroupVersion] = None
    versions: Optional[List[AppGroupVersion]] = None


class ResourceHistory(RootModel[List[ResourceHistoryEntry]]):
    root: List[ResourceHistoryEntry]


class Status(BaseModel):
    apiVersion: Optional[str] = None
    details: Optional[StatusDetails] = None
    kind: Optional[str] = None
    string: Optional[str] = None


class Init(BaseModel):
    """
    Init is the Schema for the inits API
    """

    apiVersion: str
    kind: str
    metadata: InitMetadata
    spec: Annotated[
        InitSpec,
        Field(
            description="InitSpec defines the desired state of Init",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="InitStatus defines the observed state of Init", title="Status"
        ),
    ] = None


class InitList(BaseModel):
    """
    InitList is a list of inits
    """

    apiVersion: str
    items: Optional[List[Init]] = None
    kind: str


class ManagementRouter(BaseModel):
    """
    ManagementRouter is the Schema for the managementrouters API
    """

    apiVersion: str
    kind: str
    metadata: ManagementRouterMetadata
    spec: Annotated[
        ManagementRouterSpec,
        Field(
            description="ManagementRouterSpec defines the desired state of ManagementRouter",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="ManagementRouterStatus defines the observed state of ManagementRouter",
            title="Status",
        ),
    ] = None


class ManagementRouterList(BaseModel):
    """
    ManagementRouterList is a list of managementrouters
    """

    apiVersion: str
    items: Optional[List[ManagementRouter]] = None
    kind: str
