# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/eda-labs/openapi/v25.4.1/apps/system.eda.nokia.com/v1alpha1/system.json

from __future__ import annotations
from typing import Annotated, Any, Dict, List, Optional
from pydantic import BaseModel, Field, RootModel


class Cpu(BaseModel):
    """
    CPU monitoring for targets matching this Monitor.
    """

    enabled: Annotated[
        bool, Field(description="Enable or disable CPU monitoring.", title="Enabled")
    ]
    utilization: Annotated[
        Optional[Utilization],
        Field(
            description="Parameters relating to CPU utilization monitoring.",
            title="Thresholds",
        ),
    ] = None


class Disk(BaseModel):
    """
    Disk monitoring for targets matching this Monitor.
    """

    enabled: Annotated[
        bool, Field(description="Enable or disable disk monitoring.", title="Enabled")
    ]
    utilization: Annotated[
        Optional[UtilizationModel],
        Field(
            description="Parameters relating to disk utilization monitoring.",
            title="Thresholds",
        ),
    ] = None


class Memory(BaseModel):
    """
    Memory monitoring for targets matching this Monitor.
    """

    enabled: Annotated[
        bool, Field(description="Enable or disable memory monitoring.", title="Enabled")
    ]
    utilization: Annotated[
        Optional[UtilizationModel1],
        Field(
            description="Parameters relating to memory utilization monitoring.",
            title="Thresholds",
        ),
    ] = None


class Monitor(BaseModel):
    """
    Monitor is the Schema for the monitors API
    """

    apiVersion: str
    kind: str
    metadata: MonitorMetadata
    spec: Annotated[
        Spec,
        Field(
            description="MonitorSpec defines the desired state of Monitor",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Status],
        Field(
            description="MonitorStatus defines the observed state of Monitor",
            title="Status",
        ),
    ] = None


class MonitorAggregateState(BaseModel):
    """
    MonitorAggregateState is the Schema for the monitoraggregatestates API
    """

    apiVersion: str
    kind: str
    metadata: MonitorAggregateStateMetadata
    spec: Annotated[
        SpecModel,
        Field(
            description="MonitorAggregateStateSpec defines the desired state of MonitorAggregateState",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="MonitorAggregateStateStatus defines the observed state of MonitorAggregateState",
            title="Status",
        ),
    ] = None


class MonitorAggregateStateDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class MonitorAggregateStateDeletedResources(
    RootModel[List[MonitorAggregateStateDeletedResourceEntry]]
):
    root: List[MonitorAggregateStateDeletedResourceEntry]


class MonitorAggregateStateList(BaseModel):
    """
    MonitorAggregateStateList is a list of monitoraggregatestates
    """

    apiVersion: str
    items: Optional[List[MonitorAggregateState]] = None
    kind: str


class MonitorAggregateStateMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]
    namespace: str


MonitorDeletedResourceEntry = MonitorAggregateStateDeletedResourceEntry


class MonitorDeletedResources(RootModel[List[MonitorDeletedResourceEntry]]):
    root: List[MonitorDeletedResourceEntry]


class MonitorList(BaseModel):
    """
    MonitorList is a list of monitors
    """

    apiVersion: str
    items: Optional[List[Monitor]] = None
    kind: str


MonitorMetadata = MonitorAggregateStateMetadata


class MonitorSpec(BaseModel):
    """
    The spec of the input Monitor
    """

    cpu: Annotated[
        Optional[Cpu],
        Field(
            description="CPU monitoring for targets matching this Monitor.", title="CPU"
        ),
    ] = None
    disk: Annotated[
        Optional[Disk],
        Field(
            description="Disk monitoring for targets matching this Monitor.",
            title="Disk",
        ),
    ] = None
    memory: Annotated[
        Optional[Memory],
        Field(
            description="Memory monitoring for targets matching this Monitor.",
            title="Memory",
        ),
    ] = None
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Selector to use when including TopoNodes to monitor.",
            title="Node Selector",
        ),
    ] = None
    nodes: Annotated[
        Optional[List[str]],
        Field(description="References to TopoNodes to monitor.", title="Nodes"),
    ] = None


class MonitorState(BaseModel):
    """
    MonitorState is the Schema for the monitorstates API
    """

    apiVersion: str
    kind: str
    metadata: MonitorStateMetadata
    spec: Annotated[
        SpecModel1,
        Field(
            description="MonitorStateSpec defines the desired state of MonitorState",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="MonitorStateStatus defines the observed state of MonitorState",
            title="Status",
        ),
    ] = None


MonitorStateDeletedResourceEntry = MonitorAggregateStateDeletedResourceEntry


class MonitorStateDeletedResources(RootModel[List[MonitorStateDeletedResourceEntry]]):
    root: List[MonitorStateDeletedResourceEntry]


class MonitorStateList(BaseModel):
    """
    MonitorStateList is a list of monitorstates
    """

    apiVersion: str
    items: Optional[List[MonitorState]] = None
    kind: str


MonitorStateMetadata = MonitorAggregateStateMetadata


class Spec(BaseModel):
    """
    MonitorSpec defines the desired state of Monitor
    """

    cpu: Annotated[
        Optional[Cpu],
        Field(
            description="CPU monitoring for targets matching this Monitor.", title="CPU"
        ),
    ] = None
    disk: Annotated[
        Optional[Disk],
        Field(
            description="Disk monitoring for targets matching this Monitor.",
            title="Disk",
        ),
    ] = None
    memory: Annotated[
        Optional[Memory],
        Field(
            description="Memory monitoring for targets matching this Monitor.",
            title="Memory",
        ),
    ] = None
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Selector to use when including TopoNodes to monitor.",
            title="Node Selector",
        ),
    ] = None
    nodes: Annotated[
        Optional[List[str]],
        Field(description="References to TopoNodes to monitor.", title="Nodes"),
    ] = None


class SpecModel(BaseModel):
    """
    MonitorAggregateStateSpec defines the desired state of MonitorAggregateState
    """

    nodes: Annotated[
        Optional[List[str]],
        Field(
            description="List of TopoNodes monitored by this instance", title="Nodes"
        ),
    ] = None


class SpecModel1(BaseModel):
    """
    MonitorStateSpec defines the desired state of MonitorState
    """

    monitorSpec: Annotated[
        MonitorSpec, Field(description="The spec of the input Monitor")
    ]
    node: Annotated[str, Field(description="Reference to the TopoNode being monitored")]
    operatingSystem: Annotated[
        str, Field(description="The operating system of the TopoNode being monitored")
    ]
    version: Annotated[
        str, Field(description="The version of the TopoNode being monitored")
    ]


class Status(BaseModel):
    """
    MonitorStatus defines the observed state of Monitor
    """

    nodes: Annotated[
        Optional[List[str]],
        Field(description="TopoNodes being monitored.", title="Nodes"),
    ] = None


class Utilization(BaseModel):
    """
    Parameters relating to CPU utilization monitoring.
    """

    criticalThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
            ge=1,
            le=100,
            title="Critical Threshold",
        ),
    ] = 95
    fallingDelta: Annotated[
        Optional[int],
        Field(
            description="The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
            ge=1,
            le=25,
            title="Falling Delta",
        ),
    ] = 5
    majorThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
            ge=1,
            le=100,
            title="Major Threshold",
        ),
    ] = 90
    minorThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a minor alarm.",
            ge=1,
            le=100,
            title="Minor Threshold",
        ),
    ] = 80


class UtilizationModel(BaseModel):
    """
    Parameters relating to disk utilization monitoring.
    """

    criticalThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
            ge=1,
            le=100,
            title="Critical Threshold",
        ),
    ] = 95
    fallingDelta: Annotated[
        Optional[int],
        Field(
            description="The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
            ge=1,
            le=25,
            title="Falling Delta",
        ),
    ] = 5
    majorThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
            ge=1,
            le=100,
            title="Major Threshold",
        ),
    ] = 90
    minorThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a minor alarm.",
            ge=1,
            le=100,
            title="Minor Threshold",
        ),
    ] = 80


class UtilizationModel1(BaseModel):
    """
    Parameters relating to memory utilization monitoring.
    """

    criticalThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.",
            ge=1,
            le=100,
            title="Critical Threshold",
        ),
    ] = 95
    fallingDelta: Annotated[
        Optional[int],
        Field(
            description="The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.",
            ge=1,
            le=25,
            title="Falling Delta",
        ),
    ] = 5
    majorThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.",
            ge=1,
            le=100,
            title="Major Threshold",
        ),
    ] = 90
    minorThreshold: Annotated[
        Optional[int],
        Field(
            description="The minimum average utilization over the last 1 minute to trigger a minor alarm.",
            ge=1,
            le=100,
            title="Minor Threshold",
        ),
    ] = 80


UtilizationModel2 = Utilization


UtilizationModel3 = UtilizationModel


UtilizationModel4 = UtilizationModel1
