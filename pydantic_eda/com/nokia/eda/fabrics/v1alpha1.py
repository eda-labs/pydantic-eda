# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/eda-labs/openapi/v25.4.1/apps/fabrics.eda.nokia.com/v1alpha1/fabrics.json
#   timestamp: 2025-05-07T11:43:39+00:00

from __future__ import annotations

from datetime import date
from typing import Annotated, Dict, List, Literal, Optional

from pydantic import BaseModel, Field, RootModel


class RouteLeaking(BaseModel):
    exportPolicy: Annotated[
        str,
        Field(
            description='Reference to a Policy resource to use when evaluating route exports from the DefaultRouter.',
            title='Export Policy',
        ),
    ]
    importPolicy: Annotated[
        str,
        Field(
            description='Reference to a Policy resource to use when evaluating route imports into the DefaultRouter.',
            title='Import Policy',
        ),
    ]


class BorderLeafs(BaseModel):
    asnPool: Annotated[
        Optional[str],
        Field(
            description='Reference to an IndexAllocationPool pool to use for Autonomous System Number allocations.  Used when eBGP is configured as an underlay protocol. This reference will take precedence over the spec.underlayProtocol.asnPool.',
            title='Autonomous System Pool',
        ),
    ] = None
    borderLeafNodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description='Label selector used to select Toponodes to configure as Borderleaf nodes.',
            title='Borderleaf Node Selector',
        ),
    ] = None
    routeLeaking: Annotated[
        Optional[RouteLeaking],
        Field(
            description='Route leaking controlled by routing policies in and out of the DefaultRouters on each node.  If specifided under the Leafs, Spines, SuperSpines, or BorderLeafs those will take precedence.',
            title='Route Leaking',
        ),
    ] = None
    systemPoolIPV4: Annotated[
        Optional[str],
        Field(
            description='Reference to an IPAllocationPool used to dynamically allocate an IPv4 address to system/lo0 interfaces.  This reference will take precedence over the spec.systemPoolIPV4.  Both IPv4 and IPv6 pools can be configured simultaneously for dual-stack system/lo0 interfaces.',
            title='IPv4 Pool - System IP',
        ),
    ] = None
    systemPoolIPV6: Annotated[
        Optional[str],
        Field(
            description='Reference to an IPAllocationPool used to dynamically allocate an IPv6 address to system/lo0 interfaces.  This reference will take precedence over the spec.systemPoolIPV6.  Both IPv4 and IPv6 pools can be configured simultaneously for dual-stack system/lo0 interfaces.',
            title='IPv6 Pool - System IP',
        ),
    ] = None


class Qos(BaseModel):
    egressPolicy: Annotated[Optional[str], Field(title='Egress Policy')] = None
    ingressPolicy: Annotated[Optional[str], Field(title='Ingress Policy')] = None


class InterSwitchLinks(BaseModel):
    linkSelector: Annotated[
        Optional[List[str]],
        Field(
            description='Selects TopoLinks to include in this Fabric, creating an ISL resource if both Nodes in the TopoLink are part of this Fabric or a selected Fabric.',
            title='Link Selector',
        ),
    ] = None
    poolIPV4: Annotated[
        Optional[str],
        Field(
            description='Reference to an IPAllocationPool used to dynamically allocate an IPv4 address to DefaultInterfaces which are members of the ISLs.  Both IPv4 and IPv6 pools can be configured simultaneously for dual-stack DefaultInterfaces.',
            title='IPv4 Pool - InterSwitch Link IP',
        ),
    ] = None
    poolIPV6: Annotated[
        Optional[str],
        Field(
            description='Reference to an IPAllocationPool used to dynamically allocate an IPv6 address to DefaultInterfaces which are members of the ISLs.  Both IPv4 and IPv6 pools can be configured simultaneously for dual-stack DefaultInterfaces.',
            title='IPv6 Pool - InterSwitch Link IP',
        ),
    ] = None
    qos: Annotated[Optional[Qos], Field(title='QoS')] = None
    unnumbered: Annotated[
        Optional[Literal['IPV6']],
        Field(
            description='Enables unnumbered interfaces on the ISL; for IPv6, only link-local addresses are used unless a PoolIPV6 is also specified.  DefaultInterfaces in the ISL are added to the DefaultBGPPeer dynamic neighbor list when using an eBGP underlay.',
            title='Unnumbered',
        ),
    ] = None
    vlanID: Annotated[
        Optional[int],
        Field(
            description='Configures the provided VLAN on the DefaultInterfaces which are members of the ISLs.',
            ge=1,
            le=4094,
            title='VLAN ID - InterSwitch Link',
        ),
    ] = None


class Leafs(BaseModel):
    asnPool: Annotated[
        Optional[str],
        Field(
            description='Reference to an IndexAllocationPool pool to use for Autonomous System Number allocations.  Used when eBGP is configured as an underlay protocol. This reference will take precedence over the spec.underlayProtocol.asnPool.',
            title='Autonomous System Pool',
        ),
    ] = None
    leafNodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description='Label selector used to select Toponodes to configure as Leaf nodes.',
            title='Leaf Node Selector',
        ),
    ] = None
    routeLeaking: Annotated[
        Optional[RouteLeaking],
        Field(
            description='Route leaking controlled by routing policies in and out of the DefaultRouters on each node.  If specifided under the Leafs, Spines, SuperSpines, or BorderLeafs those will take precedence.',
            title='Route Leaking',
        ),
    ] = None
    systemPoolIPV4: Annotated[
        Optional[str],
        Field(
            description='Reference to an IPAllocationPool used to dynamically allocate an IPv4 address to system/lo0 interfaces.  This reference will take precedence over the spec.systemPoolIPV4.  Both IPv4 and IPv6 pools can be configured simultaneously for dual-stack system/lo0 interfaces.',
            title='IPv4 Pool - System IP',
        ),
    ] = None
    systemPoolIPV6: Annotated[
        Optional[str],
        Field(
            description='Reference to an IPAllocationPool used to dynamically allocate an IPv6 address to system/lo0 interfaces.  This reference will take precedence over the spec.systemPoolIPV6.  Both IPv4 and IPv6 pools can be configured simultaneously for dual-stack system/lo0 interfaces.',
            title='IPv6 Pool - System IP',
        ),
    ] = None


class Bfd(BaseModel):
    desiredMinTransmitInt: Annotated[
        Optional[int],
        Field(
            description='The minimum interval in microseconds between transmission of BFD control packets.',
            ge=10000,
            le=100000000,
            title='Transmit Interval',
        ),
    ] = 1000000
    detectionMultiplier: Annotated[
        Optional[int],
        Field(
            description='The number of packets that must be missed to declare this session as down.',
            ge=3,
            le=20,
            title='Multiplier',
        ),
    ] = 3
    enabled: Annotated[
        Optional[bool],
        Field(description='Enable Biforward Detection.', title='Enabled'),
    ] = False
    minEchoReceiveInterval: Annotated[
        Optional[int],
        Field(
            description='The minimum interval between echo packets the local node can receive in microseconds.',
            ge=0,
            le=100000000,
            title='Minimum Echo Receive Interval',
        ),
    ] = 1000000
    requiredMinReceive: Annotated[
        Optional[int],
        Field(
            description='The minimum interval in microseconds between received BFD control packets that this system should support.',
            ge=10000,
            le=100000000,
            title='Receive Interval',
        ),
    ] = 1000000


class Timers(BaseModel):
    connectRetry: Annotated[
        Optional[int],
        Field(
            description='The time interval in seconds between successive attempts to establish a session with a peer.',
            ge=1,
            le=65535,
            title='Connect Retry',
        ),
    ] = None
    holdTime: Annotated[
        Optional[int],
        Field(
            description='The hold-time interval in seconds that the router proposes to the peer in its OPEN message.',
            ge=0,
            le=65535,
            title='Hold Time',
        ),
    ] = None
    keepAlive: Annotated[
        Optional[int],
        Field(
            description='The interval in seconds between successive keepalive messages sent to the peer.',
            ge=0,
            le=21845,
            title='Keep Alive',
        ),
    ] = None
    minimumAdvertisementInterval: Annotated[
        Optional[int],
        Field(
            description='The value assigned to the MinRouteAdvertisementIntervalTimer of RFC 4271, for both EBGP and IBGP sessions.',
            ge=1,
            le=255,
            title='Minimum Advertisement Interval',
        ),
    ] = None


class Bgp(BaseModel):
    autonomousSystem: Annotated[
        Optional[int],
        Field(
            description='Autonomous System used for iBGP peering session, when protocol is set to IBGP providing an autonomousSystem is required.',
            title='Autonomous System',
        ),
    ] = None
    clusterID: Annotated[
        Optional[str],
        Field(
            description='Sets the cluster ID used by DefaultRouteReflectors, when protocol is set to IBGP providing a clusterID is required.',
            title='Cluster ID',
        ),
    ] = None
    exportPolicy: Annotated[
        Optional[List[str]],
        Field(
            description='Reference to a Policy, when left empty or not specified the Fabric will automatically generate a policy for the specified protocols.',
            title='Export Policy',
        ),
    ] = None
    importPolicy: Annotated[
        Optional[List[str]],
        Field(
            description='Reference to a Policy, when left empty or not specified the Fabric will automatically generate a policy for the specified protocols.',
            title='Import Policy',
        ),
    ] = None
    keychain: Annotated[
        Optional[str],
        Field(
            description='Keychain to be used for authentication when overlay protocol is IBGP, ignored otherwise',
            title='Keychain',
        ),
    ] = None
    rrClientNodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description='Label selector used to select Toponodes to configure as DefaultRouteReflectorClients, these are typically Leaf or Borderleaf nodes.  Used on conjunction with rrNodeSelector in order to configure the DefaultBGPPeers for both the DefaultRouteReflectors and DefaultRouteReflectorClients.',
            title='Route Reflector Client Node Selector',
        ),
    ] = None
    rrIPAddresses: Annotated[
        Optional[List[str]],
        Field(
            description='List of route reflector IP addresses not provisioned by this instance of a Fabric resource.  Used with rrClientNodeSelector to configure the DefaultBGPPeers on the selected nodes to peer the list of external route reflector IPs.',
            title='Route Reflector IP Addresses',
        ),
    ] = None
    rrNodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description='Label selector used to select Toponodes to configure as DefaultRouteReflectors, these are typically Spine, Superspine or Borderleaf nodes. Used on conjunction with rrClientNodeSelector in order to configure the DefaultBGPPeers for both the DefaultRouteReflectors and DefaultRouteReflectorClients.',
            title='Route Reflector Node Selector',
        ),
    ] = None
    timers: Annotated[
        Optional[Timers], Field(description='Timer configurations', title='Timers')
    ] = None


class OverlayProtocol(BaseModel):
    bfd: Annotated[
        Optional[Bfd],
        Field(
            description='Enable BFD on overlay protocol', title='Overlay Protocol BFD'
        ),
    ] = None
    bgp: Annotated[
        Optional[Bgp],
        Field(description='Overlay specific BGP properties.', title='BGP'),
    ] = None
    protocol: Annotated[
        Literal['IBGP', 'EBGP'],
        Field(
            description='List of routing protocols to used to advertise EVPN routes for overlay services.  When EBGP is used, the BGP properties configured under the spec.underlayProtocol will be used.',
            title='Protocol',
        ),
    ]


class Spines(BaseModel):
    asnPool: Annotated[
        Optional[str],
        Field(
            description='Reference to an IndexAllocationPool pool to use for Autonomous System Number allocations.  Used when eBGP is configured as an underlay protocol. This reference will take precedence over the spec.underlayProtocol.asnPool.',
            title='Autonomous System Pool',
        ),
    ] = None
    routeLeaking: Annotated[
        Optional[RouteLeaking],
        Field(
            description='Route leaking controlled by routing policies in and out of the DefaultRouters on each node.  If specifided under the Leafs, Spines, SuperSpines, or BorderLeafs those will take precedence.',
            title='Route Leaking',
        ),
    ] = None
    spineNodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description='Label selector used to select Toponodes to configure as Spine nodes.',
            title='Spine Node Selector',
        ),
    ] = None
    systemPoolIPV4: Annotated[
        Optional[str],
        Field(
            description='Reference to an IPAllocationPool used to dynamically allocate an IPv4 address to system/lo0 interfaces.  This reference will take precedence over the spec.systemPoolIPV4.  Both IPv4 and IPv6 pools can be configured simultaneously for dual-stack system/lo0 interfaces.',
            title='IPv4 Pool - System IP',
        ),
    ] = None
    systemPoolIPV6: Annotated[
        Optional[str],
        Field(
            description='Reference to an IPAllocationPool used to dynamically allocate an IPv6 address to system/lo0 interfaces.  This reference will take precedence over the spec.systemPoolIPV6.  Both IPv4 and IPv6 pools can be configured simultaneously for dual-stack system/lo0 interfaces.',
            title='IPv6 Pool - System IP',
        ),
    ] = None


class SuperSpines(BaseModel):
    asnPool: Annotated[
        Optional[str],
        Field(
            description='Reference to an IndexAllocationPool pool to use for Autonomous System Number allocations.  Used when eBGP is configured as an underlay protocol. This reference will take precedence over the spec.underlayProtocol.asnPool.',
            title='Autonomous System Pool',
        ),
    ] = None
    routeLeaking: Annotated[
        Optional[RouteLeaking],
        Field(
            description='Route leaking controlled by routing policies in and out of the DefaultRouters on each node.  If specifided under the Leafs, Spines, SuperSpines, or BorderLeafs those will take precedence.',
            title='Route Leaking',
        ),
    ] = None
    superSpineNodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description='Label selector used to select Toponodes to configure as Superspine nodes.',
            title='Superspine Node Selector',
        ),
    ] = None
    systemPoolIPV4: Annotated[
        Optional[str],
        Field(
            description='Reference to an IPAllocationPool used to dynamically allocate an IPv4 address to system/lo0 interfaces.  This reference will take precedence over the spec.systemPoolIPV4.  Both IPv4 and IPv6 pools can be configured simultaneously for dual-stack system/lo0 interfaces.',
            title='IPv4 Pool - System IP',
        ),
    ] = None
    systemPoolIPV6: Annotated[
        Optional[str],
        Field(
            description='Reference to an IPAllocationPool used to dynamically allocate an IPv6 address to system/lo0 interfaces.  This reference will take precedence over the spec.systemPoolIPV6.  Both IPv4 and IPv6 pools can be configured simultaneously for dual-stack system/lo0 interfaces.',
            title='IPv6 Pool - System IP',
        ),
    ] = None


class BgpModel(BaseModel):
    asnPool: Annotated[
        Optional[str],
        Field(
            description='Reference to an IndexAllocationPool pool to use for Autonomous System Number allocations.  Used when eBGP is configured as an underlay protocol. If specified under the Leaf/Spine/Superspine/Borderleaf those will take precedence.',
            title='Autonomous System Pool',
        ),
    ] = None
    exportPolicy: Annotated[
        Optional[List[str]],
        Field(
            description='Reference to a Policy, when left empty or not specified the Fabric will automatically generate a policy for the specified protocols.',
            title='Export Policy',
        ),
    ] = None
    importPolicy: Annotated[
        Optional[List[str]],
        Field(
            description='Reference to a Policy, when left empty or not specified the Fabric will automatically generate a policy for the specified protocols.',
            title='Import Policy',
        ),
    ] = None
    keychain: Annotated[
        Optional[str],
        Field(description='Keychain to be used for authentication', title='Keychain'),
    ] = None
    timers: Annotated[
        Optional[Timers], Field(description='Timer configurations', title='Timers')
    ] = None


class UnderlayProtocol(BaseModel):
    bfd: Annotated[
        Optional[Bfd],
        Field(
            description='Enable BFD on underlay protocol', title='Underlay Protocol BFD'
        ),
    ] = None
    bgp: Annotated[
        BgpModel, Field(description='Underlay specific BGP properties.', title='BGP')
    ]
    protocol: Annotated[
        List[Literal['EBGP']],
        Field(
            description='List of routing protocols to used between peers of an ISL.  Multiple protocols may be listed, if so multiple protocols will be used.',
            title='Protocol',
        ),
    ]


class Spec(BaseModel):
    borderLeafs: Annotated[Optional[BorderLeafs], Field(title='Borderleafs')] = None
    fabricSelector: Annotated[
        Optional[List[str]],
        Field(
            description='Selects Fabric resources when connecting multiple Fabrics together. Only one Fabric needs the selector, typically the upper layer (e.g., Superspine) selecting the lower layer (e.g., a pod fabric of leafs and spines). This helps build complete Fabrics in smaller instances of the Fabric resource. This instance selecting other fabrics must also select the InterSwitchLinks connecting itself to the selected Fabrics.',
            title='Fabric Selector',
        ),
    ] = None
    interSwitchLinks: Annotated[
        Optional[InterSwitchLinks], Field(title='InterSwitchLinks')
    ] = None
    leafs: Annotated[Optional[Leafs], Field(title='Leafs')] = None
    overlayProtocol: Annotated[
        Optional[OverlayProtocol],
        Field(description='Set the overlay protocol used', title='Overlay Protocol'),
    ] = None
    routeLeaking: Annotated[
        Optional[RouteLeaking],
        Field(
            description='Route leaking controlled by routing policies in and out of the DefaulRouters on each node.  If specifided under the Leafs, Spines, SuperSpines, or BorderLeafs those will take precedence.',
            title='Route Leaking',
        ),
    ] = None
    spines: Annotated[Optional[Spines], Field(title='Spines')] = None
    superSpines: Annotated[Optional[SuperSpines], Field(title='Superspines')] = None
    systemPoolIPV4: Annotated[
        Optional[str],
        Field(
            description='Reference to an IPAllocationPool used to dynamically allocate an IPv4 address to system/lo0 interfaces.  If specified under the Leaf/Spine/Superspine/Borderleaf those will take precedence.  Both IPv4 and IPv6 pools can be configured simultaneously for dual-stack system/lo0 interfaces.',
            title='IPv4 Pool - System IP',
        ),
    ] = None
    systemPoolIPV6: Annotated[
        Optional[str],
        Field(
            description='Reference to an IPAllocationPool used to dynamically allocate an IPv6 address to system/lo0 interfaces.  If specified under the Leaf/Spine/Superspine/Borderleaf those will take precedence.  Both IPv4 and IPv6 pools can be configured simultaneously for dual-stack system/lo0 interfaces.',
            title='IPv6 Pool - System IP',
        ),
    ] = None
    underlayProtocol: Annotated[
        Optional[UnderlayProtocol],
        Field(description='Set the underlay protocol used', title='Underlay Protocol'),
    ] = None


class BorderLeafNode(BaseModel):
    node: Annotated[
        Optional[str], Field(description='Name of the TopoNode.', title='Node')
    ] = None
    operatingSystem: Annotated[
        Optional[str],
        Field(
            description='Operating system running on the node.',
            title='Operating System',
        ),
    ] = None
    operatingSystemVersion: Annotated[
        Optional[str],
        Field(
            description='Operating system version running on the node.',
            title='Operating System Version',
        ),
    ] = None
    underlayAutonomousSystem: Annotated[
        Optional[int],
        Field(
            description='Underlay Autonomous System used for eBGP peering session, when protocol is set to eBGP this is required.',
            title='Underlay Autonomous System',
        ),
    ] = None


class LeafNode(BaseModel):
    node: Annotated[
        Optional[str], Field(description='Name of the TopoNode.', title='Node')
    ] = None
    operatingSystem: Annotated[
        Optional[str],
        Field(
            description='Operating system running on the node.',
            title='Operating System',
        ),
    ] = None
    operatingSystemVersion: Annotated[
        Optional[str],
        Field(
            description='Operating system version running on the node.',
            title='Operating System Version',
        ),
    ] = None
    underlayAutonomousSystem: Annotated[
        Optional[int],
        Field(
            description='Underlay Autonomous System used for eBGP peering session, when protocol is set to eBGP this is required.',
            title='Underlay Autonomous System',
        ),
    ] = None


class SpineNode(BaseModel):
    node: Annotated[
        Optional[str], Field(description='Name of the TopoNode.', title='Node')
    ] = None
    operatingSystem: Annotated[
        Optional[str],
        Field(
            description='Operating system running on the node.',
            title='Operating System',
        ),
    ] = None
    operatingSystemVersion: Annotated[
        Optional[str],
        Field(
            description='Operating system version running on the node.',
            title='Operating System Version',
        ),
    ] = None
    underlayAutonomousSystem: Annotated[
        Optional[int],
        Field(
            description='Underlay Autonomous System used for eBGP peering session, when protocol is set to eBGP this is required.',
            title='Underlay Autonomous System',
        ),
    ] = None


class SuperSpineNode(BaseModel):
    node: Annotated[
        Optional[str], Field(description='Name of the TopoNode.', title='Node')
    ] = None
    operatingSystem: Annotated[
        Optional[str],
        Field(
            description='Operating system running on the node.',
            title='Operating System',
        ),
    ] = None
    operatingSystemVersion: Annotated[
        Optional[str],
        Field(
            description='Operating system version running on the node.',
            title='Operating System Version',
        ),
    ] = None
    underlayAutonomousSystem: Annotated[
        Optional[int],
        Field(
            description='Underlay Autonomous System used for eBGP peering session, when protocol is set to eBGP this is required.',
            title='Underlay Autonomous System',
        ),
    ] = None


class Status(BaseModel):
    borderLeafNodes: Annotated[
        Optional[List[BorderLeafNode]],
        Field(
            description='List of border leaf nodes in the Fabric.',
            title='Border Leaf Nodes',
        ),
    ] = None
    health: Annotated[
        Optional[int],
        Field(
            description='Indicates the health score of the Fabric.  The health score of the Fabric is determined by the aggregate health score of the resources emited by the Fabric such as ISL, DefaultRouteReflectors etc.',
            title='Health',
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description='Indicates the reason for the health score.',
            title='Health Score Reason',
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description='The time when the state of the resource last changed.',
            title='Last Change',
        ),
    ] = None
    leafNodes: Annotated[
        Optional[List[LeafNode]],
        Field(description='List of leaf nodes in the Fabric.', title='Leaf Nodes'),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description='Operational state of the Fabric.  The operational state of the fabric is determined by monitoring the operational state of the following resources (if applicable): DefaultRouters, ISLs.',
            title='Operational State',
        ),
    ] = None
    spineNodes: Annotated[
        Optional[List[SpineNode]],
        Field(description='List of spine nodes in the Fabric.', title='Spine Nodes'),
    ] = None
    superSpineNodes: Annotated[
        Optional[List[SuperSpineNode]],
        Field(
            description='List of super spine nodes in the Fabric.',
            title='Superspine Nodes',
        ),
    ] = None


class FabricDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class FabricDeletedResources(RootModel[List[FabricDeletedResourceEntry]]):
    root: List[FabricDeletedResourceEntry]


class FabricMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class BgpModel1(BaseModel):
    afiSAFI: Annotated[
        Optional[List[str]],
        Field(
            description='Which AFI and SAFI to advertise on the BGP peering session. Options: ipv4unicast, ipv6unicast, l2vpnevpn',
            title='AFI SAFI',
        ),
    ] = None
    bgpGroup: Annotated[
        Optional[str],
        Field(description='Reference to a DefaultBgpGroup.', title='BGP Group'),
    ] = None
    enabled: Annotated[
        bool,
        Field(
            description='Enable or disable BGP peering between the two endpoints of the ISL. [default=false]',
            title='Enabled',
        ),
    ]
    exportPolicy: Annotated[
        Optional[List[str]],
        Field(
            description='Reference to a RoutingPolicy to use when evaluating route exports from the DefaultRouter.',
            title='Export Policy',
        ),
    ] = None
    importPolicy: Annotated[
        Optional[List[str]],
        Field(
            description='Reference to a RoutingPolicy to use when evaluating route imports into the DefaultRouter.',
            title='Import Policy',
        ),
    ] = None
    keychain: Annotated[
        Optional[str],
        Field(description='Keychain to be used for authentication', title='Keychain'),
    ] = None
    localInterfaceAS: Annotated[
        int,
        Field(
            description='The Autonomous System to configure on the Local Interface.',
            ge=0,
            le=4294967295,
            title='Local Interface AS',
        ),
    ]
    remoteInterfaceAS: Annotated[
        int,
        Field(
            description='The Autonomous System to configure on the Remote Interface.',
            ge=0,
            le=4294967295,
            title='Remote Interface AS',
        ),
    ]


class SpecModel(BaseModel):
    bfd: Annotated[
        Optional[Bfd],
        Field(
            description='Enable or disable BFD on the ISL. [default=false]', title='BFD'
        ),
    ] = None
    bgp: Annotated[Optional[BgpModel1], Field(title='BGP')] = None
    localDefaultRouter: Annotated[
        str,
        Field(
            description='Reference to the DefautlRouter associated with the local Interface in which the ISL will be provisioned.',
            title='Local Default Router',
        ),
    ]
    localInterface: Annotated[
        str, Field(description='Reference to an Interface.', title='Local Interface')
    ]
    poolIPV4: Annotated[
        Optional[str],
        Field(
            description='Reference to an IPv4 allocation pool to use for ISL subnet allocations.',
            title='IPv4 Allocation Pool',
        ),
    ] = None
    poolIPV6: Annotated[
        Optional[str],
        Field(
            description='Reference to an IPv6 allocation pool to use for ISL subnet allocations.',
            title='IPv6 Allocation Pool',
        ),
    ] = None
    qos: Annotated[Optional[Qos], Field(title='QoS')] = None
    remoteDefaultRouter: Annotated[
        str,
        Field(
            description='Reference to the DefautlRouter associated with the remote Interface in which the ISL will be provisioned.',
            title='Remote Default Router',
        ),
    ]
    remoteInterface: Annotated[
        str, Field(description='Reference to an Interface', title='Remote Interface')
    ]
    unnumbered: Annotated[
        Optional[Literal['IPV6']],
        Field(
            description='Enables the use of unnumbered interfaces on the ISL. For IPv6, no IP address are configured on the sub-interface and only the link local address will be used. If any allocation pool is specified for IPv6 that will take precedence and IPs will be assigned to the interfaces.  When using eBGP for an underlay protocol, the DefaultInterfaces which are a part of the ISL will be added to the BGP dynamic neighbor list.',
            title='Unnumbered',
        ),
    ] = None
    vlanID: Annotated[
        Optional[int],
        Field(
            description='Single VLAN tag value between 1-4094.',
            ge=1,
            le=4094,
            title='VLAN ID',
        ),
    ] = None


class LocalInterface(BaseModel):
    IPv4Address: Annotated[
        Optional[str],
        Field(description='Local Interface IPv4 address', title='IPv4 Address'),
    ] = None
    IPv6Address: Annotated[
        Optional[str],
        Field(description='Local Interface IPv4 address', title='IPv6 Address'),
    ] = None
    defaultInterface: Annotated[
        Optional[str],
        Field(
            description='Reference to the DefaulInterface assocaited with the local interface',
            title='Default Interface',
        ),
    ] = None
    node: Annotated[
        Optional[str],
        Field(
            description='Reference to the TopoNode on which the local interface is configured',
            title='Node',
        ),
    ] = None


class RemoteInterface(BaseModel):
    IPv4Address: Annotated[
        Optional[str],
        Field(description='Remote Interface IPv4 address', title='IPv4 Address'),
    ] = None
    IPv6Address: Annotated[
        Optional[str],
        Field(description='Remote Interface IPv6 address', title='IPv6 Address'),
    ] = None
    defaultInterface: Annotated[
        Optional[str],
        Field(
            description='Reference to the DefaulInterface assocaited with the remote interface',
            title='Default Interface',
        ),
    ] = None
    node: Annotated[
        Optional[str],
        Field(
            description='Reference to the TopoNode on which the remote interface is configured',
            title='Node',
        ),
    ] = None


class Status1Model(BaseModel):
    health: Annotated[
        Optional[int],
        Field(description='Indicates the health score of the ISL', title='Health'),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description='Indicates the reason for the health score',
            title='Health Score Reason',
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description='The time when the state of the resource last changed',
            title='Last Change',
        ),
    ] = None
    localInterface: Annotated[
        Optional[LocalInterface],
        Field(description='Local Interface', title='Local Interface'),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(description='Operational state of the ISL', title='Operational State'),
    ] = None
    remoteInterface: Annotated[
        Optional[RemoteInterface],
        Field(description='Remote Interface', title='Remote Interface'),
    ] = None


class ISLDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class ISLDeletedResources(RootModel[List[ISLDeletedResourceEntry]]):
    root: List[ISLDeletedResourceEntry]


class ISLMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class Fabric(BaseModel):
    apiVersion: str
    kind: str
    metadata: FabricMetadata
    spec: Annotated[
        Spec,
        Field(
            description='The Fabric defines the desired state of a Fabric resource, enabling the automation and management of data center network fabrics. It includes configurations for IP address allocation pools, network topology roles (Leafs, Spines, SuperSpines, BorderLeafs), inter-switch links, and network protocols (underlay and overlay). The specification allows for detailed control over routing strategies, including ASN allocations for BGP-based protocols, and supports advanced features like BFD.',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status],
        Field(
            description='FabricStatus defines the observed state of Fabric',
            title='Status',
        ),
    ] = None


class FabricList(BaseModel):
    apiVersion: str
    items: Optional[List[Fabric]] = None
    kind: str


class ISL(BaseModel):
    apiVersion: str
    kind: str
    metadata: ISLMetadata
    spec: Annotated[
        SpecModel,
        Field(
            description='The ISL enables the configuration and management of direct links between Nodes. This resource allows for specifying IPv4 and IPv6 allocation pools, enabling BFD for fast failure detection, and configuring VLAN IDs for the ISL. It also supports BGP peering between the endpoints, with options for setting autonomous systems, AFI/SAFI configurations, and import/export routing policies.',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status1Model],
        Field(
            description='ISLStatus defines the observed state of ISL', title='Status'
        ),
    ] = None


class ISLList(BaseModel):
    apiVersion: str
    items: Optional[List[ISL]] = None
    kind: str
