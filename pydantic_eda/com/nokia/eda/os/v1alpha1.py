# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/eda-labs/openapi/v25.4.1/apps/os.eda.nokia.com/v1alpha1/os.json
#   timestamp: 2025-05-07T11:43:52+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Dict, List, Literal, Optional, Union

from pydantic import BaseModel, Field, RootModel


class Checks(Enum):
    Interface = 'Interface'
    DefaultBGP = 'DefaultBGP'
    PingISL = 'PingISL'
    PingSystem = 'PingSystem'


class ChecksModel(BaseModel):
    checks: Annotated[
        Union[List[str], Checks],
        Field(
            description='Checks to run before (pre) and after (post) any image changes',
            title='checks',
        ),
    ]
    force: Annotated[
        bool, Field(description='Do not prompt for user input, even if checks fail')
    ]
    skip: Annotated[bool, Field(description='Do not run any checks')]


class Drains(BaseModel):
    interfaceDisableSelectors: Annotated[
        Optional[List[str]], Field(title='InterfaceDisableSelectors')
    ] = None
    minimumWaitTime: Annotated[Optional[int], Field(title='minimumWaitTime')] = None
    skip: Annotated[
        Optional[bool], Field(description='Do not run any drains', title='skip')
    ] = None


class Prompt(Enum):
    AfterPreChecks = 'AfterPreChecks'
    AfterPostChecks = 'AfterPostChecks'


class Tranche(BaseModel):
    name: Annotated[Optional[str], Field(title='name')] = None
    nodeSelector: Annotated[Optional[List[str]], Field(title='nodeSelector')] = None


class Spec(BaseModel):
    canaries: Annotated[Optional[List[str]], Field(title='canaries')] = None
    checks: Annotated[Optional[ChecksModel], Field(title='checks')] = None
    drains: Annotated[Optional[Drains], Field(title='drains')] = None
    nodeProfile: Annotated[Optional[str], Field(title='nodeProfile')] = None
    nodeSelector: Annotated[Optional[List[str]], Field(title='nodeSelector')] = None
    nodes: Annotated[Optional[List[str]], Field(title='nodes')] = None
    prompt: Annotated[Optional[Union[List[str], Prompt]], Field(title='prompt')] = None
    tranches: Annotated[Optional[List[Tranche]], Field(title='tranches')] = None
    type: Annotated[Literal['node', 'nodeselector', 'tranche'], Field(title='type')]
    version: Annotated[Optional[str], Field(title='version')] = None


class Status(BaseModel):
    id: Annotated[Optional[int], Field(description='Id', title='ID')] = None
    result: Annotated[
        Optional[str], Field(description='Aggregate result of the Flow', title='Result')
    ] = None


class DeployImageDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class DeployImageDeletedResources(RootModel[List[DeployImageDeletedResourceEntry]]):
    root: List[DeployImageDeletedResourceEntry]


class DeployImageMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class DeployImage(BaseModel):
    apiVersion: str
    kind: str
    metadata: DeployImageMetadata
    spec: Annotated[
        Spec,
        Field(
            description='DeployImageSpec defines the desired state of DeployImage',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status],
        Field(
            description='DeployImageStatus defines the observed state of DeployImage',
            title='Status',
        ),
    ] = None


class DeployImageList(BaseModel):
    apiVersion: str
    items: Optional[List[DeployImage]] = None
    kind: str
