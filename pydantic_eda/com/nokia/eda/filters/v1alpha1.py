# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/eda-labs/openapi/v25.4.1/apps/filters.eda.nokia.com/v1alpha1/filters.json
#   timestamp: 2025-05-07T11:43:43+00:00

from __future__ import annotations

from typing import Annotated, Any, Dict, List, Literal, Optional

from pydantic import BaseModel, Field, RootModel


class RateLimit(BaseModel):
    burstSize: Annotated[
        Optional[int],
        Field(description='The maximum burst size in bytes.', title='Burst Size'),
    ] = None
    entrySpecificPolicer: Annotated[
        Optional[bool],
        Field(
            description='Controls policer instantiation: false for shared instance, true for per-entry instances',
            title='Entry Specific Policer',
        ),
    ] = False
    peakRate: Annotated[
        Optional[int],
        Field(description='The peak rate in kilobytes per second.', title='Peak Rate'),
    ] = None
    scope: Annotated[
        Optional[Literal['Global', 'Subinterface']],
        Field(
            description='Determines how the policer is applied across subinterfaces. Global applies the policer across all subinterfaces, while Subinterface applies it individually to each subinterface.',
            title='Scope',
        ),
    ] = 'Global'


class IpEntry(BaseModel):
    action: Annotated[
        Optional[Literal['Drop', 'Accept', 'RateLimit']],
        Field(
            description="An action to take, either 'Accept','Drop', or 'RateLimit'.",
            title='Action',
        ),
    ] = None
    destinationPortName: Annotated[
        Optional[
            Literal[
                'ACAP',
                'AFP-TCP',
                'ARNS',
                'ASF-RMCP',
                'ASHARE',
                'ATALK-RM',
                'AURP',
                'AUTH',
                'BFD',
                'BFD-ECHO',
                'BFTP',
                'BGMP',
                'BGP',
                'BOOTPC',
                'BOOTPS',
                'CCSO-NS',
                'CHARGEN',
                'CISCO-TDP',
                'CITADEL',
                'CLEARCASE',
                'COMMERCE',
                'COURIER',
                'DAYTIME',
                'DHCP-FAILOVER',
                'DHCPV6-CLIENT',
                'DHCPV6-SERVER',
                'DICOM',
                'DISCARD',
                'DNSIX',
                'DOMAIN',
                'DSP',
                'ECHO',
                'EPP',
                'ESRO',
                'EXEC',
                'FINGER',
                'FTP',
                'FTP-DATA',
                'FTPS',
                'FTPS-DATA',
                'GODI',
                'GOPHER',
                'GTP-C',
                'GTP-PRIME',
                'GTP-U',
                'HA-CLUSTER',
                'HOSTNAME',
                'HP-ALARM-MGR',
                'HTTP',
                'HTTP-ALT',
                'HTTP-MGMT',
                'HTTP-RPC',
                'HTTPS',
                'IEEE-MMS-SSL',
                'IMAP',
                'IMAP3',
                'IMAPS',
                'IPP',
                'IPSEC',
                'IPX',
                'IRC',
                'IRIS-BEEP',
                'ISAKMP',
                'ISAKMP-NAT',
                'ISCSI',
                'ISO-TSAP',
                'KERBEROS',
                'KERBEROS-ADM',
                'KLOGIN',
                'KPASSWD',
                'KSHELL',
                'L2TP',
                'LDAP',
                'LDAPS',
                'LDP',
                'LMP',
                'LOGIN',
                'LPD',
                'LSP-PING',
                'MAC-SERVER-ADM',
                'MATIP-A',
                'MATIP-B',
                'MICRO-BFD',
                'MICROSOFT-DS',
                'MOBILE-IP',
                'MONITOR',
                'MPP',
                'MS-EXCHANGE',
                'MSDP',
                'MSP',
                'MSSQL-M',
                'MSSQL-S',
                'MULTIHOP-BFD',
                'NAS',
                'NCP',
                'NETBIOS-DATA',
                'NETBIOS-NS',
                'NETBIOS-SS',
                'NETNEWS',
                'NETRJS-1',
                'NETRJS-2',
                'NETRJS-3',
                'NETRJS-4',
                'NETWALL',
                'NEW-RWHO',
                'NFS',
                'NNTP',
                'NNTPS',
                'NTP',
                'ODMR',
                'OLSR',
                'OPENVPN',
                'PIM-AUTO-RP',
                'PKIX-TIMESTAMP',
                'POP2',
                'POP3',
                'POP3S',
                'PPTP',
                'PRINT-SRV',
                'PTP-EVENT',
                'PTP-GENERAL',
                'QMTP',
                'QOTD',
                'RADIUS',
                'RADIUS-ACCT',
                'REMOTE-MAIL',
                'REMOTEFS',
                'REMOTECMD',
                'RIP',
                'RJE',
                'RLP',
                'RLZDB',
                'RMC',
                'RMONITOR',
                'RPC2PORTMAP',
                'RSYNC',
                'RTELNET',
                'RTSP',
                'SGMP',
                'SILC',
                'SMUX',
                'SNA-GW',
                'SNMP',
                'SNMP-TRAP',
                'SNPP',
                'SMTP',
                'SQL-SVCS',
                'SQL',
                'SSH',
                'SUBMISSION',
                'SUNRPC',
                'SVCLOC',
                'SYSLOG',
                'SYSTAT',
                'TACACS',
                'TALK',
                'TCPMUX',
                'TCPNETHASPSRV',
                'TFTP',
                'TIME',
                'TIMED',
                'UPS',
                'XDMCP',
                'XNS-CH',
                'XNS-MAIL',
                'XNS-TIME',
                'Z3950',
            ]
        ],
        Field(
            description='Destination port to match by name.',
            title='Destination Port Name',
        ),
    ] = None
    destinationPortNumber: Annotated[
        Optional[int],
        Field(
            description='Destination port to match by numerical value.',
            ge=0,
            le=65535,
            title='Destination Port Number',
        ),
    ] = None
    destinationPortOperator: Annotated[
        Optional[Literal['Equals', 'GreaterOrEquals', 'LessOrEquals']],
        Field(
            description='Operator to use when matching destinationPort, either Equals, GreaterOrEquals, or LessOrEquals.',
            title='Destination Port Operator',
        ),
    ] = None
    destinationPortRange: Annotated[
        Optional[str],
        Field(
            description='Range of destination ports to match, in the format n-m, e.g. 100-200,  The start and end of the range must be port numbers.',
            title='Destination Port Range',
        ),
    ] = None
    destinationPrefix: Annotated[
        Optional[str],
        Field(description='Destination prefix to match.', title='Destination Prefix'),
    ] = None
    firstFragment: Annotated[
        Optional[bool],
        Field(description='Match the first fragment only.', title='First Fragment'),
    ] = None
    fragment: Annotated[
        Optional[bool], Field(description='Match any fragment.', title='Fragment')
    ] = None
    icmpCode: Annotated[
        Optional[List[int]],
        Field(
            description='Match a specific ICMP code, as a number between 0-255, e.g. 0.',
            max_length=255,
            min_length=0,
            title='ICMP Code',
        ),
    ] = None
    icmpTypeName: Annotated[
        Optional[
            Literal[
                'DestUnreachable',
                'Echo',
                'EchoReply',
                'EchoRequest',
                'McastRtrAdv',
                'McastRtrSolicit',
                'McastRtrTerm',
                'MldDone',
                'MldQuery',
                'MldReport',
                'MldV2',
                'NeighborAdvertise',
                'NeighborSolicit',
                'NodeInfoQuery',
                'NodeInfoResponse',
                'PacketTooBig',
                'ParamProblem',
                'Redirect',
                'RouterAdvertise',
                'RouterRenumber',
                'RouterSolicit',
                'SourceQuench',
                'TimeExceeded',
                'Timestamp',
                'TimestampReply',
            ]
        ],
        Field(
            description='Match a specific ICMP type by name, e.g. dest-unreachable.',
            title='ICMP Type Name',
        ),
    ] = None
    icmpTypeNumber: Annotated[
        Optional[int],
        Field(
            description='Match a specific ICMP type by number.',
            ge=0,
            le=255,
            title='ICMP Type Number',
        ),
    ] = None
    protocolName: Annotated[
        Optional[
            Literal[
                'AH',
                'EGP',
                'EIGRP',
                'ESP',
                'GGP',
                'GRE',
                'ICMP',
                'ICMP6',
                'IDRP',
                'IGMP',
                'IGP',
                'IPV4',
                'IPV6',
                'IPV6-DEST-OPTS',
                'IPV6-HOP',
                'L2TP',
                'MPLS-IN-IP',
                'NO-NEXT-HDR',
                'OSPF',
                'PIM',
                'ROHC',
                'RSVP',
                'SCTP',
                'ST',
                'TCP',
                'UDP',
                'VRRP',
            ]
        ],
        Field(
            description='Match a specific IP protocol name (specified in the type field of the IP header).',
            title='Protocol Name',
        ),
    ] = None
    protocolNumber: Annotated[
        Optional[int],
        Field(
            description='Match a specific IP protocol number (specified in the type field of the IP header).',
            ge=0,
            le=255,
            title='Protocol Number',
        ),
    ] = None
    rateLimit: Annotated[
        Optional[RateLimit],
        Field(
            description="Rate limit to apply when the action is 'RateLimit'.",
            title='Rate Limit',
        ),
    ] = None
    sourcePortName: Annotated[
        Optional[
            Literal[
                'ACAP',
                'AFP-TCP',
                'ARNS',
                'ASF-RMCP',
                'ASHARE',
                'ATALK-RM',
                'AURP',
                'AUTH',
                'BFD',
                'BFD-ECHO',
                'BFTP',
                'BGMP',
                'BGP',
                'BOOTPC',
                'BOOTPS',
                'CCSO-NS',
                'CHARGEN',
                'CISCO-TDP',
                'CITADEL',
                'CLEARCASE',
                'COMMERCE',
                'COURIER',
                'DAYTIME',
                'DHCP-FAILOVER',
                'DHCPV6-CLIENT',
                'DHCPV6-SERVER',
                'DICOM',
                'DISCARD',
                'DNSIX',
                'DOMAIN',
                'DSP',
                'ECHO',
                'EPP',
                'ESRO',
                'EXEC',
                'FINGER',
                'FTP',
                'FTP-DATA',
                'FTPS',
                'FTPS-DATA',
                'GODI',
                'GOPHER',
                'GTP-C',
                'GTP-PRIME',
                'GTP-U',
                'HA-CLUSTER',
                'HOSTNAME',
                'HP-ALARM-MGR',
                'HTTP',
                'HTTP-ALT',
                'HTTP-MGMT',
                'HTTP-RPC',
                'HTTPS',
                'IEEE-MMS-SSL',
                'IMAP',
                'IMAP3',
                'IMAPS',
                'IPP',
                'IPSEC',
                'IPX',
                'IRC',
                'IRIS-BEEP',
                'ISAKMP',
                'ISAKMP-NAT',
                'ISCSI',
                'ISO-TSAP',
                'KERBEROS',
                'KERBEROS-ADM',
                'KLOGIN',
                'KPASSWD',
                'KSHELL',
                'L2TP',
                'LDAP',
                'LDAPS',
                'LDP',
                'LMP',
                'LOGIN',
                'LPD',
                'LSP-PING',
                'MAC-SERVER-ADM',
                'MATIP-A',
                'MATIP-B',
                'MICRO-BFD',
                'MICROSOFT-DS',
                'MOBILE-IP',
                'MONITOR',
                'MPP',
                'MS-EXCHANGE',
                'MSDP',
                'MSP',
                'MSSQL-M',
                'MSSQL-S',
                'MULTIHOP-BFD',
                'NAS',
                'NCP',
                'NETBIOS-DATA',
                'NETBIOS-NS',
                'NETBIOS-SS',
                'NETNEWS',
                'NETRJS-1',
                'NETRJS-2',
                'NETRJS-3',
                'NETRJS-4',
                'NETWALL',
                'NEW-RWHO',
                'NFS',
                'NNTP',
                'NNTPS',
                'NTP',
                'ODMR',
                'OLSR',
                'OPENVPN',
                'PIM-AUTO-RP',
                'PKIX-TIMESTAMP',
                'POP2',
                'POP3',
                'POP3S',
                'PPTP',
                'PRINT-SRV',
                'PTP-EVENT',
                'PTP-GENERAL',
                'QMTP',
                'QOTD',
                'RADIUS',
                'RADIUS-ACCT',
                'REMOTE-MAIL',
                'REMOTEFS',
                'REMOTECMD',
                'RIP',
                'RJE',
                'RLP',
                'RLZDB',
                'RMC',
                'RMONITOR',
                'RPC2PORTMAP',
                'RSYNC',
                'RTELNET',
                'RTSP',
                'SGMP',
                'SILC',
                'SMUX',
                'SNA-GW',
                'SNMP',
                'SNMP-TRAP',
                'SNPP',
                'SMTP',
                'SQL-SVCS',
                'SQL',
                'SSH',
                'SUBMISSION',
                'SUNRPC',
                'SVCLOC',
                'SYSLOG',
                'SYSTAT',
                'TACACS',
                'TALK',
                'TCPMUX',
                'TCPNETHASPSRV',
                'TFTP',
                'TIME',
                'TIMED',
                'UPS',
                'XDMCP',
                'XNS-CH',
                'XNS-MAIL',
                'XNS-TIME',
                'Z3950',
            ]
        ],
        Field(description='Source port to match by name.', title='Source Port Name'),
    ] = None
    sourcePortNumber: Annotated[
        Optional[int],
        Field(
            description='Source port to match by numerical value.',
            ge=0,
            le=65535,
            title='Source Port Number',
        ),
    ] = None
    sourcePortOperator: Annotated[
        Optional[Literal['Equals', 'GreaterOrEquals', 'LessOrEquals']],
        Field(
            description='Operator to use when matching sourcePort, either Equals, GreaterOrEquals, or LessOrEquals.',
            title='Source Port Operator',
        ),
    ] = None
    sourcePortRange: Annotated[
        Optional[str],
        Field(
            description='Range of source ports to match, in the format n-m, e.g. 100-200.  The start and end of the range must be port numbers.',
            title='Source Port Range',
        ),
    ] = None
    sourcePrefix: Annotated[
        Optional[str],
        Field(description='Source prefix to match.', title='Source Prefix'),
    ] = None
    tcpFlags: Annotated[
        Optional[str],
        Field(
            description='Match TCP flags, usable with !, &, | and the flags RST, SYN, and ACK.',
            title='TCP Flags',
        ),
    ] = None


class MacEntry(BaseModel):
    action: Annotated[
        Optional[Literal['Drop', 'Accept', 'RateLimit']],
        Field(
            description="An action to take, either 'Accept','Drop', or 'RateLimit'.",
            title='Action',
        ),
    ] = None
    destinationMAC: Annotated[
        Optional[str],
        Field(
            description='Match an Ethernet frame if its destination MAC address logically anded with the mask equals this MAC address.',
            title='Destination MAC',
        ),
    ] = None
    destinationMACMask: Annotated[
        Optional[str],
        Field(
            description='Match an Ethernet frame if its destination MAC address logically anded with the mask equals the configured MAC address.',
            title='Destination MAC Mask',
        ),
    ] = None
    ethertype: Annotated[
        Optional[
            Literal[
                'ARP',
                'AUTHENTICATION8021X',
                'ETHOAM',
                'FCOE',
                'FCOEINITIALIZATION',
                'FLOWCONTROL',
                'IPV4',
                'IPV6',
                'LACP',
                'LLDP',
                'MACSEC',
                'MPLSMULTICAST',
                'MPLSUNICAST',
                'PBB',
                'PPPOEDISCOVERY',
                'PPPOESESSION',
                'PTP',
                'ROCE',
            ]
        ],
        Field(
            description='An Ethernet frame matches this condition if its ethertype value (after 802.1Q VLAN tags) matches the specified value.',
            title='Ethertype',
        ),
    ] = None
    outerVLANIDOperator: Annotated[
        Optional[Literal['Equals', 'GreaterOrEquals', 'LessOrEquals']],
        Field(
            description='Operator to use when matching OuterVlanIdValue, either Equals, GreaterOrEquals, or LessOrEquals.',
            title='Outer VLAN ID Operator',
        ),
    ] = None
    outerVLANIDRange: Annotated[
        Optional[str],
        Field(
            description='Range of Outer vlan IDs to match, in the format n-m, e.g. 100-200',
            title='Outer VLAN ID Range',
        ),
    ] = None
    outerVLANIDValue: Annotated[
        Optional[str],
        Field(
            description="Ethernet frame matching criteria based on the outermost VLAN ID found before the subinterface-defining VLAN tag (if any) is removed. A value of 'none' will match only untagged frames.",
            title='Outer VLAN ID Value',
        ),
    ] = None
    rateLimit: Annotated[
        Optional[RateLimit],
        Field(
            description="Rate limit to apply when the action is 'RateLimit'.",
            title='Rate Limit',
        ),
    ] = None
    sourceMAC: Annotated[
        Optional[str],
        Field(
            description='Match an Ethernet frame if its source MAC address logically anded with the mask equals this MAC address.',
            title='Source MAC',
        ),
    ] = None
    sourceMACMask: Annotated[
        Optional[str],
        Field(
            description='Match an Ethernet frame if its source MAC address logically anded with the mask equals the configured MAC address.',
            title='Source MAC Mask',
        ),
    ] = None


class Entry(BaseModel):
    ipEntry: Annotated[Optional[IpEntry], Field(title='IP Entry')] = None
    macEntry: Annotated[Optional[MacEntry], Field(title='MAC Entry')] = None
    type: Annotated[Literal['IPV4', 'IPV6', 'MAC', 'Auto'], Field(title='Type')]


class Spec(BaseModel):
    entries: Annotated[
        List[Entry],
        Field(
            description='Specifies the list of filter entries, in order.',
            title='Entries',
        ),
    ]
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description='Label selector used to select Toponodes on which to deploy the CPM filter.',
            title='Node Selector',
        ),
    ] = None
    nodes: Annotated[
        Optional[List[str]],
        Field(
            description='Reference to a list of TopoNodes on which to deploy the CPM filter.',
            title='Nodes',
        ),
    ] = None


class ControlPlaneFilterDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class ControlPlaneFilterDeletedResources(
    RootModel[List[ControlPlaneFilterDeletedResourceEntry]]
):
    root: List[ControlPlaneFilterDeletedResourceEntry]


class ControlPlaneFilterMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class SpecModel(BaseModel):
    entries: Annotated[
        List[Entry],
        Field(
            description='Specifies the list of filter entries, in order.',
            title='Entries',
        ),
    ]


class FilterDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class FilterDeletedResources(RootModel[List[FilterDeletedResourceEntry]]):
    root: List[FilterDeletedResourceEntry]


class FilterMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class ControlPlaneFilter(BaseModel):
    apiVersion: str
    kind: str
    metadata: ControlPlaneFilterMetadata
    spec: Annotated[
        Spec,
        Field(
            description='ControlPlaneFilter allows for specifying a list of Nodes or Node selectors where the filter should be applied and managing filter entries in order.',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='ControlPlaneFilterStatus defines the observed state of ControlPlaneFilter',
            title='Status',
        ),
    ] = None


class ControlPlaneFilterList(BaseModel):
    apiVersion: str
    items: Optional[List[ControlPlaneFilter]] = None
    kind: str


class Filter(BaseModel):
    apiVersion: str
    kind: str
    metadata: FilterMetadata
    spec: Annotated[
        SpecModel,
        Field(
            description='Filter allows for the creation and management of ordered filtering rules based on IP or MAC criteria. The resource supports various conditions and actions, enabling fine-grained control over network traffic by specifying rules for source and destination addresses, ports, and protocols.',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='FilterStatus defines the observed state of Filter',
            title='Status',
        ),
    ] = None


class FilterList(BaseModel):
    apiVersion: str
    items: Optional[List[Filter]] = None
    kind: str
