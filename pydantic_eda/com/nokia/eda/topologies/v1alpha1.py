# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/eda-labs/openapi/v25.4.1/apps/topologies.eda.nokia.com/v1alpha1/topologies.json

from __future__ import annotations
from typing import Annotated, Any, Dict, List, Optional
from pydantic import BaseModel, Field, RootModel


class CPUUtilOverlay(BaseModel):
    """
    CPUUtilOverlay is the Schema for the cpuutiloverlays API
    """

    apiVersion: str
    kind: str
    metadata: CPUUtilOverlayMetadata
    spec: Annotated[
        Spec,
        Field(
            description="CPUUtilOverlaySpec defines the desired state of CPUUtilOverlay",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="CPUUtilOverlayStatus defines the observed state of CPUUtilOverlay",
            title="Status",
        ),
    ] = None


class CPUUtilOverlayDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    transactionId: Optional[int] = None


class CPUUtilOverlayDeletedResources(
    RootModel[List[CPUUtilOverlayDeletedResourceEntry]]
):
    root: List[CPUUtilOverlayDeletedResourceEntry]


class CPUUtilOverlayList(BaseModel):
    """
    CPUUtilOverlayList is a list of cpuutiloverlays
    """

    apiVersion: str
    items: Optional[List[CPUUtilOverlay]] = None
    kind: str


class CPUUtilOverlayMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]


class DeviationOverlay(BaseModel):
    """
    DeviationOverlay is the Schema for the deviationoverlays API
    """

    apiVersion: str
    kind: str
    metadata: DeviationOverlayMetadata
    spec: Annotated[
        SpecModel,
        Field(
            description="DeviationOverlaySpec defines the desired state of DeviationOverlay",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="DeviationOverlayStatus defines the observed state of DeviationOverlay",
            title="Status",
        ),
    ] = None


DeviationOverlayDeletedResourceEntry = CPUUtilOverlayDeletedResourceEntry


class DeviationOverlayDeletedResources(
    RootModel[List[DeviationOverlayDeletedResourceEntry]]
):
    root: List[DeviationOverlayDeletedResourceEntry]


class DeviationOverlayList(BaseModel):
    """
    DeviationOverlayList is a list of deviationoverlays
    """

    apiVersion: str
    items: Optional[List[DeviationOverlay]] = None
    kind: str


DeviationOverlayMetadata = CPUUtilOverlayMetadata


class DiskOverlay(BaseModel):
    """
    DiskOverlay is the Schema for the diskoverlays API
    """

    apiVersion: str
    kind: str
    metadata: DiskOverlayMetadata
    spec: Annotated[
        SpecModel1,
        Field(
            description="DiskOverlaySpec defines the desired state of DiskOverlay",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="DiskOverlayStatus defines the observed state of DiskOverlay",
            title="Status",
        ),
    ] = None


DiskOverlayDeletedResourceEntry = CPUUtilOverlayDeletedResourceEntry


class DiskOverlayDeletedResources(RootModel[List[DiskOverlayDeletedResourceEntry]]):
    root: List[DiskOverlayDeletedResourceEntry]


class DiskOverlayList(BaseModel):
    """
    DiskOverlayList is a list of diskoverlays
    """

    apiVersion: str
    items: Optional[List[DiskOverlay]] = None
    kind: str


DiskOverlayMetadata = CPUUtilOverlayMetadata


class GroupSelector(BaseModel):
    group: Annotated[
        str,
        Field(
            description="The group to assign to nodes that match the selector.",
            title="Group",
        ),
    ]
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Label selector to use to match nodes that should be assigned to this group.",
            title="Node Selector",
        ),
    ] = None


class LldpOverlay(BaseModel):
    """
    LldpOverlay is the Schema for the lldpoverlays API
    """

    apiVersion: str
    kind: str
    metadata: LldpOverlayMetadata
    spec: Annotated[
        SpecModel2,
        Field(
            description="LldpOverlaySpec defines the desired state of lldp",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="LldpOverlayStatus defines the observed state of LldpOverlay",
            title="Status",
        ),
    ] = None


LldpOverlayDeletedResourceEntry = CPUUtilOverlayDeletedResourceEntry


class LldpOverlayDeletedResources(RootModel[List[LldpOverlayDeletedResourceEntry]]):
    root: List[LldpOverlayDeletedResourceEntry]


class LldpOverlayList(BaseModel):
    """
    LldpOverlayList is a list of lldpoverlays
    """

    apiVersion: str
    items: Optional[List[LldpOverlay]] = None
    kind: str


LldpOverlayMetadata = CPUUtilOverlayMetadata


class MemoryOverlay(BaseModel):
    """
    MemoryOverlay is the Schema for the memoryoverlays API
    """

    apiVersion: str
    kind: str
    metadata: MemoryOverlayMetadata
    spec: Annotated[
        SpecModel3,
        Field(
            description="MemoryOverlaySpec defines the desired state of MemoryOverlay",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="MemoryOverlayStatus defines the observed state of MemoryOverlay",
            title="Status",
        ),
    ] = None


MemoryOverlayDeletedResourceEntry = CPUUtilOverlayDeletedResourceEntry


class MemoryOverlayDeletedResources(RootModel[List[MemoryOverlayDeletedResourceEntry]]):
    root: List[MemoryOverlayDeletedResourceEntry]


class MemoryOverlayList(BaseModel):
    """
    MemoryOverlayList is a list of memoryoverlays
    """

    apiVersion: str
    items: Optional[List[MemoryOverlay]] = None
    kind: str


MemoryOverlayMetadata = CPUUtilOverlayMetadata


class Overlay(BaseModel):
    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable the generation of the status of this overlay",
            title="Enabled",
        ),
    ]
    key: Annotated[
        str,
        Field(
            description="A unique key for identifying this overlay within the topology.  This is used internally\nonly.",
            title="Key",
        ),
    ]


class Spec(BaseModel):
    """
    CPUUtilOverlaySpec defines the desired state of CPUUtilOverlay
    """

    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable the generation of the status of this overlay",
            title="Enabled",
        ),
    ]
    topology: Annotated[
        Topology,
        Field(
            description="Reference to the topology that this overlay is extending.",
            title="Topology",
        ),
    ]
    uiDescription: Annotated[
        Optional[str],
        Field(
            description="A description of the overlay to expose in the UI",
            title="UI Description",
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the description of the overlay to expose in the UI",
            title="UI Description Key",
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description="The name of the overlay to expose in the UI", title="UI Name"
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the name of the overlay to expose in the UI",
            title="UI Name Key",
        ),
    ] = None


class SpecModel(BaseModel):
    """
    DeviationOverlaySpec defines the desired state of DeviationOverlay
    """

    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable the generation of the status of this overlay",
            title="Enabled",
        ),
    ]
    topology: Annotated[
        Topology,
        Field(
            description="Reference to the topology that this overlay is extending.",
            title="Topology",
        ),
    ]
    uiDescription: Annotated[
        Optional[str],
        Field(
            description="A description of the overlay to expose in the UI",
            title="UI Description",
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the description of the overlay to expose in the UI",
            title="UI Description Key",
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description="The name of the overlay to expose in the UI", title="UI Name"
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the name of the overlay to expose in the UI",
            title="UI Name Key",
        ),
    ] = None


class SpecModel1(BaseModel):
    """
    DiskOverlaySpec defines the desired state of DiskOverlay
    """

    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable the generation of the status of this overlay",
            title="Enabled",
        ),
    ]
    topology: Annotated[
        Topology,
        Field(
            description="Reference to the topology that this overlay is extending.",
            title="Topology",
        ),
    ]
    uiDescription: Annotated[
        Optional[str],
        Field(
            description="A description of the overlay to expose in the UI",
            title="UI Description",
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the description of the overlay to expose in the UI",
            title="UI Description Key",
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description="The name of the overlay to expose in the UI", title="UI Name"
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the name of the overlay to expose in the UI",
            title="UI Name Key",
        ),
    ] = None


class SpecModel2(BaseModel):
    """
    LldpOverlaySpec defines the desired state of lldp
    """

    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable the generation of the status of this overlay",
            title="Enabled",
        ),
    ]
    topology: Annotated[
        Topology,
        Field(
            description="Reference to the topology that this overlay is extending.",
            title="Topology",
        ),
    ]
    uiDescription: Annotated[
        Optional[str],
        Field(
            description="A description of the overlay to expose in the UI",
            title="UI Description",
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the description of the overlay to expose in the UI",
            title="UI Description Key",
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description="The name of the overlay to expose in the UI", title="UI Name"
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the name of the overlay to expose in the UI",
            title="UI Name Key",
        ),
    ] = None


class SpecModel3(BaseModel):
    """
    MemoryOverlaySpec defines the desired state of MemoryOverlay
    """

    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable the generation of the status of this overlay",
            title="Enabled",
        ),
    ]
    topology: Annotated[
        Topology,
        Field(
            description="Reference to the topology that this overlay is extending.",
            title="Topology",
        ),
    ]
    uiDescription: Annotated[
        Optional[str],
        Field(
            description="A description of the overlay to expose in the UI",
            title="UI Description",
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the description of the overlay to expose in the UI",
            title="UI Description Key",
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description="The name of the overlay to expose in the UI", title="UI Name"
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the name of the overlay to expose in the UI",
            title="UI Name Key",
        ),
    ] = None


class SpecModel4(BaseModel):
    """
    TopologySpec defines the desired state of Topology
    """

    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable the generation of the status of this topology",
            title="Enabled",
        ),
    ]
    endpointSubtitle: Annotated[
        Optional[str],
        Field(
            description="Override the subtitle to show for endpoints in the topology",
            title="Endpoint Subtitle",
        ),
    ] = None
    linkSubtitle: Annotated[
        Optional[str],
        Field(
            description="Override the subtitle to show for links in the topology",
            title="Link Subtitle",
        ),
    ] = None
    nodeSubtitle: Annotated[
        Optional[str],
        Field(
            description="Override the subtitle to show for nodes in the topology",
            title="Node Subtitle",
        ),
    ] = None
    overlays: Annotated[
        List[Overlay],
        Field(
            description="The set of overlays supported with this topology",
            title="Overlays",
        ),
    ]
    uiDescription: Annotated[
        Optional[str],
        Field(
            description="A description of the topology to expose in the UI",
            title="UI Description",
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the description of the topology to expose in the UI",
            title="UI Description Key",
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description="The name of the topology to expose in the UI", title="UI Name"
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the name of the topology to expose in the UI",
            title="UI Name Key",
        ),
    ] = None


class SpecModel5(BaseModel):
    """
    TopologyGroupingSpec defines the desired state of TopologyGrouping
    """

    groupSelectors: Annotated[
        Optional[List[GroupSelector]],
        Field(
            description="The set of selectors for assigning nodes to groups",
            title="Group Selectors",
        ),
    ] = None
    tierSelectors: Annotated[
        Optional[List[TierSelector]],
        Field(
            description="The set of selectors for assigning nodes to tiers",
            title="Tier Selectors",
        ),
    ] = None
    uiDescription: Annotated[
        Optional[str],
        Field(
            description="A description of the topology grouping to expose in the UI",
            title="UI Description",
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the description of the topology grouping to expose in the UI",
            title="UI Description Key",
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description="The name of the topology grouping to expose in the UI",
            title="UI Name",
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the name of the topology grouping to expose in the UI",
            title="UI Name Key",
        ),
    ] = None


class SpecModel6(BaseModel):
    """
    TrafficRateOverlaySpec defines the desired state of TrafficRateOverlay
    """

    enabled: Annotated[
        bool,
        Field(
            description="Enable or disable the generation of the status of this overlay",
            title="Enabled",
        ),
    ]
    topology: Annotated[
        Topology,
        Field(
            description="Reference to the topology that this overlay is extending.",
            title="Topology",
        ),
    ]
    uiDescription: Annotated[
        Optional[str],
        Field(
            description="A description of the overlay to expose in the UI",
            title="UI Description",
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the description of the overlay to expose in the UI",
            title="UI Description Key",
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description="The name of the overlay to expose in the UI", title="UI Name"
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description="The translation key for the name of the overlay to expose in the UI",
            title="UI Name Key",
        ),
    ] = None


class TierSelector(BaseModel):
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Label selector to use to match nodes that should be assigned to this tier.",
            title="Node Selector",
        ),
    ] = None
    tier: Annotated[
        int,
        Field(
            description="The tier to assign to nodes that match the selector.",
            title="Tier",
        ),
    ]


class Topology(BaseModel):
    """
    Reference to the topology that this overlay is extending.
    """

    group: Annotated[
        str,
        Field(
            description="The group of the application which published the topology this overlay is extending.",
            title="Group",
        ),
    ]
    name: Annotated[
        str,
        Field(
            description="The name of the resource which published the topology this overlay is extending.",
            title="Name",
        ),
    ]
    version: Annotated[
        str,
        Field(
            description="The version of the application which published the topology this overlay is extending.",
            title="Version",
        ),
    ]


TopologyDeletedResourceEntry = CPUUtilOverlayDeletedResourceEntry


class TopologyDeletedResources(RootModel[List[TopologyDeletedResourceEntry]]):
    root: List[TopologyDeletedResourceEntry]


class TopologyGrouping(BaseModel):
    """
    TopologyGrouping is the Schema for the topologygroupings API
    """

    apiVersion: str
    kind: str
    metadata: TopologyGroupingMetadata
    spec: Annotated[
        SpecModel5,
        Field(
            description="TopologyGroupingSpec defines the desired state of TopologyGrouping",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="TopologyGroupingStatus defines the observed state of TopologyGrouping",
            title="Status",
        ),
    ] = None


TopologyGroupingDeletedResourceEntry = CPUUtilOverlayDeletedResourceEntry


class TopologyGroupingDeletedResources(
    RootModel[List[TopologyGroupingDeletedResourceEntry]]
):
    root: List[TopologyGroupingDeletedResourceEntry]


class TopologyGroupingList(BaseModel):
    """
    TopologyGroupingList is a list of topologygroupings
    """

    apiVersion: str
    items: Optional[List[TopologyGrouping]] = None
    kind: str


TopologyGroupingMetadata = CPUUtilOverlayMetadata


class TopologyList(BaseModel):
    """
    TopologyList is a list of topologies
    """

    apiVersion: str
    items: Optional[List[TopologyModel]] = None
    kind: str


TopologyMetadata = CPUUtilOverlayMetadata


class TopologyModel(BaseModel):
    """
    Topology is the Schema for the topologies API
    """

    apiVersion: str
    kind: str
    metadata: TopologyMetadata
    spec: Annotated[
        SpecModel4,
        Field(
            description="TopologySpec defines the desired state of Topology",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="TopologyStatus defines the observed state of Topology",
            title="Status",
        ),
    ] = None


class TrafficRateOverlay(BaseModel):
    """
    TrafficRateOverlay is the Schema for the trafficrateoverlays API
    """

    apiVersion: str
    kind: str
    metadata: TrafficRateOverlayMetadata
    spec: Annotated[
        SpecModel6,
        Field(
            description="TrafficRateOverlaySpec defines the desired state of TrafficRateOverlay",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description="TrafficRateOverlayStatus defines the observed state of TrafficRateOverlay",
            title="Status",
        ),
    ] = None


TrafficRateOverlayDeletedResourceEntry = CPUUtilOverlayDeletedResourceEntry


class TrafficRateOverlayDeletedResources(
    RootModel[List[TrafficRateOverlayDeletedResourceEntry]]
):
    root: List[TrafficRateOverlayDeletedResourceEntry]


class TrafficRateOverlayList(BaseModel):
    """
    TrafficRateOverlayList is a list of trafficrateoverlays
    """

    apiVersion: str
    items: Optional[List[TrafficRateOverlay]] = None
    kind: str


TrafficRateOverlayMetadata = CPUUtilOverlayMetadata
