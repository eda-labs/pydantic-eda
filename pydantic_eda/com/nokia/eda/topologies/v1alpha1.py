# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/eda-labs/openapi/v24.12.1/apps/topologies.eda.nokia.com/v1alpha1/topologies.json
#   timestamp: 2025-01-29T15:18:56+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field
from typing_extensions import Annotated

from ..... import Metadata


class Topology(BaseModel):
    group: Annotated[
        str,
        Field(
            description='The group of the application which published the topology this overlay is extending.',
            title='Group',
        ),
    ]
    name: Annotated[
        str,
        Field(
            description='The name of the resource which published the topology this overlay is extending.',
            title='Name',
        ),
    ]
    version: Annotated[
        str,
        Field(
            description='The version of the application which published the topology this overlay is extending.',
            title='Version',
        ),
    ]


class Spec(BaseModel):
    enabled: Annotated[
        bool,
        Field(
            description='Enable or disable the generation of the status of this overlay',
            title='Enabled',
        ),
    ]
    topology: Annotated[
        Topology,
        Field(
            description='Reference to the topology that this overlay is extending.',
            title='Topology',
        ),
    ]
    uiDescription: Annotated[
        Optional[str],
        Field(
            description='A description of the overlay to expose in the UI',
            title='UI Description',
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description='The translation key for the description of the overlay to expose in the UI',
            title='UI Description Key',
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description='The name of the overlay to expose in the UI', title='UI Name'
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description='The translation key for the name of the overlay to expose in the UI',
            title='UI Name Key',
        ),
    ] = None


class CPUUtilOverlay(BaseModel):
    apiVersion: str
    kind: str
    metadata: Metadata
    spec: Annotated[
        Spec,
        Field(
            description='CPUUtilOverlaySpec defines the desired state of CPUUtilOverlay',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='CPUUtilOverlayStatus defines the observed state of CPUUtilOverlay',
            title='Status',
        ),
    ] = None


class CPUUtilOverlayList(BaseModel):
    apiVersion: str
    items: Optional[List[CPUUtilOverlay]] = None
    kind: str


class DeviationOverlay(BaseModel):
    apiVersion: str
    kind: str
    metadata: Metadata
    spec: Annotated[
        Spec,
        Field(
            description='DeviationOverlaySpec defines the desired state of DeviationOverlay',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='DeviationOverlayStatus defines the observed state of DeviationOverlay',
            title='Status',
        ),
    ] = None


class DeviationOverlayList(BaseModel):
    apiVersion: str
    items: Optional[List[DeviationOverlay]] = None
    kind: str


class DiskOverlay(BaseModel):
    apiVersion: str
    kind: str
    metadata: Metadata
    spec: Annotated[
        Spec,
        Field(
            description='DiskOverlaySpec defines the desired state of DiskOverlay',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='DiskOverlayStatus defines the observed state of DiskOverlay',
            title='Status',
        ),
    ] = None


class DiskOverlayList(BaseModel):
    apiVersion: str
    items: Optional[List[DiskOverlay]] = None
    kind: str


class MemoryOverlay(BaseModel):
    apiVersion: str
    kind: str
    metadata: Metadata
    spec: Annotated[
        Spec,
        Field(
            description='MemoryOverlaySpec defines the desired state of MemoryOverlay',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='MemoryOverlayStatus defines the observed state of MemoryOverlay',
            title='Status',
        ),
    ] = None


class MemoryOverlayList(BaseModel):
    apiVersion: str
    items: Optional[List[MemoryOverlay]] = None
    kind: str


class Overlay(BaseModel):
    enabled: Annotated[
        bool,
        Field(
            description='Enable or disable the generation of the status of this overlay',
            title='Enabled',
        ),
    ]
    key: Annotated[
        str,
        Field(
            description='A unique key for identifying this overlay within the topology.  This is used internally\nonly.',
            title='Key',
        ),
    ]


class SpecModel(BaseModel):
    enabled: Annotated[
        bool,
        Field(
            description='Enable or disable the generation of the status of this topology',
            title='Enabled',
        ),
    ]
    endpointSubtitle: Annotated[
        Optional[str],
        Field(
            description='Override the subtitle to show for endpoints in the topology',
            title='Endpoint Subtitle',
        ),
    ] = None
    linkSubtitle: Annotated[
        Optional[str],
        Field(
            description='Override the subtitle to show for links in the topology',
            title='Link Subtitle',
        ),
    ] = None
    nodeSubtitle: Annotated[
        Optional[str],
        Field(
            description='Override the subtitle to show for nodes in the topology',
            title='Node Subtitle',
        ),
    ] = None
    overlays: Annotated[
        List[Overlay],
        Field(
            description='The set of overlays supported with this topology',
            title='Overlays',
        ),
    ]
    uiDescription: Annotated[
        Optional[str],
        Field(
            description='A description of the topology to expose in the UI',
            title='UI Description',
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description='The translation key for the description of the topology to expose in the UI',
            title='UI Description Key',
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description='The name of the topology to expose in the UI', title='UI Name'
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description='The translation key for the name of the topology to expose in the UI',
            title='UI Name Key',
        ),
    ] = None


class TopologyModel(BaseModel):
    apiVersion: str
    kind: str
    metadata: Metadata
    spec: Annotated[
        SpecModel,
        Field(
            description='TopologySpec defines the desired state of Topology',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='TopologyStatus defines the observed state of Topology',
            title='Status',
        ),
    ] = None


class GroupSelector(BaseModel):
    group: Annotated[
        str,
        Field(
            description='The group to assign to nodes that match the selector.',
            title='Group',
        ),
    ]
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description='Label selector to use to match nodes that should be assigned to this group.',
            title='Node Selector',
        ),
    ] = None


class TierSelector(BaseModel):
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description='Label selector to use to match nodes that should be assigned to this tier.',
            title='Node Selector',
        ),
    ] = None
    tier: Annotated[
        int,
        Field(
            description='The tier to assign to nodes that match the selector.',
            title='Tier',
        ),
    ]


class SpecModel1(BaseModel):
    groupSelectors: Annotated[
        Optional[List[GroupSelector]],
        Field(
            description='The set of selectors for assigning nodes to groups',
            title='Group Selectors',
        ),
    ] = None
    tierSelectors: Annotated[
        Optional[List[TierSelector]],
        Field(
            description='The set of selectors for assigning nodes to tiers',
            title='Tier Selectors',
        ),
    ] = None
    uiDescription: Annotated[
        Optional[str],
        Field(
            description='A description of the topology grouping to expose in the UI',
            title='UI Description',
        ),
    ] = None
    uiDescriptionKey: Annotated[
        Optional[str],
        Field(
            description='The translation key for the description of the topology grouping to expose in the UI',
            title='UI Description Key',
        ),
    ] = None
    uiName: Annotated[
        Optional[str],
        Field(
            description='The name of the topology grouping to expose in the UI',
            title='UI Name',
        ),
    ] = None
    uiNameKey: Annotated[
        Optional[str],
        Field(
            description='The translation key for the name of the topology grouping to expose in the UI',
            title='UI Name Key',
        ),
    ] = None


class TopologyGrouping(BaseModel):
    apiVersion: str
    kind: str
    metadata: Metadata
    spec: Annotated[
        SpecModel1,
        Field(
            description='TopologyGroupingSpec defines the desired state of TopologyGrouping',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='TopologyGroupingStatus defines the observed state of TopologyGrouping',
            title='Status',
        ),
    ] = None


class TopologyGroupingList(BaseModel):
    apiVersion: str
    items: Optional[List[TopologyGrouping]] = None
    kind: str


class TopologyList(BaseModel):
    apiVersion: str
    items: Optional[List[TopologyModel]] = None
    kind: str
