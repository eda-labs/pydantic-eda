# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/eda-labs/openapi/v25.4.1/apps/siteinfo.eda.nokia.com/v1alpha1/siteinfo.json

from __future__ import annotations
from typing import Annotated, Dict, List, Optional
from pydantic import BaseModel, Field, RootModel


class Banner(BaseModel):
    """
    Banner is the Schema for the banners API
    """

    apiVersion: str
    kind: str
    metadata: BannerMetadata
    spec: Annotated[
        Spec,
        Field(
            description="BannerSpec allows the configuration of login and MOTD (Message of the Day) banners on selected nodes. The banners can be applied to specific nodes or selected using label selectors.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Status],
        Field(
            description="BannerStatus defines the observed state of Banner",
            title="Status",
        ),
    ] = None


class BannerDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class BannerDeletedResources(RootModel[List[BannerDeletedResourceEntry]]):
    root: List[BannerDeletedResourceEntry]


class BannerList(BaseModel):
    """
    BannerList is a list of banners
    """

    apiVersion: str
    items: Optional[List[Banner]] = None
    kind: str


class BannerMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]
    namespace: str


class Spec(BaseModel):
    """
    BannerSpec allows the configuration of login and MOTD (Message of the Day) banners on selected nodes. The banners can be applied to specific nodes or selected using label selectors.
    """

    loginBanner: Annotated[
        Optional[str],
        Field(
            description="This is the login banner displayed before a user has logged into the Node.",
            title="Login Banner",
        ),
    ] = None
    motd: Annotated[
        Optional[str],
        Field(
            description="This is the MOTD banner displayed after a user has logged into the Node.",
            title="MOTD",
        ),
    ] = None
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description="Labe selector to select nodes on which to configure the banners.",
            title="Node Selector",
        ),
    ] = None
    nodes: Annotated[
        Optional[List[str]],
        Field(
            description="List of nodes on which to configure the banners.",
            title="Nodes",
        ),
    ] = None


class Status(BaseModel):
    """
    BannerStatus defines the observed state of Banner
    """

    nodes: Annotated[
        Optional[List[str]],
        Field(
            description="List of nodes this banner has been applied to", title="Nodes"
        ),
    ] = None
