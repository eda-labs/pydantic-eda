# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/eda-labs/openapi/v24.12.1/apps/siteinfo.eda.nokia.com/v1alpha1/siteinfo.json
#   timestamp: 2025-01-29T15:18:53+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field
from typing_extensions import Annotated

from ..... import Metadata


class Spec(BaseModel):
    loginBanner: Annotated[
        Optional[str],
        Field(
            description='This is the login banner displayed before a user has logged into the Node.',
            title='Login Banner',
        ),
    ] = None
    motd: Annotated[
        Optional[str],
        Field(
            description='This is the MOTD banner displayed after a user has logged into the Node.',
            title='MOTD',
        ),
    ] = None
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description='Labe selector to select nodes on which to configure the banners.',
            title='Node Selector',
        ),
    ] = None
    nodes: Annotated[
        Optional[List[str]],
        Field(
            description='List of nodes on which to configure the banners.',
            title='Nodes',
        ),
    ] = None


class Status(BaseModel):
    nodes: Annotated[
        Optional[List[str]],
        Field(
            description='List of nodes this banner has been applied to', title='Nodes'
        ),
    ] = None


class Banner(BaseModel):
    apiVersion: str
    kind: str
    metadata: Metadata
    spec: Annotated[
        Spec,
        Field(
            description='BannerSpec allows the configuration of login and MOTD (Message of the Day) banners on selected nodes. The banners can be applied to specific nodes or selected using label selectors.',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status],
        Field(
            description='BannerStatus defines the observed state of Banner',
            title='Status',
        ),
    ] = None


class BannerList(BaseModel):
    apiVersion: str
    items: Optional[List[Banner]] = None
    kind: str
