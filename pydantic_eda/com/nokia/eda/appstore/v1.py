# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/eda-labs/openapi/v24.12.1/apps/appstore.eda.nokia.com/v1/appstore.json
#   timestamp: 2025-01-29T15:18:33+00:00

from __future__ import annotations

from typing import List, Literal, Optional

from pydantic import BaseModel, Field
from typing_extensions import Annotated

from ..... import Metadata


class Spec(BaseModel):
    authSecretRef: Annotated[
        Optional[str],
        Field(
            description='AuthSecretRef defines how to authenticate with the remote catalog',
            title='Authentication Secret Reference',
        ),
    ] = None
    description: Annotated[
        Optional[str],
        Field(
            description='Description (small) about this catalog need to check max length',
            max_length=70,
            title='Description',
        ),
    ] = None
    remoteType: Annotated[
        Optional[Literal['git']],
        Field(
            description='RemoteType type of the remote at the moment we only support git',
            title='Remote Type',
        ),
    ] = 'git'
    remoteURL: Annotated[
        Optional[str],
        Field(
            description='RemoteURL is the url where we can find the catalog (ex git repo URL)',
            title='Remote URL',
        ),
    ] = None
    skipTLSVerify: Annotated[Optional[bool], Field(title='Skip TLS Verify')] = False
    title: Annotated[
        Optional[str],
        Field(
            description='Title is the UI visible name of this catalog',
            max_length=50,
            title='Title',
        ),
    ] = None


class Status(BaseModel):
    error: Annotated[
        Optional[str],
        Field(
            description='conditions []\nError last encountered for this catalog.',
            title='Error',
        ),
    ] = None
    operational: Annotated[
        Optional[bool],
        Field(
            description='Indicates if the catalog remote is operational.',
            title='Operational',
        ),
    ] = False


class Catalog(BaseModel):
    apiVersion: str
    kind: str
    metadata: Metadata
    spec: Annotated[
        Spec,
        Field(
            description='CatalogSpec defines the desired state of Catalog',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status],
        Field(
            description='CatalogStatus defines the observed state of Catalog',
            title='Status',
        ),
    ] = None


class CatalogList(BaseModel):
    apiVersion: str
    items: Optional[List[Catalog]] = None
    kind: str


class SpecModel(BaseModel):
    authSecretRef: Annotated[
        Optional[str],
        Field(
            description='AuthSecretRef defines how to authenticate with the remote registry',
            title='Authentication Secret Reference',
        ),
    ] = None
    mirror: Annotated[
        Optional[str],
        Field(description='Mirror is the mirror URL for the registry', title='Mirror'),
    ] = None
    remoteURL: Annotated[
        str,
        Field(
            description='RemoteURL is the url where we can find the registry',
            title='Remote URL',
        ),
    ]
    skipTLSVerify: Annotated[
        Optional[bool],
        Field(
            description='Skip TLS Verification on connection', title='Skip TLS Verify'
        ),
    ] = False
    title: Annotated[
        Optional[str],
        Field(
            description='Title is the UI visible name of this registry',
            max_length=50,
            title='Title',
        ),
    ] = None


class Status1Model(BaseModel):
    error: Annotated[
        str,
        Field(description='Error last encountered for this registry.', title='Error'),
    ]
    reachable: Annotated[
        Optional[bool],
        Field(description='Indicates if the registry is reachable.', title='Reachable'),
    ] = False


class Registry(BaseModel):
    apiVersion: str
    kind: str
    metadata: Metadata
    spec: Annotated[
        SpecModel,
        Field(
            description='RegistrySpec defines the desired state of Registry',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status1Model],
        Field(
            description='RegistryStatus defines the observed state of Registry',
            title='Status',
        ),
    ] = None


class RegistryList(BaseModel):
    apiVersion: str
    items: Optional[List[Registry]] = None
    kind: str
