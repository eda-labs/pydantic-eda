# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/eda-labs/openapi/v25.4.1/apps/appstore.eda.nokia.com/v1/appstore.json

from __future__ import annotations
from typing import Annotated, Dict, List, Literal, Optional
from pydantic import BaseModel, Field, RootModel
from datetime import datetime


class Catalog(BaseModel):
    """
    Catalog is the Schema for the catalogs API
    """

    apiVersion: str
    kind: str
    metadata: CatalogMetadata
    spec: Annotated[
        Spec,
        Field(
            description="CatalogSpec defines the desired state of a Catalog.",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Status],
        Field(
            description="CatalogStatus defines the observed state of a Catalog.",
            title="Status",
        ),
    ] = None


class CatalogDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    transactionId: Optional[int] = None


class CatalogDeletedResources(RootModel[List[CatalogDeletedResourceEntry]]):
    root: List[CatalogDeletedResourceEntry]


class CatalogList(BaseModel):
    """
    CatalogList is a list of catalogs
    """

    apiVersion: str
    items: Optional[List[Catalog]] = None
    kind: str


class CatalogMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern="^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
        ),
    ]


class Registry(BaseModel):
    """
    Registry is the Schema for the registries API
    """

    apiVersion: str
    kind: str
    metadata: RegistryMetadata
    spec: Annotated[
        SpecModel,
        Field(
            description="RegistrySpec defines the desired state of a Registry",
            title="Specification",
        ),
    ]
    status: Annotated[
        Optional[Status1Model],
        Field(
            description="RegistryStatus defines the observed state of Registry",
            title="Status",
        ),
    ] = None


RegistryDeletedResourceEntry = CatalogDeletedResourceEntry


class RegistryDeletedResources(RootModel[List[RegistryDeletedResourceEntry]]):
    root: List[RegistryDeletedResourceEntry]


class RegistryList(BaseModel):
    """
    RegistryList is a list of registries
    """

    apiVersion: str
    items: Optional[List[Registry]] = None
    kind: str


RegistryMetadata = CatalogMetadata


class Spec(BaseModel):
    """
    CatalogSpec defines the desired state of a Catalog.
    """

    authSecretRef: Annotated[
        Optional[str],
        Field(
            description="AuthSecretRef is the authentication secret reference, used for authentication.\nMust be in the same namespace as the catalog.",
            title="Authentication Secret Reference",
        ),
    ] = None
    description: Annotated[
        Optional[str],
        Field(
            description="Description is an optional short description of the catalog.",
            max_length=70,
            title="Description",
        ),
    ] = None
    refreshInterval: Annotated[
        Optional[int],
        Field(
            description="RefreshInterval tells the controller how often it should check the remote catalog for new updates, in seconds.\nDefault is 180 seconds. Minimum is 30 seconds for production environments; 10 seconds for test environments.",
            title="Refresh Interval",
        ),
    ] = 180
    remoteType: Annotated[
        Optional[Literal["git"]],
        Field(
            description="RemoteType type of the catalog, only 'git' is supported at the moment.",
            title="Remote Type",
        ),
    ] = "git"
    remoteURL: Annotated[
        Optional[str],
        Field(
            description="RemoteURL is the HTTP(S) remote URL of the catalog. Supported URI schemes: 'https://' and 'http://'.\nDefault is HTTPS if no scheme is given.",
            title="Remote URL",
        ),
    ] = None
    skipTLSVerify: Annotated[
        Optional[bool],
        Field(
            description="SkipTLSVerify skips the validity check for the server's certificate. This will make HTTPS connections insecure.",
            title="Skip TLS Verify",
        ),
    ] = False
    title: Annotated[
        Optional[str],
        Field(
            description="Title is an UI-friendly name for the catalog.",
            max_length=50,
            title="Title",
        ),
    ] = None


class SpecModel(BaseModel):
    """
    RegistrySpec defines the desired state of a Registry
    """

    authSecretRef: Annotated[
        Optional[str],
        Field(
            description="AuthSecretRef is the authentication secret reference, used for authentication.\nMust be in the same namespace as the catalog.",
            title="Authentication Secret Reference",
        ),
    ] = None
    mirror: Annotated[
        Optional[str],
        Field(
            description="Mirror registry of the original remote registry.\nApp store will use the mirror instead of the original registry that is referenced by a catalog.",
            title="Mirror",
        ),
    ] = None
    remoteURL: Annotated[
        str,
        Field(
            description="RemoteURL is the remote URL of the registry. Supported URI schemes: 'https://' and 'http://'.\n\tDefault is HTTPS if no scheme is given.",
            title="Remote URL",
        ),
    ]
    skipTLSVerify: Annotated[
        Optional[bool],
        Field(
            description="Skip TLS Verification on connection", title="Skip TLS Verify"
        ),
    ] = False
    title: Annotated[
        Optional[str],
        Field(
            description="Title is an UI-friendly name for the catalog.",
            max_length=50,
            title="Title",
        ),
    ] = None


class Status(BaseModel):
    """
    CatalogStatus defines the observed state of a Catalog.
    """

    error: Annotated[
        Optional[str],
        Field(
            description="Error denotes the last error that was encountered by the controller.",
            title="Error",
        ),
    ] = None
    lastRefreshTime: Annotated[
        Optional[datetime],
        Field(
            description="LastRefreshTime is the last attempt to refresh the catalog cache by the controller.",
            title="Last Refresh Time",
        ),
    ] = None
    operational: Annotated[
        Optional[bool],
        Field(
            description="Operational reports whether the catalog remote is operational.",
            title="Operational",
        ),
    ] = False


class Status1Model(BaseModel):
    """
    RegistryStatus defines the observed state of Registry
    """

    error: Annotated[
        str,
        Field(
            description="Error denotes the last error that was encountered by the controller.",
            title="Error",
        ),
    ]
    reachable: Annotated[
        Optional[bool],
        Field(
            description="Reachable indicates if the registry is reachable.",
            title="Reachable",
        ),
    ] = False
