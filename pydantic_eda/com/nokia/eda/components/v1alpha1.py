# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/eda-labs/openapi/v24.12.1/apps/components.eda.nokia.com/v1alpha1/components.json
#   timestamp: 2025-01-29T15:18:35+00:00

from __future__ import annotations

from datetime import date
from typing import List, Literal, Optional

from pydantic import BaseModel, Field
from typing_extensions import Annotated

from ..... import Metadata


class Spec(BaseModel):
    node: Annotated[
        str,
        Field(
            description='TopologyNode this Component resides on.\nIndicates the operation in which to apply the configuration',
            title='Node',
        ),
    ]
    slot: Annotated[
        Optional[str],
        Field(
            description='Slot this Component resides in, unset for Components that do not have a slot or ID.',
            title='Slot',
        ),
    ] = None
    type: Annotated[
        Literal[
            'FanTray',
            'PowerSupply',
            'LineCard',
            'Control',
            'Fabric',
            'Chassis',
            'Transceiver',
        ],
        Field(description='Type of Component.', title='Type'),
    ]


class Status(BaseModel):
    enabled: Annotated[
        Optional[bool],
        Field(
            description='The administrative status of this Component.', title='Enabled'
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description='The date and time this Component last changed operational state',
            title='Last Change',
        ),
    ] = None
    manufacturedDate: Annotated[
        Optional[date],
        Field(
            description='The date this Component was manufactured',
            title='Manufactured Date',
        ),
    ] = None
    operationalState: Annotated[
        Optional[Literal['Up', 'Down', 'Rebooting', 'Unknown', 'Starting', 'Empty']],
        Field(
            description='Indicates the current operational state of this Component.',
            title='Operational State',
        ),
    ] = None
    partNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered part number of this Component',
            title='Part Number',
        ),
    ] = None
    serialNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered serial number of this Component',
            title='Serial Number',
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description='Component type, as provided by the node.', title='Type'),
    ] = None


class Component(BaseModel):
    apiVersion: str
    kind: str
    metadata: Metadata
    spec: Annotated[
        Spec,
        Field(
            description='ComponentSpec defines the desired state of Component',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status],
        Field(
            description='ComponentStatus defines the observed state of Component',
            title='Status',
        ),
    ] = None


class ComponentList(BaseModel):
    apiVersion: str
    items: Optional[List[Component]] = None
    kind: str


class SpecModel(BaseModel):
    nodeSelector: Annotated[
        Optional[List[str]],
        Field(
            description='Selector to use when selecting TopoNodes to discover components for.',
            title='Node Selector',
        ),
    ] = None
    nodes: Annotated[
        Optional[List[str]],
        Field(description=' TopoNodes to discover components for.', title='Nodes'),
    ] = None
    operatingSystem: Annotated[
        Optional[str],
        Field(
            description='Operating system to match against when selecting TopoNodes',
            title='Operating System',
        ),
    ] = None


class Status1Model(BaseModel):
    nodes: Annotated[
        Optional[List[str]],
        Field(
            description='List of TopoNodes component discovery is running for',
            title='Nodes',
        ),
    ] = None


class Discovery(BaseModel):
    apiVersion: str
    kind: str
    metadata: Metadata
    spec: Annotated[
        SpecModel,
        Field(
            description='DiscoverySpec defines the desired state of Discovery',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status1Model],
        Field(
            description='DiscoveryStatus defines the observed state of Discovery',
            title='Status',
        ),
    ] = None


class DiscoveryList(BaseModel):
    apiVersion: str
    items: Optional[List[Discovery]] = None
    kind: str
