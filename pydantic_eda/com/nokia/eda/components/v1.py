# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/eda-labs/openapi/v25.4.1/apps/components.eda.nokia.com/v1/components.json
#   timestamp: 2025-05-07T11:43:26+00:00

from __future__ import annotations

from datetime import date
from typing import Annotated, Any, Dict, List, Literal, Optional

from pydantic import BaseModel, Field, RootModel


class Child(BaseModel):
    name: Annotated[
        Optional[str], Field(description='Reference to a child component', title='Name')
    ] = None
    type: Annotated[
        Optional[
            Literal[
                'Fan',
                'FanTray',
                'PowerSupply',
                'PowerModule',
                'PowerShelf',
                'InterfaceModule',
                'ControlModule',
                'FabricModule',
                'Chassis',
                'Transceiver',
            ]
        ],
        Field(description='Type of the child component', title='Type'),
    ] = None


class Status(BaseModel):
    chassisMacAddress: Annotated[
        Optional[str],
        Field(description='MAC Address of the Chassis', title='Chassis MAC Address'),
    ] = None
    children: Annotated[
        Optional[List[Child]],
        Field(description='References to children components', title='Children'),
    ] = None
    commonLanguageEquipmentIdentifier: Annotated[
        Optional[str],
        Field(description='The CLEI code of this component', title='CLEI Code'),
    ] = None
    lastBooted: Annotated[
        Optional[date],
        Field(
            description='The date and time this component last booted',
            title='Last Booted',
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description='The date and time this component last changed operational state',
            title='Last Change',
        ),
    ] = None
    manufacturedDate: Annotated[
        Optional[date],
        Field(
            description='The date this component was manufactured',
            title='Manufactured Date',
        ),
    ] = None
    operationalState: Annotated[
        Optional[Literal['Up', 'Down', 'Rebooting', 'Unknown', 'Starting', 'Empty']],
        Field(
            description='Indicates the current operational state of this component.',
            title='Operational State',
        ),
    ] = None
    partNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered part number of this component',
            title='Part Number',
        ),
    ] = None
    removable: Annotated[
        Optional[bool],
        Field(
            description='Indicates if this component is removable', title='Removable'
        ),
    ] = None
    serialNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered serial number of this component',
            title='Serial Number',
        ),
    ] = None
    target: Annotated[
        Optional[str],
        Field(description='Target this component resides on.', title='Target'),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description='Component type, as provided by the target', title='Type'),
    ] = None


class ChassisMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class Spec(BaseModel):
    node: Annotated[
        str,
        Field(
            description='TopologyNode this Component resides on.\nIndicates the operation in which to apply the configuration',
            title='Node',
        ),
    ]
    slot: Annotated[
        Optional[str],
        Field(
            description='Slot this Component resides in, unset for Components that do not have a slot or ID.',
            title='Slot',
        ),
    ] = None
    type: Annotated[
        Literal[
            'Fan',
            'FanTray',
            'PowerSupply',
            'PowerModule',
            'PowerShelf',
            'InterfaceModule',
            'ControlModule',
            'FabricModule',
            'Chassis',
            'Transceiver',
        ],
        Field(description='Type of Component.', title='Type'),
    ]


class Status1Model(BaseModel):
    enabled: Annotated[
        Optional[bool],
        Field(
            description='The administrative status of this Component.', title='Enabled'
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description='The date and time this Component last changed operational state',
            title='Last Change',
        ),
    ] = None
    manufacturedDate: Annotated[
        Optional[date],
        Field(
            description='The date this Component was manufactured',
            title='Manufactured Date',
        ),
    ] = None
    operationalState: Annotated[
        Optional[Literal['Up', 'Down', 'Rebooting', 'Unknown', 'Starting', 'Empty']],
        Field(
            description='Indicates the current operational state of this Component.',
            title='Operational State',
        ),
    ] = None
    partNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered part number of this Component',
            title='Part Number',
        ),
    ] = None
    serialNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered serial number of this Component',
            title='Serial Number',
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description='Component type, as provided by the node.', title='Type'),
    ] = None


class ComponentMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class Temperature(BaseModel):
    alarmState: Annotated[
        Optional[bool],
        Field(
            description='The temperature alarm state, as reported by the component',
            title='Alarm State',
        ),
    ] = None
    instant: Annotated[
        Optional[int],
        Field(description='The current temperature of this component', title='Instant'),
    ] = None
    margin: Annotated[
        Optional[int],
        Field(description='The margin temperature of this component', title='Margin'),
    ] = None
    maximum: Annotated[
        Optional[int],
        Field(description='The maximum temperature of this component', title='Maximum'),
    ] = None
    threshold: Annotated[
        Optional[int],
        Field(
            description='The threshold temperature of this component', title='Threshold'
        ),
    ] = None


class Status1Model1(BaseModel):
    commonLanguageEquipmentIdentifier: Annotated[
        Optional[str],
        Field(description='The CLEI code of this component', title='CLEI Code'),
    ] = None
    lastBooted: Annotated[
        Optional[date],
        Field(
            description='The date and time this component last booted',
            title='Last Booted',
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description='The date and time this component last changed operational state',
            title='Last Change',
        ),
    ] = None
    locatorEnabled: Annotated[
        Optional[bool],
        Field(
            description='Indicates if the locator LED for the component is active',
            title='Locator Enabled',
        ),
    ] = None
    manufacturedDate: Annotated[
        Optional[date],
        Field(
            description='The date this component was manufactured',
            title='Manufactured Date',
        ),
    ] = None
    operationalState: Annotated[
        Optional[Literal['Up', 'Down', 'Rebooting', 'Unknown', 'Starting', 'Empty']],
        Field(
            description='Indicates the current operational state of this component.',
            title='Operational State',
        ),
    ] = None
    parent: Annotated[
        Optional[str],
        Field(description='Reference to a parent component', title='Parent'),
    ] = None
    parentType: Annotated[
        Optional[
            Literal[
                'Fan',
                'FanTray',
                'PowerSupply',
                'PowerModule',
                'PowerShelf',
                'InterfaceModule',
                'ControlModule',
                'FabricModule',
                'Chassis',
                'Transceiver',
            ]
        ],
        Field(description='Type of the parent component', title='Parent Type'),
    ] = None
    partNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered part number of this component',
            title='Part Number',
        ),
    ] = None
    removable: Annotated[
        Optional[bool],
        Field(
            description='Indicates if this component is removable', title='Removable'
        ),
    ] = None
    role: Annotated[
        Optional[Literal['Active', 'Standby']],
        Field(description='Role of the control module', title='Role'),
    ] = None
    serialNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered serial number of this component',
            title='Serial Number',
        ),
    ] = None
    slot: Annotated[
        Optional[str],
        Field(
            description='Slot this component resides in, unset for components that do not have a slot or ID',
            title='Slot',
        ),
    ] = None
    softwareVersion: Annotated[
        Optional[str],
        Field(
            description='Version string of the software running on this component',
            title='Software Version',
        ),
    ] = None
    target: Annotated[
        Optional[str],
        Field(description='Target this component resides on.', title='Target'),
    ] = None
    temperature: Annotated[
        Optional[Temperature],
        Field(
            description='Temperature information for this component',
            title='Temperature',
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description='Component type, as provided by the target', title='Type'),
    ] = None


class ControlModuleMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class Status1Model2(BaseModel):
    commonLanguageEquipmentIdentifier: Annotated[
        Optional[str],
        Field(description='The CLEI code of this component', title='CLEI Code'),
    ] = None
    lastBooted: Annotated[
        Optional[date],
        Field(
            description='The date and time this component last booted',
            title='Last Booted',
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description='The date and time this component last changed operational state',
            title='Last Change',
        ),
    ] = None
    locatorEnabled: Annotated[
        Optional[bool],
        Field(
            description='Indicates if the locator LED for the component is active',
            title='Locator Enabled',
        ),
    ] = None
    manufacturedDate: Annotated[
        Optional[date],
        Field(
            description='The date this component was manufactured',
            title='Manufactured Date',
        ),
    ] = None
    operationalState: Annotated[
        Optional[Literal['Up', 'Down', 'Rebooting', 'Unknown', 'Starting', 'Empty']],
        Field(
            description='Indicates the current operational state of this component.',
            title='Operational State',
        ),
    ] = None
    parent: Annotated[
        Optional[str],
        Field(description='Reference to a parent component', title='Parent'),
    ] = None
    parentType: Annotated[
        Optional[
            Literal[
                'Fan',
                'FanTray',
                'PowerSupply',
                'PowerModule',
                'PowerShelf',
                'InterfaceModule',
                'ControlModule',
                'FabricModule',
                'Chassis',
                'Transceiver',
            ]
        ],
        Field(description='Type of the parent component', title='Parent Type'),
    ] = None
    partNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered part number of this component',
            title='Part Number',
        ),
    ] = None
    removable: Annotated[
        Optional[bool],
        Field(
            description='Indicates if this component is removable', title='Removable'
        ),
    ] = None
    serialNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered serial number of this component',
            title='Serial Number',
        ),
    ] = None
    slot: Annotated[
        Optional[str],
        Field(
            description='Slot this component resides in, unset for components that do not have a slot or ID',
            title='Slot',
        ),
    ] = None
    softwareVersion: Annotated[
        Optional[str],
        Field(
            description='Version string of the software running on this component',
            title='Software Version',
        ),
    ] = None
    target: Annotated[
        Optional[str],
        Field(description='Target this component resides on.', title='Target'),
    ] = None
    temperature: Annotated[
        Optional[Temperature],
        Field(
            description='Temperature information for this component',
            title='Temperature',
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description='Component type, as provided by the target', title='Type'),
    ] = None


class FabricModuleMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class Status1Model3(BaseModel):
    commonLanguageEquipmentIdentifier: Annotated[
        Optional[str],
        Field(description='The CLEI code of this component', title='CLEI Code'),
    ] = None
    lastBooted: Annotated[
        Optional[date],
        Field(
            description='The date and time this component last booted',
            title='Last Booted',
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description='The date and time this component last changed operational state',
            title='Last Change',
        ),
    ] = None
    locatorEnabled: Annotated[
        Optional[bool],
        Field(
            description='Indicates if the locator LED for the component is active',
            title='Locator Enabled',
        ),
    ] = None
    manufacturedDate: Annotated[
        Optional[date],
        Field(
            description='The date this component was manufactured',
            title='Manufactured Date',
        ),
    ] = None
    operationalState: Annotated[
        Optional[Literal['Up', 'Down', 'Rebooting', 'Unknown', 'Starting', 'Empty']],
        Field(
            description='Indicates the current operational state of this component.',
            title='Operational State',
        ),
    ] = None
    parent: Annotated[
        Optional[str],
        Field(description='Reference to a parent component', title='Parent'),
    ] = None
    parentType: Annotated[
        Optional[
            Literal[
                'Fan',
                'FanTray',
                'PowerSupply',
                'PowerModule',
                'PowerShelf',
                'InterfaceModule',
                'ControlModule',
                'FabricModule',
                'Chassis',
                'Transceiver',
            ]
        ],
        Field(description='Type of the parent component', title='Parent Type'),
    ] = None
    partNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered part number of this component',
            title='Part Number',
        ),
    ] = None
    removable: Annotated[
        Optional[bool],
        Field(
            description='Indicates if this component is removable', title='Removable'
        ),
    ] = None
    serialNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered serial number of this component',
            title='Serial Number',
        ),
    ] = None
    slot: Annotated[
        Optional[str],
        Field(
            description='Slot this component resides in, unset for components that do not have a slot or ID',
            title='Slot',
        ),
    ] = None
    target: Annotated[
        Optional[str],
        Field(description='Target this component resides on.', title='Target'),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description='Component type, as provided by the target', title='Type'),
    ] = None


class FanMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class Status1Model4(BaseModel):
    commonLanguageEquipmentIdentifier: Annotated[
        Optional[str],
        Field(description='The CLEI code of this component', title='CLEI Code'),
    ] = None
    lastBooted: Annotated[
        Optional[date],
        Field(
            description='The date and time this component last booted',
            title='Last Booted',
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description='The date and time this component last changed operational state',
            title='Last Change',
        ),
    ] = None
    locatorEnabled: Annotated[
        Optional[bool],
        Field(
            description='Indicates if the locator LED for the component is active',
            title='Locator Enabled',
        ),
    ] = None
    manufacturedDate: Annotated[
        Optional[date],
        Field(
            description='The date this component was manufactured',
            title='Manufactured Date',
        ),
    ] = None
    operationalState: Annotated[
        Optional[Literal['Up', 'Down', 'Rebooting', 'Unknown', 'Starting', 'Empty']],
        Field(
            description='Indicates the current operational state of this component.',
            title='Operational State',
        ),
    ] = None
    parent: Annotated[
        Optional[str],
        Field(description='Reference to a parent component', title='Parent'),
    ] = None
    parentType: Annotated[
        Optional[
            Literal[
                'Fan',
                'FanTray',
                'PowerSupply',
                'PowerModule',
                'PowerShelf',
                'InterfaceModule',
                'ControlModule',
                'FabricModule',
                'Chassis',
                'Transceiver',
            ]
        ],
        Field(description='Type of the parent component', title='Parent Type'),
    ] = None
    partNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered part number of this component',
            title='Part Number',
        ),
    ] = None
    removable: Annotated[
        Optional[bool],
        Field(
            description='Indicates if this component is removable', title='Removable'
        ),
    ] = None
    serialNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered serial number of this component',
            title='Serial Number',
        ),
    ] = None
    slot: Annotated[
        Optional[str],
        Field(
            description='Slot this component resides in, unset for components that do not have a slot or ID',
            title='Slot',
        ),
    ] = None
    softwareVersion: Annotated[
        Optional[str],
        Field(
            description='Version string of the software running on this component',
            title='Software Version',
        ),
    ] = None
    target: Annotated[
        Optional[str],
        Field(description='Target this component resides on.', title='Target'),
    ] = None
    temperature: Annotated[
        Optional[Temperature],
        Field(
            description='Temperature information for this component',
            title='Temperature',
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description='Component type, as provided by the target', title='Type'),
    ] = None


class InterfaceModuleMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class Utilization(BaseModel):
    criticalThreshold: Annotated[
        Optional[int],
        Field(
            description='The minimum average utilization over the last 1 minute to trigger a critical alarm.\nThis value must be greater than the majorThreshold.',
            ge=1,
            le=100,
            title='Critical Threshold',
        ),
    ] = 95
    fallingDelta: Annotated[
        Optional[int],
        Field(
            description='The delta in which a triggered threshold must drop below to clear an alarm.\nFor example, with a criticalThreshold of 90 and a fallingDelta of 5, the critical alarm will clear when the utilization drops below 85.',
            ge=1,
            le=25,
            title='Falling Delta',
        ),
    ] = 5
    majorThreshold: Annotated[
        Optional[int],
        Field(
            description='The minimum average utilization over the last 1 minute to trigger a major alarm.\nThis value must be greater than the minorThreshold.',
            ge=1,
            le=100,
            title='Major Threshold',
        ),
    ] = 90
    minorThreshold: Annotated[
        Optional[int],
        Field(
            description='The minimum average utilization over the last 1 minute to trigger a minor alarm.',
            ge=1,
            le=100,
            title='Minor Threshold',
        ),
    ] = 80


class Cpu(BaseModel):
    enabled: Annotated[
        bool, Field(description='Enable or disable CPU monitoring.', title='Enabled')
    ]
    utilization: Annotated[
        Optional[Utilization],
        Field(
            description='Parameters relating to CPU utilization monitoring.',
            title='Thresholds',
        ),
    ] = None


class Memory(BaseModel):
    enabled: Annotated[
        bool, Field(description='Enable or disable memory monitoring.', title='Enabled')
    ]
    utilization: Annotated[
        Optional[Utilization],
        Field(
            description='Parameters relating to memory utilization monitoring.',
            title='Thresholds',
        ),
    ] = None


class Volume(BaseModel):
    enabled: Annotated[
        bool, Field(description='Enable or disable volume monitoring.', title='Enabled')
    ]
    utilization: Annotated[
        Optional[Utilization],
        Field(
            description='Parameters relating to volume utilization monitoring.',
            title='Thresholds',
        ),
    ] = None


class SpecModel(BaseModel):
    cpu: Annotated[
        Optional[Cpu],
        Field(
            description='CPU monitoring for targets matching this Monitor.', title='CPU'
        ),
    ] = None
    memory: Annotated[
        Optional[Memory],
        Field(
            description='Memory monitoring for targets matching this Monitor.',
            title='Memory',
        ),
    ] = None
    targetSelector: Annotated[
        Optional[List[str]],
        Field(
            description='Selector to use when including targets to monitor.',
            title='Target Selector',
        ),
    ] = None
    targets: Annotated[
        Optional[List[str]],
        Field(description='References to targets to monitor.', title='Targets'),
    ] = None
    volume: Annotated[
        Optional[Volume],
        Field(
            description='Volume monitoring for targets matching this Monitor.',
            title='Volume',
        ),
    ] = None


class Status1Model5(BaseModel):
    targets: Annotated[
        Optional[List[str]],
        Field(description='Targets being monitored.', title='Targets'),
    ] = None


class MonitorDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class MonitorDeletedResources(RootModel[List[MonitorDeletedResourceEntry]]):
    root: List[MonitorDeletedResourceEntry]


class MonitorMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class SpecModel1(BaseModel):
    foo: Annotated[
        str,
        Field(
            description='INSERT ADDITIONAL SPEC FIELDS - define desired state of cluster\nImportant: Run "edabuilder generate" to regenerate code after modifying this file'
        ),
    ]


class Status1Model6(BaseModel):
    commonLanguageEquipmentIdentifier: Annotated[
        Optional[str],
        Field(description='The CLEI code of this component', title='CLEI Code'),
    ] = None
    lastBooted: Annotated[
        Optional[date],
        Field(
            description='The date and time this component last booted',
            title='Last Booted',
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description='The date and time this component last changed operational state',
            title='Last Change',
        ),
    ] = None
    locatorEnabled: Annotated[
        Optional[bool],
        Field(
            description='Indicates if the locator LED for the component is active',
            title='Locator Enabled',
        ),
    ] = None
    manufacturedDate: Annotated[
        Optional[date],
        Field(
            description='The date this component was manufactured',
            title='Manufactured Date',
        ),
    ] = None
    operationalState: Annotated[
        Optional[Literal['Up', 'Down', 'Rebooting', 'Unknown', 'Starting', 'Empty']],
        Field(
            description='Indicates the current operational state of this component.',
            title='Operational State',
        ),
    ] = None
    parent: Annotated[
        Optional[str],
        Field(description='Reference to a parent component', title='Parent'),
    ] = None
    parentType: Annotated[
        Optional[
            Literal[
                'Fan',
                'FanTray',
                'PowerSupply',
                'PowerModule',
                'PowerShelf',
                'InterfaceModule',
                'ControlModule',
                'FabricModule',
                'Chassis',
                'Transceiver',
            ]
        ],
        Field(description='Type of the parent component', title='Parent Type'),
    ] = None
    partNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered part number of this component',
            title='Part Number',
        ),
    ] = None
    removable: Annotated[
        Optional[bool],
        Field(
            description='Indicates if this component is removable', title='Removable'
        ),
    ] = None
    serialNumber: Annotated[
        Optional[str],
        Field(
            description='The discovered serial number of this component',
            title='Serial Number',
        ),
    ] = None
    slot: Annotated[
        Optional[str],
        Field(
            description='Slot this component resides in, unset for components that do not have a slot or ID',
            title='Slot',
        ),
    ] = None
    softwareVersion: Annotated[
        Optional[str],
        Field(
            description='Version string of the software running on this component',
            title='Software Version',
        ),
    ] = None
    target: Annotated[
        Optional[str],
        Field(description='Target this component resides on.', title='Target'),
    ] = None
    temperature: Annotated[
        Optional[Temperature],
        Field(
            description='Temperature information for this component',
            title='Temperature',
        ),
    ] = None
    type: Annotated[
        Optional[str],
        Field(description='Component type, as provided by the target', title='Type'),
    ] = None


class PowerSupplyMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class Chassis(BaseModel):
    apiVersion: str
    kind: str
    metadata: ChassisMetadata
    spec: Annotated[
        Dict[str, Any],
        Field(
            description='ChassisSpec defines the desired state of Chassis',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status],
        Field(
            description='ChassisStatus defines the observed state of Chassis',
            title='Status',
        ),
    ] = None


class ChassisList(BaseModel):
    apiVersion: str
    items: Optional[List[Chassis]] = None
    kind: str


class Component(BaseModel):
    apiVersion: str
    kind: str
    metadata: ComponentMetadata
    spec: Annotated[
        Spec,
        Field(
            description='ComponentSpec defines the desired state of Component',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status1Model],
        Field(
            description='ComponentStatus defines the observed state of Component',
            title='Status',
        ),
    ] = None


class ComponentList(BaseModel):
    apiVersion: str
    items: Optional[List[Component]] = None
    kind: str


class ControlModule(BaseModel):
    apiVersion: str
    kind: str
    metadata: ControlModuleMetadata
    spec: Annotated[
        Dict[str, Any],
        Field(
            description='ControlModuleSpec defines the desired state of ControlModule',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status1Model1],
        Field(
            description='ControlModuleStatus defines the observed state of ControlModule',
            title='Status',
        ),
    ] = None


class ControlModuleList(BaseModel):
    apiVersion: str
    items: Optional[List[ControlModule]] = None
    kind: str


class FabricModule(BaseModel):
    apiVersion: str
    kind: str
    metadata: FabricModuleMetadata
    spec: Annotated[
        Dict[str, Any],
        Field(
            description='FabricModuleSpec defines the desired state of FabricModule',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status1Model2],
        Field(
            description='FabricModuleStatus defines the observed state of FabricModule',
            title='Status',
        ),
    ] = None


class FabricModuleList(BaseModel):
    apiVersion: str
    items: Optional[List[FabricModule]] = None
    kind: str


class Fan(BaseModel):
    apiVersion: str
    kind: str
    metadata: FanMetadata
    spec: Annotated[
        Dict[str, Any],
        Field(
            description='FanSpec defines the desired state of Fan',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status1Model3],
        Field(
            description='FanStatus defines the observed state of Fan', title='Status'
        ),
    ] = None


class FanList(BaseModel):
    apiVersion: str
    items: Optional[List[Fan]] = None
    kind: str


class InterfaceModule(BaseModel):
    apiVersion: str
    kind: str
    metadata: InterfaceModuleMetadata
    spec: Annotated[
        Dict[str, Any],
        Field(
            description='InterfaceModuleSpec defines the desired state of InterfaceModule',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status1Model4],
        Field(
            description='InterfaceModuleStatus defines the observed state of InterfaceModule',
            title='Status',
        ),
    ] = None


class InterfaceModuleList(BaseModel):
    apiVersion: str
    items: Optional[List[InterfaceModule]] = None
    kind: str


class Monitor(BaseModel):
    apiVersion: str
    kind: str
    metadata: MonitorMetadata
    spec: Annotated[
        SpecModel,
        Field(
            description='MonitorSpec defines the desired state of Monitor',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status1Model5],
        Field(
            description='MonitorStatus defines the observed state of Monitor',
            title='Status',
        ),
    ] = None


class MonitorList(BaseModel):
    apiVersion: str
    items: Optional[List[Monitor]] = None
    kind: str


class PowerSupply(BaseModel):
    apiVersion: str
    kind: str
    metadata: PowerSupplyMetadata
    spec: Annotated[
        SpecModel1,
        Field(
            description='PowerSupplySpec defines the desired state of PowerSupply',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status1Model6],
        Field(
            description='PowerSupplyStatus defines the observed state of PowerSupply',
            title='Status',
        ),
    ] = None


class PowerSupplyList(BaseModel):
    apiVersion: str
    items: Optional[List[PowerSupply]] = None
    kind: str
