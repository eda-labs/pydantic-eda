# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/eda-labs/openapi/v25.4.1/apps/qos.eda.nokia.com/v1alpha1/qos.json
#   timestamp: 2025-05-07T11:44:01+00:00

from __future__ import annotations

from typing import Annotated, Any, Dict, List, Literal, Optional

from pydantic import BaseModel, Field, RootModel


class DropProbabilityItem(BaseModel):
    level: Annotated[
        Optional[Literal['High', 'Medium', 'Low']],
        Field(
            description='A drop probability level within the forwarding class for which a different remarking is desired',
            title='Level',
        ),
    ] = None
    pcpValue: Annotated[
        Optional[int],
        Field(
            description='The PCP value to be used for packets associated with the forwarding class and the specific drop probability. This overrides the general PCP value.',
            ge=0,
            le=7,
            title='PCP Value',
        ),
    ] = None


class Dot1pMapItem(BaseModel):
    dropProbability: Annotated[
        Optional[List[DropProbabilityItem]],
        Field(
            description='Drop probability specific overrides within the forwarding class',
            title='Drop Probability',
        ),
    ] = None
    forwardingClasses: Annotated[
        List[str],
        Field(
            description='The forwarding class matched to apply the rewrite policy',
            title='Forwarding Class',
        ),
    ]
    pcpValue: Annotated[
        Optional[int],
        Field(
            description='The PCP value to be used for all packets associated with the forwarding class, except those with a drop-probability-specific or profile-specific override',
            ge=0,
            le=7,
            title='PCP Value',
        ),
    ] = None


class Dot1pRewritePolicy(BaseModel):
    dot1pMap: Annotated[
        List[Dot1pMapItem],
        Field(description='Map of forwarding classes to PCP values', title='Map'),
    ]


class DropProbabilityItemModel(BaseModel):
    dscp: Annotated[
        Optional[int],
        Field(
            description='The DSCP value to be used for packets associated with the forwarding class and the specific drop probability. This overrides the general DSCP value.',
            ge=0,
            le=63,
            title='DSCP',
        ),
    ] = None
    level: Annotated[
        Optional[Literal['High', 'Medium', 'Low']],
        Field(
            description='A drop probability level within the forwarding class for which a different remarking is desired.',
            title='Level',
        ),
    ] = None


class DscpMapItem(BaseModel):
    dropProbability: Annotated[
        Optional[List[DropProbabilityItemModel]],
        Field(
            description='A drop probability within the forwarding class for which a different remarking is desired.',
            title='Drop Probability',
        ),
    ] = None
    dscp: Annotated[
        Optional[int],
        Field(
            description='The DSCP value to be used for all packets associated with the forwarding class, except those with a drop-probability-specific or profile-specific override.',
            ge=0,
            le=63,
            title='DSCP',
        ),
    ] = None
    forwardingClasses: Annotated[
        List[str],
        Field(
            description='The forwarding class matched to apply the rewrite policy.',
            title='Forwarding Class',
        ),
    ]


class DscpRewritePolicy(BaseModel):
    dscpMap: Annotated[
        List[DscpMapItem],
        Field(description='Map of forwarding classes to DSCP values.', title='Map'),
    ]


class ForwardingClassToQueueMappingItem(BaseModel):
    forwardingClasses: Annotated[
        List[str],
        Field(
            description='The forwarding classes to which the mapping applies, these are references to ForwardingClass resources.',
            min_length=1,
            title='Forwarding Classes',
        ),
    ]
    queue: Annotated[
        str,
        Field(
            description='The queue to which the forwarding classes are mapped, this is a reference to a Queue resource.',
            title='Queue',
        ),
    ]
    queueGroup: Annotated[
        Optional[str],
        Field(
            description='The queue-group name for queue to forwarding class mapping.',
            title='Queue Group',
        ),
    ] = None


class PfcDeadlockAvoidance(BaseModel):
    deadlockAvoidance: Annotated[
        bool,
        Field(
            description='Parameters related to avoid a deadlock related to pfc on outgoing interface',
            title='Deadlock Avoidance',
        ),
    ]
    deadlockDetectionTimer: Annotated[
        int,
        Field(
            description='Number of milliseconds during which outgoing interface is receiving pfc-pause-frames before triggering recovery-timer.',
            title='Deadlock Detection Timer',
        ),
    ]
    deadlockRecoveryTimer: Annotated[
        int,
        Field(
            description='Number of milliseconds during which the pfc-pause-frames will be ignored.',
            title='Deadlock Recovery Timer',
        ),
    ]


class Queue(BaseModel):
    committedBurstSize: Annotated[
        Optional[int],
        Field(description='Committed Burst Size.', title='Committed Burst Size'),
    ] = None
    maximumBurstSize: Annotated[
        int,
        Field(
            description='Maximum amount of shared buffer memory available to the queue in bytes.',
            ge=0,
            le=4294967295,
            title='Maximum Burst Size',
        ),
    ]
    pfcPauseFramePriority: Annotated[
        Optional[int],
        Field(
            description='The pfc-priority received in pfc-pause-frame.',
            title='PFC Priority',
        ),
    ] = None
    queue: Annotated[
        str, Field(description='Reference to a Queue resource.', title='Queue')
    ]
    schedulerPeakRatePercent: Annotated[
        Optional[int],
        Field(
            description='The peak rate percent used by the scheduler for the queue.',
            ge=1,
            le=100,
            title='Scheduler Peak Rate Percent',
        ),
    ] = None
    schedulerPriorityLevel: Annotated[
        Optional[int],
        Field(
            description='The priority level at this Port Scheduler Policy.',
            ge=1,
            le=8,
            title='Scheduler Priority Level',
        ),
    ] = None
    schedulerWeight: Annotated[
        Optional[int],
        Field(
            description='The weight factor used for the WRR scheduler. If any of the queues have a configured weight the set of queues will use a WRR scheduler and thus all queues must have a weight configured.  If no weights are set then the queues are scheduled in strict priority from lowest to higher queue ID.',
            ge=0,
            le=255,
            title='Scheduler Weight',
        ),
    ] = None


class WredSlopPolicy(BaseModel):
    drop: Annotated[
        bool,
        Field(
            description='When set to true, and if the ECN field in the packet indicates that the endpoints are not ECN-capable, and the WRED algorithm determines that the packet should be dropped based on the drop probability, the packet will be dropped',
            title='Drop',
        ),
    ]
    dropProbability: Annotated[
        Literal['High', 'Medium', 'Low', 'All'], Field(title='Drop Probability')
    ]
    ecn: Annotated[
        bool,
        Field(
            description='When set to true and the queue length is between the thresholds and the ECN field indicates ECN-capable endpoints, the CE bits are set to 1, and the packet is transmitted based on WRED. If false, such packets are discarded.',
            title='ECN',
        ),
    ]
    maxDropProbabilityPercent: Annotated[
        Optional[int],
        Field(
            description='If the queue depth is between min and max threshold then this the probability with which packets are dropped or marked.',
            title='Max Drop Probability Percent',
        ),
    ] = None
    maxThreshold: Annotated[
        Optional[int],
        Field(
            description='The maximum threshold parameter for a RED-managed queue in bytes. When the average queue length exceeds the max value, all packets are dropped (or marked if ECN is enabled). Mutually exclusive with min-threshold-percent and max-threshold-percent.',
            title='Max Threshold',
        ),
    ] = None
    maxThresholdPercent: Annotated[
        Optional[int],
        Field(
            description='The maximum threshold parameter for a RED-managed queue in percent. When the average queue length exceeds the max value, all packets are dropped (or marked if ECN is enabled). Mutually exclusive with min-threshold and max-threshold.',
            title='Max Threshold Percent',
        ),
    ] = None
    minThreshold: Annotated[
        Optional[int],
        Field(
            description='The mininum threshold parameter for a RED-managed queue in bytes. When the average queue length is less than min, all packets are admitted to the queue. Mututally exclusive with min-threshold-percent and max-threshold-percent.',
            title='Min Threshold',
        ),
    ] = None
    minThresholdPercent: Annotated[
        Optional[int],
        Field(
            description='The mininum threshold parameter for a RED-managed queue in percent. When the average queue length is less than min, all packets are admitted to the queue. Mutually exclusive with min-threshold and max-threshold.',
            title='Min Threshold Percent',
        ),
    ] = None
    trafficType: Annotated[
        Literal['Tcp', 'NonTcp', 'All'],
        Field(
            description='The traffic type to which the WRED slope applies.',
            title='Traffic Type',
        ),
    ]


class QueueManagementItem(BaseModel):
    queues: Annotated[List[Queue], Field(description='List of queues.', title='Queues')]
    slopePolicyWeight: Annotated[
        Optional[int],
        Field(
            description='The average queue size is calculated using both the previous average and the current queue size: average = (previous average)(1 - 2^(-n)) + (current size)(2^(-n)), where n is a user-configurable weight factor. A higher n gives more importance to the previous average, smoothing peaks and lows in the queue. Lower n makes the average closer to the current queue size. If this leaf is absent, the default value is used.',
            ge=0,
            le=15,
            title='Slope Policy Weight',
        ),
    ] = 0
    wredSlopPolicies: Annotated[
        Optional[List[WredSlopPolicy]],
        Field(
            description='Slope policy to apply to the set of queues.',
            title='Slope Policy',
        ),
    ] = None


class Spec(BaseModel):
    dot1pRewritePolicy: Annotated[
        Optional[Dot1pRewritePolicy],
        Field(
            description='Dot1pRewritePolicy enables the configuration of rewrite policies for Dot1p values. It includes mappings of forwarding classes to Dot1p values, with options for drop probability-specific overrides within each forwarding class.',
            title='Dot1p Rewrite Policy',
        ),
    ] = None
    dscpRewritePolicy: Annotated[
        Optional[DscpRewritePolicy],
        Field(
            description='DSCPRewritePolicy enables the configuration of rewrite policies for Differentiated Services Code Point (DSCP) values. It includes mappings of forwarding classes to DSCP values, with options for drop probability-specific overrides within each forwarding class.  If a DSCPRewritePolicy is not specified, the DSCP value of the packet is unchanged. If a DSCP policy is specific and ECN is enabled on any of the queues, the DSCP policy will be applied to all ECN capable packets.',
            title='DSCP Rewrite Policy',
        ),
    ] = None
    forwardingClassToQueueMapping: Annotated[
        Optional[List[ForwardingClassToQueueMappingItem]],
        Field(
            description='Forwarding class to queue mapping policy.',
            title='Forwarding Class to Queue Mapping',
        ),
    ] = None
    pfcDeadlockAvoidance: Annotated[
        Optional[PfcDeadlockAvoidance],
        Field(
            description='Parameters related to avoid a deadlock related to pfc on outgoing interface.',
            title='Deadlock Avoidance',
        ),
    ] = None
    queueManagement: Annotated[
        Optional[List[QueueManagementItem]],
        Field(
            description='Queue management policy for egress queues.',
            title='Queue Management',
        ),
    ] = None


class EgressPolicyDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class EgressPolicyDeletedResources(RootModel[List[EgressPolicyDeletedResourceEntry]]):
    root: List[EgressPolicyDeletedResourceEntry]


class EgressPolicyMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class ForwardingClassDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class ForwardingClassDeletedResources(
    RootModel[List[ForwardingClassDeletedResourceEntry]]
):
    root: List[ForwardingClassDeletedResourceEntry]


class ForwardingClassMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class PcpValue(BaseModel):
    rangeEnd: Annotated[
        Optional[int],
        Field(
            description='Optional end of PCP range (inclusive) which would start from the Value to the RangeEnd.',
            ge=0,
            le=7,
            title='PCP Range End',
        ),
    ] = None
    value: Annotated[
        int,
        Field(
            description='Single PCP value or start of range.',
            ge=0,
            le=7,
            title='PCP Value',
        ),
    ]


class Dot1pPolicyEntry(BaseModel):
    directToPFCQueue: Annotated[
        Optional[bool],
        Field(
            description='In addition to creating a Dot1p PCP value to Forwarding Class mapping, this will map the PCP values directly to the PFC queue specified in the Forwarding Class to Queue mapping.',
            title='Direct to PFC Queue',
        ),
    ] = None
    dropProbabilityLevel: Annotated[
        Optional[Literal['High', 'Medium', 'Low']],
        Field(
            description='Assign matching packets to the specified drop probability level.',
            title='Drop Probability Level',
        ),
    ] = 'Low'
    forwardingClass: Annotated[
        Optional[str],
        Field(
            description='Reference to a ForwardingClass resource to which the value is mapped.',
            title='Forwarding Class',
        ),
    ] = None
    pcpValues: Annotated[
        List[PcpValue],
        Field(
            description='List of PCP values or ranges used to match packets to classify into Forwarding Classes.',
            min_length=1,
            title='PCP Values',
        ),
    ]


class DscpValue(BaseModel):
    rangeEnd: Annotated[
        Optional[int],
        Field(
            description='Optional end of DSCP range (inclusive) which would start from the Value to the RangeEnd.',
            ge=0,
            le=63,
            title='DSCP Range End',
        ),
    ] = None
    value: Annotated[
        int,
        Field(
            description='Single DSCP value or start of range.',
            ge=0,
            le=63,
            title='DSCP Value',
        ),
    ]


class DscpPolicyEntry(BaseModel):
    dropProbabilityLevel: Annotated[
        Optional[Literal['High', 'Medium', 'Low']],
        Field(
            description='Assign matching packets to the specified drop probability level.',
            title='Drop Probability Level',
        ),
    ] = 'Low'
    dscpValues: Annotated[
        List[DscpValue],
        Field(
            description='List of DSCP values or ranges used to match packets to classify into Forwarding Classes.',
            min_length=1,
            title='DSCP Values',
        ),
    ]
    forwardingClass: Annotated[
        Optional[str],
        Field(
            description='Reference to a ForwardingClass resource to which the value is mapped.',
            title='Forwarding Class',
        ),
    ] = None


class Action(BaseModel):
    dropProbabilityLevel: Annotated[
        Optional[Literal['High', 'Medium', 'Low']],
        Field(
            description='Assign matching packets to the specified drop probability level.',
            title='Drop Probability Level',
        ),
    ] = 'Low'
    dscpRewriteValue: Annotated[
        Optional[int],
        Field(
            description='Rewrite actions associated with packets that match the classifier entry.',
            ge=0,
            le=63,
            title='DSCP Rewrite Value',
        ),
    ] = None
    forwardingClass: Annotated[
        Optional[str],
        Field(
            description='Reference to a ForwardingClass resource to which the value is mapped.',
            title='Forwarding Class',
        ),
    ] = None


class IpEntry(BaseModel):
    action: Annotated[
        Action,
        Field(description='An action to take on the matched packets.', title='Action'),
    ]
    destinationPortName: Annotated[
        Optional[
            Literal[
                'ACAP',
                'AFP-TCP',
                'ARNS',
                'ASF-RMCP',
                'ASHARE',
                'ATALK-RM',
                'AURP',
                'AUTH',
                'BFD',
                'BFD-ECHO',
                'BFTP',
                'BGMP',
                'BGP',
                'BOOTPC',
                'BOOTPS',
                'CCSO-NS',
                'CHARGEN',
                'CISCO-TDP',
                'CITADEL',
                'CLEARCASE',
                'COMMERCE',
                'COURIER',
                'DAYTIME',
                'DHCP-FAILOVER',
                'DHCPV6-CLIENT',
                'DHCPV6-SERVER',
                'DICOM',
                'DISCARD',
                'DNSIX',
                'DOMAIN',
                'DSP',
                'ECHO',
                'EPP',
                'ESRO',
                'EXEC',
                'FINGER',
                'FTP',
                'FTP-DATA',
                'FTPS',
                'FTPS-DATA',
                'GODI',
                'GOPHER',
                'GTP-C',
                'GTP-PRIME',
                'GTP-U',
                'HA-CLUSTER',
                'HOSTNAME',
                'HP-ALARM-MGR',
                'HTTP',
                'HTTP-ALT',
                'HTTP-MGMT',
                'HTTP-RPC',
                'HTTPS',
                'IEEE-MMS-SSL',
                'IMAP',
                'IMAP3',
                'IMAPS',
                'IPP',
                'IPSEC',
                'IPX',
                'IRC',
                'IRIS-BEEP',
                'ISAKMP',
                'ISAKMP-NAT',
                'ISCSI',
                'ISO-TSAP',
                'KERBEROS',
                'KERBEROS-ADM',
                'KLOGIN',
                'KPASSWD',
                'KSHELL',
                'L2TP',
                'LDAP',
                'LDAPS',
                'LDP',
                'LMP',
                'LOGIN',
                'LPD',
                'LSP-PING',
                'MAC-SERVER-ADM',
                'MATIP-A',
                'MATIP-B',
                'MICRO-BFD',
                'MICROSOFT-DS',
                'MOBILE-IP',
                'MONITOR',
                'MPP',
                'MS-EXCHANGE',
                'MSDP',
                'MSP',
                'MSSQL-M',
                'MSSQL-S',
                'MULTIHOP-BFD',
                'NAS',
                'NCP',
                'NETBIOS-DATA',
                'NETBIOS-NS',
                'NETBIOS-SS',
                'NETNEWS',
                'NETRJS-1',
                'NETRJS-2',
                'NETRJS-3',
                'NETRJS-4',
                'NETWALL',
                'NEW-RWHO',
                'NFS',
                'NNTP',
                'NNTPS',
                'NTP',
                'ODMR',
                'OLSR',
                'OPENVPN',
                'PIM-AUTO-RP',
                'PKIX-TIMESTAMP',
                'POP2',
                'POP3',
                'POP3S',
                'PPTP',
                'PRINT-SRV',
                'PTP-EVENT',
                'PTP-GENERAL',
                'QMTP',
                'QOTD',
                'RADIUS',
                'RADIUS-ACCT',
                'REMOTE-MAIL',
                'REMOTEFS',
                'REMOTECMD',
                'RIP',
                'RJE',
                'RLP',
                'RLZDB',
                'RMC',
                'RMONITOR',
                'RPC2PORTMAP',
                'RSYNC',
                'RTELNET',
                'RTSP',
                'SGMP',
                'SILC',
                'SMUX',
                'SNA-GW',
                'SNMP',
                'SNMP-TRAP',
                'SNPP',
                'SMTP',
                'SQL-SVCS',
                'SQL',
                'SSH',
                'SUBMISSION',
                'SUNRPC',
                'SVCLOC',
                'SYSLOG',
                'SYSTAT',
                'TACACS',
                'TALK',
                'TCPMUX',
                'TCPNETHASPSRV',
                'TFTP',
                'TIME',
                'TIMED',
                'UPS',
                'XDMCP',
                'XNS-CH',
                'XNS-MAIL',
                'XNS-TIME',
                'Z3950',
            ]
        ],
        Field(
            description='Destination port to match by name.',
            title='Destination Port Name',
        ),
    ] = None
    destinationPortNumber: Annotated[
        Optional[int],
        Field(
            description='Destination port to match by numerical value.',
            ge=0,
            le=65535,
            title='Destination Port Number',
        ),
    ] = None
    destinationPortOperator: Annotated[
        Optional[Literal['Equals', 'GreaterOrEquals', 'LessOrEquals']],
        Field(
            description='Operator to use when matching destinationPort, either Equals, GreaterOrEquals, or LessOrEquals.',
            title='Destination Port Operator',
        ),
    ] = None
    destinationPortRange: Annotated[
        Optional[str],
        Field(
            description='Range of destination ports to match, in the format n-m, e.g. 100-200,  The start and end of the range must be port numbers.',
            title='Destination Port Range',
        ),
    ] = None
    destinationPrefix: Annotated[
        Optional[str],
        Field(description='Destination prefix to match.', title='Destination Prefix'),
    ] = None
    firstFragment: Annotated[
        Optional[bool],
        Field(description='Match the first fragment only.', title='First Fragment'),
    ] = None
    fragment: Annotated[
        Optional[bool], Field(description='Match any fragment.', title='Fragment')
    ] = None
    icmpCode: Annotated[
        Optional[List[int]],
        Field(
            description='Match a specific ICMP code, as a number between 0-255, e.g. 0.',
            max_length=255,
            min_length=0,
            title='ICMP Code',
        ),
    ] = None
    icmpTypeName: Annotated[
        Optional[
            Literal[
                'DestUnreachable',
                'Echo',
                'EchoReply',
                'EchoRequest',
                'McastRtrAdv',
                'McastRtrSolicit',
                'McastRtrTerm',
                'MldDone',
                'MldQuery',
                'MldReport',
                'MldV2',
                'NeighborAdvertise',
                'NeighborSolicit',
                'NodeInfoQuery',
                'NodeInfoResponse',
                'PacketTooBig',
                'ParamProblem',
                'Redirect',
                'RouterAdvertise',
                'RouterRenumber',
                'RouterSolicit',
                'SourceQuench',
                'TimeExceeded',
                'Timestamp',
                'TimestampReply',
            ]
        ],
        Field(
            description='Match a specific ICMP type by name, e.g. dest-unreachable.',
            title='ICMP Type Name',
        ),
    ] = None
    icmpTypeNumber: Annotated[
        Optional[int],
        Field(
            description='Match a specific ICMP type by number.',
            ge=0,
            le=255,
            title='ICMP Type Number',
        ),
    ] = None
    protocolName: Annotated[
        Optional[
            Literal[
                'AH',
                'EGP',
                'EIGRP',
                'ESP',
                'GGP',
                'GRE',
                'ICMP',
                'ICMP6',
                'IDRP',
                'IGMP',
                'IGP',
                'IPV4',
                'IPV6',
                'IPV6-DEST-OPTS',
                'IPV6-HOP',
                'L2TP',
                'MPLS-IN-IP',
                'NO-NEXT-HDR',
                'OSPF',
                'PIM',
                'ROHC',
                'RSVP',
                'SCTP',
                'ST',
                'TCP',
                'UDP',
                'VRRP',
            ]
        ],
        Field(
            description='Match a specific IP protocol name (specified in the type field of the IP header).',
            title='Protocol Name',
        ),
    ] = None
    protocolNumber: Annotated[
        Optional[int],
        Field(
            description='Match a specific IP protocol number (specified in the type field of the IP header).',
            ge=0,
            le=255,
            title='Protocol Number',
        ),
    ] = None
    sourcePortName: Annotated[
        Optional[
            Literal[
                'ACAP',
                'AFP-TCP',
                'ARNS',
                'ASF-RMCP',
                'ASHARE',
                'ATALK-RM',
                'AURP',
                'AUTH',
                'BFD',
                'BFD-ECHO',
                'BFTP',
                'BGMP',
                'BGP',
                'BOOTPC',
                'BOOTPS',
                'CCSO-NS',
                'CHARGEN',
                'CISCO-TDP',
                'CITADEL',
                'CLEARCASE',
                'COMMERCE',
                'COURIER',
                'DAYTIME',
                'DHCP-FAILOVER',
                'DHCPV6-CLIENT',
                'DHCPV6-SERVER',
                'DICOM',
                'DISCARD',
                'DNSIX',
                'DOMAIN',
                'DSP',
                'ECHO',
                'EPP',
                'ESRO',
                'EXEC',
                'FINGER',
                'FTP',
                'FTP-DATA',
                'FTPS',
                'FTPS-DATA',
                'GODI',
                'GOPHER',
                'GTP-C',
                'GTP-PRIME',
                'GTP-U',
                'HA-CLUSTER',
                'HOSTNAME',
                'HP-ALARM-MGR',
                'HTTP',
                'HTTP-ALT',
                'HTTP-MGMT',
                'HTTP-RPC',
                'HTTPS',
                'IEEE-MMS-SSL',
                'IMAP',
                'IMAP3',
                'IMAPS',
                'IPP',
                'IPSEC',
                'IPX',
                'IRC',
                'IRIS-BEEP',
                'ISAKMP',
                'ISAKMP-NAT',
                'ISCSI',
                'ISO-TSAP',
                'KERBEROS',
                'KERBEROS-ADM',
                'KLOGIN',
                'KPASSWD',
                'KSHELL',
                'L2TP',
                'LDAP',
                'LDAPS',
                'LDP',
                'LMP',
                'LOGIN',
                'LPD',
                'LSP-PING',
                'MAC-SERVER-ADM',
                'MATIP-A',
                'MATIP-B',
                'MICRO-BFD',
                'MICROSOFT-DS',
                'MOBILE-IP',
                'MONITOR',
                'MPP',
                'MS-EXCHANGE',
                'MSDP',
                'MSP',
                'MSSQL-M',
                'MSSQL-S',
                'MULTIHOP-BFD',
                'NAS',
                'NCP',
                'NETBIOS-DATA',
                'NETBIOS-NS',
                'NETBIOS-SS',
                'NETNEWS',
                'NETRJS-1',
                'NETRJS-2',
                'NETRJS-3',
                'NETRJS-4',
                'NETWALL',
                'NEW-RWHO',
                'NFS',
                'NNTP',
                'NNTPS',
                'NTP',
                'ODMR',
                'OLSR',
                'OPENVPN',
                'PIM-AUTO-RP',
                'PKIX-TIMESTAMP',
                'POP2',
                'POP3',
                'POP3S',
                'PPTP',
                'PRINT-SRV',
                'PTP-EVENT',
                'PTP-GENERAL',
                'QMTP',
                'QOTD',
                'RADIUS',
                'RADIUS-ACCT',
                'REMOTE-MAIL',
                'REMOTEFS',
                'REMOTECMD',
                'RIP',
                'RJE',
                'RLP',
                'RLZDB',
                'RMC',
                'RMONITOR',
                'RPC2PORTMAP',
                'RSYNC',
                'RTELNET',
                'RTSP',
                'SGMP',
                'SILC',
                'SMUX',
                'SNA-GW',
                'SNMP',
                'SNMP-TRAP',
                'SNPP',
                'SMTP',
                'SQL-SVCS',
                'SQL',
                'SSH',
                'SUBMISSION',
                'SUNRPC',
                'SVCLOC',
                'SYSLOG',
                'SYSTAT',
                'TACACS',
                'TALK',
                'TCPMUX',
                'TCPNETHASPSRV',
                'TFTP',
                'TIME',
                'TIMED',
                'UPS',
                'XDMCP',
                'XNS-CH',
                'XNS-MAIL',
                'XNS-TIME',
                'Z3950',
            ]
        ],
        Field(description='Source port to match by name.', title='Source Port Name'),
    ] = None
    sourcePortNumber: Annotated[
        Optional[int],
        Field(
            description='Source port to match by numerical value.',
            ge=0,
            le=65535,
            title='Source Port Number',
        ),
    ] = None
    sourcePortOperator: Annotated[
        Optional[Literal['Equals', 'GreaterOrEquals', 'LessOrEquals']],
        Field(
            description='Operator to use when matching sourcePort, either Equals, GreaterOrEquals, or LessOrEquals.',
            title='Source Port Operator',
        ),
    ] = None
    sourcePortRange: Annotated[
        Optional[str],
        Field(
            description='Range of source ports to match, in the format n-m, e.g. 100-200.  The start and end of the range must be port numbers.',
            title='Source Port Range',
        ),
    ] = None
    sourcePrefix: Annotated[
        Optional[str],
        Field(description='Source prefix to match.', title='Source Prefix'),
    ] = None
    tcpFlags: Annotated[
        Optional[str],
        Field(
            description='Match TCP flags, usable with !, &, | and the flags RST, SYN, and ACK.',
            title='TCP Flags',
        ),
    ] = None


class Entry(BaseModel):
    dot1pPolicyEntry: Annotated[
        Optional[Dot1pPolicyEntry],
        Field(
            description='A Dot1p policy entry - only a single Dot1p entry is allowed per classifier resource.',
            title='Dot1p Policy Entry',
        ),
    ] = None
    dscpPolicyEntry: Annotated[
        Optional[DscpPolicyEntry],
        Field(
            description='A DSCP policy entry - only a single DSCP entry is allowed per classifier resource.',
            title='DSCP Policy Entry',
        ),
    ] = None
    ipEntry: Annotated[
        Optional[IpEntry],
        Field(
            description='An IPv4 or IPv6 multifield classifier entry.', title='IP Entry'
        ),
    ] = None
    type: Annotated[
        Literal['IPV4', 'IPV6', 'DOT1P', 'DSCP', 'AUTO'],
        Field(
            description='Type of the entry which can be IPV4, IPV6, Dot1pPolicy, DSCPPolicy, or Auto.',
            title='Type',
        ),
    ]


class Classifier(BaseModel):
    entries: Annotated[
        List[Entry],
        Field(
            description='Specifies the list of filter entries, in order.\nA classifier containing multiple entry types may result in multiple classifiers being created on the target node.\nIPV4 and IPV6 entries will create multifield classifier policies.',
            title='Entries',
        ),
    ]


class ForwardingClassToQueueMappingItemModel(BaseModel):
    forwardingClasses: Annotated[
        List[str],
        Field(
            description='The forwarding classes to which the mapping applies, these are references to ForwardingClass resources.',
            min_length=1,
            title='Forwarding Classes',
        ),
    ]
    queue: Annotated[
        str,
        Field(
            description='The queue to which the forwarding classes are mapped, this is a reference to a Queue resource.',
            title='Queue',
        ),
    ]


class ExceedAction(BaseModel):
    dropProbabilityLevel: Annotated[
        Optional[Literal['High', 'Medium', 'Low']],
        Field(title='Drop Probability Level'),
    ] = 'Medium'


class ForwardingClass(BaseModel):
    forwardingClasses: Annotated[
        Optional[List[str]],
        Field(
            description="The forwarding class of the packets on which to apply the Policer.  To match all traffic set this to 'ALL'.",
            title='Forwarding Class',
        ),
    ] = None
    forwardingTypes: Annotated[
        List[
            Literal[
                'Broadcast',
                'Unicast',
                'Multicast',
                'UnknownMulticast',
                'UnknownUnicast',
                'All',
            ]
        ],
        Field(title='Forwarding Type'),
    ]


class ViolateAction(BaseModel):
    dropProbabilityLevel: Annotated[
        Optional[Literal['High', 'Medium', 'Low', 'All']],
        Field(title='Drop Probability Level'),
    ] = 'High'


class Policer(BaseModel):
    committedBurstSize: Annotated[
        Optional[int],
        Field(
            description='Maximum CIR bucket depth in bytes.',
            ge=0,
            le=4294967295,
            title='Committed Burst Size',
        ),
    ] = None
    committedRate: Annotated[
        Optional[int],
        Field(
            description='The committed information rate (CIR) of the policer, defined in kilobits (1024 bits) per second.',
            title='Committed Rate',
        ),
    ] = None
    committedRatePercent: Annotated[
        Optional[int],
        Field(
            description='The committed information rate (CIR) of the policer, defined as a percentage of the Interface speed on which it is applied.',
            ge=0,
            le=100,
            title='Committed Rate Percentage',
        ),
    ] = None
    exceedAction: Annotated[
        Optional[ExceedAction],
        Field(
            description='Applies a drop-probability to packets that the policer has determined are exceeding (yellow).',
            title='Exceed Action',
        ),
    ] = None
    forwardingClasses: Annotated[
        Optional[List[ForwardingClass]],
        Field(
            description='The list of forwarding classes with traffic to be sent to the policer.  Unless specified all traffic is matched for this policer.',
            title='Forwarding Class',
        ),
    ] = None
    maximumBurstSize: Annotated[
        Optional[int],
        Field(
            description='Maximum PIR bucket depth in bytes.',
            ge=0,
            le=4294967295,
            title='Maximum Burst Size',
        ),
    ] = None
    minInterfaceSpeed: Annotated[
        Optional[int],
        Field(
            description='Minimum interface speed (kbps) to calculate PeakRate and CommittedRate for devices where configuration is not supported in percentage.',
            title='Minimum Interface Speed',
        ),
    ] = None
    peakRate: Annotated[
        Optional[int],
        Field(
            description='The peak information rate (PIR) of the policer, defined in kilobits (1024 bits) per second.',
            title='Peak Rate',
        ),
    ] = None
    peakRatePercent: Annotated[
        Optional[int],
        Field(
            description='The peak information rate (PIR) of the policer, defined as a percentage of the Interface speed on which it is applied.',
            ge=0,
            le=100,
            title='Peak Rate Percentage',
        ),
    ] = None
    violateAction: Annotated[
        Optional[ViolateAction],
        Field(
            description='Applies a drop-probability to packets that the policer has determined are exceeding (red).',
            title='Violate Action',
        ),
    ] = None


class QueueModel(BaseModel):
    committedBurstSize: Annotated[
        Optional[int],
        Field(description='Committed Burst Size.', title='Committed Burst Size'),
    ] = None
    maximumBurstSize: Annotated[
        Optional[int],
        Field(
            description='Maximum amount of shared buffer memory available to the queue in bytes.',
            ge=0,
            le=4294967295,
            title='Maximum Burst Size',
        ),
    ] = None
    pfcOffThreshold: Annotated[
        Optional[int],
        Field(
            description='PFC off threshold.', ge=0, le=100, title='PFC Off Threshold'
        ),
    ] = None
    pfcOnThreshold: Annotated[
        Optional[int],
        Field(description='PFC on threshold.', ge=0, le=100, title='PFC On Threshold'),
    ] = None
    pfcPauseFramePriority: Annotated[
        Optional[int],
        Field(
            description='PFC priorities indicated in generated pfc-pause-frame if congestion occurs in a given pfc-queue.',
            title='PFC Priority',
        ),
    ] = None
    pfcReservedShareBufferPercent: Annotated[
        Optional[int],
        Field(
            description='Maximum level the pfc-queue can take from pfc-reserved buffer configured per given forwarding-complex.',
            ge=0,
            le=100,
            title='PFC Reserved Buffer',
        ),
    ] = None
    queue: Annotated[
        str, Field(description='Reference to a Queue resource.', title='Queue')
    ]


class QueueManagementItemModel(BaseModel):
    pfcReservedBufferPercent: Annotated[
        Optional[int],
        Field(
            description='Percentage of the linecard buffer reserved for accomodating incoming traffic while upstream node reacts to generated PFC-pause frames. Note: this percentage must be common across all EgressPolicies and QueuesSets used on the same linecard.',
            ge=0,
            le=100,
            title='PFC Reserved Linecard Buffer Percent',
        ),
    ] = None
    queues: Annotated[
        List[QueueModel], Field(description='List of queues.', title='Queues')
    ]


class SpecModel(BaseModel):
    classifier: Annotated[
        Optional[Classifier],
        Field(
            description='Classifier manages the configuration of traffic classification policies in a network. It includes various entry types like IPv4, IPv6, Dot1p, and DSCP policies. Each entry specifies how traffic should be classified and what actions should be taken on the matched packets.',
            title='Classifiers',
        ),
    ] = None
    forwardingClassToQueueMapping: Annotated[
        Optional[List[ForwardingClassToQueueMappingItemModel]],
        Field(
            description='Forwarding class to queue mapping policy.',
            title='Forwarding Class to Queue Mapping',
        ),
    ] = None
    policers: Annotated[
        Optional[List[Policer]],
        Field(
            description='Ordered list of policers where the first policer is evaluated first before proceeding to the next.',
            title='Policers',
        ),
    ] = None
    queueManagement: Annotated[
        Optional[List[QueueManagementItemModel]],
        Field(
            description='Queue management policy for egress queues.',
            title='Queue Management',
        ),
    ] = None


class IngressPolicyDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class IngressPolicyDeletedResources(RootModel[List[IngressPolicyDeletedResourceEntry]]):
    root: List[IngressPolicyDeletedResourceEntry]


class IngressPolicyMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class Attachment(BaseModel):
    interface: Annotated[
        Optional[str],
        Field(
            description='Specifies the Interface on which to deploy the policies.',
            title='Interface',
        ),
    ] = None
    interfaceType: Annotated[
        Optional[Literal['ACCESS', 'NETWORK']],
        Field(
            description='Used for platforms that differentiate between access/service interfaces and network interface.  These platforms may require different classifiers depending on whether they are applied on access/service interfaces or network interfaces.  Specifies whether the classifier should be configured as a service Egress classifier or network Egress classifier',
            title='Interface Type',
        ),
    ] = None
    subInterfaceIndex: Annotated[
        Optional[int],
        Field(
            description='Specifies the SubInterfaceIndex on which to deploy the policies.',
            title='SubInterface Index',
        ),
    ] = None


class SpecModel1(BaseModel):
    attachments: Annotated[
        List[Attachment],
        Field(
            description='Specifies a list of Interfaces and subinterfaces on which to deploy the policies.',
            title='Interfaces',
        ),
    ]
    egressPolicy: Annotated[
        Optional[str],
        Field(
            description='Specifies an EgressPolicy to deploy on the specified Node.',
            title='Egress Policy',
        ),
    ] = None
    ingressPolicy: Annotated[
        Optional[str],
        Field(
            description='Specifies the IngressPolicy to deploy on the specified Node.',
            title='Ingress Policy',
        ),
    ] = None


class PolicyAttachmentDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class PolicyAttachmentDeletedResources(
    RootModel[List[PolicyAttachmentDeletedResourceEntry]]
):
    root: List[PolicyAttachmentDeletedResourceEntry]


class PolicyAttachmentMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class SpecModel2(BaseModel):
    egressPolicy: Annotated[
        Optional[str],
        Field(
            description='Specifies an EgressPolicy to deploy on the specified Node.',
            title='Egress Policy',
        ),
    ] = None
    ingressPolicy: Annotated[
        Optional[str],
        Field(
            description='Specifies the IngressPolicy to deploy on the specified Node.',
            title='Ingress Policy',
        ),
    ] = None
    interfaceSelector: Annotated[
        Optional[str],
        Field(
            description='Specifies a label selector to filter the interfaces on which to deploy the policies.',
            title='Interface Selector',
        ),
    ] = None
    interfaceType: Annotated[
        Optional[Literal['ACCESS', 'NETWORK']],
        Field(
            description='Used for platforms that differentiate between access/service interfaces and network interface.  These platforms may require different classifiers depending on whether they are applied on access/service interfaces or network interfaces.  Specifies whether the classifier should be configured as a service Egress classifier or network Egress classifier',
            title='Interface Type',
        ),
    ] = None
    interfaces: Annotated[
        Optional[List[str]],
        Field(
            description='Specifies a list of Interfaces on which to deploy the policies.',
            title='Interfaces',
        ),
    ] = None
    node: Annotated[
        Optional[str],
        Field(description='Specifies a Node to deploy the policies on.', title='Node'),
    ] = None
    nodeSelector: Annotated[
        Optional[str],
        Field(
            description='Specifies a label selector to filter the nodes on which to deploy the policies.',
            title='Node Selector',
        ),
    ] = None


class PolicyDeploymentDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class PolicyDeploymentDeletedResources(
    RootModel[List[PolicyDeploymentDeletedResourceEntry]]
):
    root: List[PolicyDeploymentDeletedResourceEntry]


class PolicyDeploymentMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class SpecModel3(BaseModel):
    queueID: Annotated[
        Optional[int],
        Field(
            description='The ID of the queue on which to apply the properties.  This is mandatory for usage of queus on SROS and is ignored on other operating systems.',
            title='Queue ID',
        ),
    ] = None
    queueType: Annotated[
        Literal['Normal', 'Pfc'],
        Field(
            description='QueueType specifies whether this is a normal queue or a PFC queue',
            title='Queue Type',
        ),
    ]
    trafficType: Annotated[
        Literal['Unicast', 'Multicast'],
        Field(
            description='The traffic type of the queue, either unicast or multicast.',
            title='Traffic Type',
        ),
    ]


class QueueDeletedResourceEntry(BaseModel):
    commitTime: Optional[str] = None
    hash: Optional[str] = None
    name: Optional[str] = None
    namespace: Optional[str] = None
    transactionId: Optional[int] = None


class QueueDeletedResources(RootModel[List[QueueDeletedResourceEntry]]):
    root: List[QueueDeletedResourceEntry]


class QueueMetadata(BaseModel):
    annotations: Optional[Dict[str, str]] = None
    labels: Optional[Dict[str, str]] = None
    name: Annotated[
        str,
        Field(
            max_length=253,
            pattern='^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$',
        ),
    ]
    namespace: str


class EgressPolicy(BaseModel):
    apiVersion: str
    kind: str
    metadata: EgressPolicyMetadata
    spec: Annotated[
        Spec,
        Field(
            description='EgressPolicySpec defines the desired state of EgressPolicy',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='EgressPolicyStatus defines the observed state of EgressPolicy',
            title='Status',
        ),
    ] = None


class EgressPolicyList(BaseModel):
    apiVersion: str
    items: Optional[List[EgressPolicy]] = None
    kind: str


class ForwardingClassModel(BaseModel):
    apiVersion: str
    kind: str
    metadata: ForwardingClassMetadata
    spec: Annotated[
        Dict[str, Any],
        Field(
            description='The ForwaringClass is used as a placeholder for to allow multiple other resources to reference the same forwarding class.',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='ForwardingClassStatus defines the observed state of ForwardingClass',
            title='Status',
        ),
    ] = None


class ForwardingClassList(BaseModel):
    apiVersion: str
    items: Optional[List[ForwardingClassModel]] = None
    kind: str


class IngressPolicy(BaseModel):
    apiVersion: str
    kind: str
    metadata: IngressPolicyMetadata
    spec: Annotated[
        SpecModel,
        Field(
            description='IngressPolicySpec defines the desired state of IngressPolicy',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='IngressPolicyStatus defines the observed state of IngressPolicy',
            title='Status',
        ),
    ] = None


class IngressPolicyList(BaseModel):
    apiVersion: str
    items: Optional[List[IngressPolicy]] = None
    kind: str


class PolicyAttachment(BaseModel):
    apiVersion: str
    kind: str
    metadata: PolicyAttachmentMetadata
    spec: Annotated[
        SpecModel1,
        Field(
            description='PolicyAttachmentSpec defines the desired state of PolicyAttachment',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='PolicyAttachmentStatus defines the observed state of PolicyAttachment',
            title='Status',
        ),
    ] = None


class PolicyAttachmentList(BaseModel):
    apiVersion: str
    items: Optional[List[PolicyAttachment]] = None
    kind: str


class PolicyDeployment(BaseModel):
    apiVersion: str
    kind: str
    metadata: PolicyDeploymentMetadata
    spec: Annotated[
        SpecModel2,
        Field(
            description='PolicyDeploymentSpec defines the desired state of PolicyDeployment',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='PolicyDeploymentStatus defines the observed state of PolicyDeployment',
            title='Status',
        ),
    ] = None


class PolicyDeploymentList(BaseModel):
    apiVersion: str
    items: Optional[List[PolicyDeployment]] = None
    kind: str


class QueueModel1(BaseModel):
    apiVersion: str
    kind: str
    metadata: QueueMetadata
    spec: Annotated[
        SpecModel3,
        Field(
            description='The Queue resource is used to define the properties of a queue, which can then be referenced by other resources.',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='QueueStatus defines the observed state of Queue',
            title='Status',
        ),
    ] = None


class QueueList(BaseModel):
    apiVersion: str
    items: Optional[List[QueueModel1]] = None
    kind: str
