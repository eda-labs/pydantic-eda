# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/eda-labs/openapi/v24.12.1/apps/routingpolicies.eda.nokia.com/v1alpha1/routingpolicies.json
#   timestamp: 2025-01-29T15:18:48+00:00

from __future__ import annotations

from typing import Any, Dict, List, Literal, Optional

from pydantic import BaseModel, Field
from typing_extensions import Annotated

from ..... import Metadata


class Bgp(BaseModel):
    asPathPrepend: Annotated[
        Optional[int],
        Field(
            description='AS number to prepend to the AS Path attributes.',
            ge=1,
            le=4294967295,
            title='AS Path Prepend',
        ),
    ] = None
    asPathRemove: Annotated[
        Optional[bool],
        Field(
            description='Clear the AS path to make it empty.', title='AS Path Remove'
        ),
    ] = None
    asPathReplace: Annotated[
        Optional[List[int]],
        Field(
            description='Replace the existing AS path with a new AS_SEQUENCE containing the listed AS numbers.',
            title='AS Path Replace',
        ),
    ] = None
    localPreference: Annotated[
        Optional[int],
        Field(
            description='Set a new LOCAL_PREF value for matching BGP routes.',
            ge=0,
            le=4294967295,
            title='Set Local Preference',
        ),
    ] = None
    setOrigin: Annotated[
        Optional[Literal['egp', 'igp', 'incomplete']],
        Field(
            description='Set a new ORIGIN attribute for matching BGP routes.',
            title='Set Origin',
        ),
    ] = None


class DefaultAction(BaseModel):
    bgp: Annotated[
        Optional[Bgp],
        Field(description='Actions related to the BGP protocol.', title='BGP'),
    ] = None
    policyResult: Annotated[
        Optional[Literal['accept', 'reject']],
        Field(description='Final disposition for the route.', title='Policy Result'),
    ] = None


class Action(BaseModel):
    bgp: Annotated[
        Optional[Bgp],
        Field(description='Actions related to the BGP protocol.', title='BGP'),
    ] = None
    policyResult: Annotated[
        Optional[Literal['accept', 'reject']],
        Field(description='Final disposition for the route.', title='Policy Result'),
    ] = None


class BgpModel(BaseModel):
    evpnRouteType: Annotated[
        Optional[List[int]],
        Field(
            description='Match conditions for EVPN route types.',
            title='EVPN Route Type',
        ),
    ] = None


class Match(BaseModel):
    bgp: Annotated[
        Optional[BgpModel],
        Field(
            description='Configuration for BGP-specific policy match criteria.',
            title='BGP',
        ),
    ] = None
    family: Annotated[
        Optional[List[str]],
        Field(
            description='Address families that the route belongs to.', title='Family'
        ),
    ] = None
    prefixSet: Annotated[
        Optional[str],
        Field(description='Reference to a PrefixSet resource.', title='Prefix Set'),
    ] = None
    protocol: Annotated[
        Optional[
            Literal[
                'AGGREGATE',
                'ARP_ND',
                'BGP',
                'BGP_EVPN',
                'DHCP',
                'GRIBI',
                'HOST',
                'ISIS',
                'LOCAL',
                'LINUX',
                'NDK1',
                'NDK2',
                'OSPFV2',
                'OSPFV3',
                'STATIC',
            ]
        ],
        Field(description='The route protocol type to match.', title='Protocol'),
    ] = None


class StatementItem(BaseModel):
    action: Annotated[
        Optional[Action],
        Field(
            description='Actions for routes that match the policy statement.',
            title='Action',
        ),
    ] = None
    match: Annotated[
        Optional[Match],
        Field(description='Match conditions of the policy statement.', title='Match'),
    ] = None
    name: Annotated[
        str, Field(description='Name of the policy statement.', title='Name')
    ]


class Spec(BaseModel):
    defaultAction: Annotated[
        Optional[DefaultAction],
        Field(
            description='The default action to apply if no other actions are defined.',
            title='Default Action',
        ),
    ] = None
    statement: Annotated[
        Optional[List[StatementItem]],
        Field(description='List of policy statements.', title='Statements'),
    ] = None


class Policy(BaseModel):
    apiVersion: str
    kind: str
    metadata: Metadata
    spec: Annotated[
        Spec,
        Field(
            description='Policy defines a set of rules and actions to manage network traffic or routing behavior, with statements that include matching conditions and actions, such as accepting or rejecting routes, or modifying route attributes like BGP parameters.',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='PolicyStatus defines the observed state of Policy.',
            title='Status',
        ),
    ] = None


class PolicyList(BaseModel):
    apiVersion: str
    items: Optional[List[Policy]] = None
    kind: str


class PrefixItem(BaseModel):
    endRange: Annotated[
        Optional[int],
        Field(
            description='The end range when using a range to match prefixes.',
            ge=0,
            le=128,
            title='End Range',
        ),
    ] = None
    exact: Annotated[
        Optional[bool],
        Field(
            description='Indicates if it is an exact match. Ignores the StartRange and EndRange if this param is set.',
            title='Exact',
        ),
    ] = None
    prefix: Annotated[
        str,
        Field(
            description='The IPv4 or IPv6 prefix in CIDR notation with mask.',
            title='Prefix',
        ),
    ]
    startRange: Annotated[
        Optional[int],
        Field(
            description='If specifying a range, this is the start of the range.',
            ge=0,
            le=128,
            title='Start Range',
        ),
    ] = None


class SpecModel(BaseModel):
    prefix: Annotated[
        List[PrefixItem],
        Field(
            description='List of IPv4 or IPv6 prefixes in CIDR notation.',
            title='Prefixes',
        ),
    ]


class PrefixSet(BaseModel):
    apiVersion: str
    kind: str
    metadata: Metadata
    spec: Annotated[
        SpecModel,
        Field(
            description='PrefixSet defines a collection of IP prefixes, which may include specific CIDR blocks or a range of prefixes. This set is typically used for matching routes or implementing routing policies.',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Dict[str, Any]],
        Field(
            description='PrefixSetStatus defines the observed state of PrefixSet.',
            title='Status',
        ),
    ] = None


class PrefixSetList(BaseModel):
    apiVersion: str
    items: Optional[List[PrefixSet]] = None
    kind: str
