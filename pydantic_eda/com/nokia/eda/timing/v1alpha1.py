# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/eda-labs/openapi/v24.12.1/apps/timing.eda.nokia.com/v1alpha1/timing.json
#   timestamp: 2025-01-29T15:18:55+00:00

from __future__ import annotations

from datetime import date
from typing import List, Literal, Optional

from pydantic import BaseModel, Field
from typing_extensions import Annotated

from ..... import Metadata


class Server(BaseModel):
    iBurst: Annotated[
        Optional[bool],
        Field(
            description='Indicates whether this server should enable burst synchronization or not',
            title='Enable iBurst',
        ),
    ] = None
    preferred: Annotated[
        Optional[bool],
        Field(
            description='Indicates whether this server should be preferred or not',
            title='Preferred Server',
        ),
    ] = None
    server: Annotated[
        str,
        Field(
            description='An NTP server can either be an IP address or an FQDN',
            title='Server',
        ),
    ]


class Spec(BaseModel):
    router: Annotated[
        Optional[str],
        Field(description='Router used to reach the NTP servers.', title='Router'),
    ] = None
    routerKind: Annotated[
        Literal['MANAGEMENTROUTER', 'ROUTER', 'DEFAULTROUTER'],
        Field(
            description='the Kind of the router used to reach the NTP servers.',
            title='Router Kind',
        ),
    ]
    routerSelector: Annotated[
        Optional[List[str]],
        Field(
            description='Selects router resources based on the defined KIND.  Applies to DefaultRouter only. Not supported for Router and ManagementRouter.',
            title='Router Selector',
        ),
    ] = None
    servers: Annotated[
        List[Server],
        Field(
            description='A list of NTP servers, each entry in the list can either be an IP address or an FQDN.',
            title='Servers',
        ),
    ]
    sourceInterface: Annotated[
        Optional[str],
        Field(
            description='Specifies a Interface resource to use as a source of NTP traffic. If none is specified the Node default behavior is used.',
            title='Source Interface',
        ),
    ] = None
    sourceInterfaceKind: Annotated[
        Optional[Literal['IRB', 'ROUTED', 'DEFAULT', 'SYSTEM']],
        Field(
            description='Specifies the source interface Kind to use as a source of NTP traffic.',
            title='Source Interface Kind',
        ),
    ] = None


class Node(BaseModel):
    node: Annotated[str, Field(description='Reference to Node object', title='Node')]
    operatingSystem: Annotated[
        str, Field(description='Operating System of the Node', title='Operating System')
    ]
    synchronized: Annotated[
        Optional[str],
        Field(description='Synchronized state of the Node', title='Synchronized'),
    ] = None


class Status(BaseModel):
    health: Annotated[
        Optional[int],
        Field(
            description='Indicates the health score of the NTPClient',
            title='Health Score',
        ),
    ] = None
    healthScoreReason: Annotated[
        Optional[str],
        Field(
            description='Indicates the reason for the health score',
            title='Health Score Reason',
        ),
    ] = None
    lastChange: Annotated[
        Optional[date],
        Field(
            description='The time when the state of the resource last changed',
            title='Last Change',
        ),
    ] = None
    nodes: Annotated[
        Optional[List[Node]],
        Field(
            description='List of nodes which are not synchronized',
            title='Unsynchronized Nodes',
        ),
    ] = None
    operationalState: Annotated[
        Optional[str],
        Field(
            description='Operational state of the NTPClient', title='Operational State'
        ),
    ] = None


class NTPClient(BaseModel):
    apiVersion: str
    kind: str
    metadata: Metadata
    spec: Annotated[
        Spec,
        Field(
            description='The NTP client allows for configuring NTP servers and the source of NTP traffic in order for the devices to synchronize their clocks.',
            title='Specification',
        ),
    ]
    status: Annotated[
        Optional[Status],
        Field(
            description='NTPClientStatus defines the observed state of NTPClient',
            title='Status',
        ),
    ] = None


class NTPClientList(BaseModel):
    apiVersion: str
    items: Optional[List[NTPClient]] = None
    kind: str
